00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/11/2022 5:24:57 PM

00000000  =00009005                  1  addressOutput EQU   $9005
00000000  =00008000                  2  input1      EQU     $8000           where input 1 is stored (can be changed if needed)
00000000  =00008004                  3  input2      EQU     $8004          where input 2 is stored (can be changed if needed)
00000000  =00008008                  4  userInputStored    EQU     $8008   
00000000                             5  
00000000                             6  
00000000                             7  
00000000                             8  
00000000                             9  
00001000                            10      ORG    $1000
00001000                            11  START:                           *Main
00001000                            12  
00001000  13FC 0000 000025F0        13      MOVE.B  #0,(LineCounter)
00001008                            14  userInputStart
00001008  6100 0974                 15      BSR     USERINPUT
0000100C  2479 00008000             16      MOVE.L    input1,A2
00001012                            17  memoryLoop
00001012                            18      
00001012  6100 01BA                 19      BSR     OPCODE
00001016  548A                      20      ADD.L   #2,A2
00001018  260A                      21      MOVE.L A2,D3 * current
0000101A  2C39 00008004             22      MOVE.L (input2),D6 * the upper bound
00001020  B686                      23      CMP.L   D6,D3
00001022  6C00 0180                 24      BGE     userInputRepeat
00001026  60EA                      25      BRA     memoryLoop
00001028                            26  
00001028                            27      
00001028                            28  *testing purposes----------------------------------------------------
00001028  1C3C 0004                 29      MOVE.B #$04, D6
0000102C  347C 1004                 30      MOVE.W #$1004, A2
00001030  7C0A                      31      MOVEQ #10, D6
00001032  264A                      32      MOVEA.L A2, A3
00001034  B641                      33      CMP D1,D3
00001036  9C82                      34      SUB.L D2, D6
00001038                            35  
00001038  6000 0002                 36      BRA here
0000103C                            37  here
0000103C  4EB9 000011A2             38      JSR there
00001042  4693                      39      NOT.L (A3)
00001044  47D1                      40      LEA (A1),A3
00001046  8AB9 00008000             41      OR.L input1, D5
0000104C  48E7 FFFE                 42      MOVEM.L D0-D7/A0-A6,-(SP) 
00001050  CC01                      43      AND.B D1,D6
00001052  D803                      44      ADD.B D3,D4
00001054  D4C9                      45      ADDA.W A1,A2
00001056  5E81                      46      ADDQ.L #7,D1
00001058  E709                      47      LSL.B #3,D1
0000105A  E449                      48      lSR.W #2,D1
0000105C  ED02                      49      ASL.B #6,D2
0000105E  EA42                      50      ASR.W #5,D2
00001060  EB1B                      51      ROL.B #5,D3
00001062  E85B                      52      ROR.W #4,D3
00001064  6E00 000E                 53      BGT letsgo
00001068  B67C 0004                 54      CMP #4,D3 
0000106C  6700 0006                 55      BEQ letsgo
00001070  6F00 0002                 56      BLE letsgo
00001074                            57     
00001074                            58  letsgo
00001074                            59      
00001074                            60  * calls-------------------------------------------------------
00001074  347C 1012                 61      MOVE.W #$1012, A2
00001078  6100 0154                 62      BSR     OPCODE * test MOVE.B
0000107C                            63  
0000107C  347C 1016                 64      MOVE.W #$1016, A2
00001080  6100 014C                 65      BSR     OPCODE * test MOVEA.W
00001084                            66      
00001084  347C 101A                 67      MOVE.W #$101A, A2
00001088  6100 0144                 68      BSR     OPCODE * test MOVEQ
0000108C                            69     
0000108C  347C 101C                 70      MOVE.W #$101C, A2
00001090  6100 013C                 71      BSR     OPCODE *test MOVEA.L
00001094                            72      
00001094  347C 101E                 73      MOVE.W #$101E, A2
00001098  6100 0134                 74      BSR     OPCODE *test DATA
0000109C                            75      
0000109C                            76      
0000109C  347C 1020                 77      MOVE.W #$1020, A2
000010A0  6100 012C                 78      BSR     OPCODE *test SUB.L
000010A4                            79      
000010A4  347C 1022                 80      MOVE.W #$1022, A2
000010A8  6100 0124                 81      BSR     OPCODE *test BRA
000010AC                            82      
000010AC  347C 1026                 83      MOVE.W #$1026, A2
000010B0  6100 011C                 84      BSR     OPCODE *test JSR
000010B4                            85      
000010B4                            86      
000010B4  43F9 0000269A             87      LEA empty,A1
000010BA  13FC 0001 000025F1        88      MOVE.B  #1,(OutputType)       
000010C2  6100 114A                 89      BSR    OUTPUT
000010C6                            90  
000010C6                            91      
000010C6  347C 102C                 92      MOVE.W #$102C, A2
000010CA  6100 0102                 93      BSR     OPCODE *test NOT
000010CE                            94      
000010CE  347C 102E                 95      MOVE.W #$102E, A2
000010D2  6100 00FA                 96      BSR     OPCODE *test LEA
000010D6                            97      
000010D6  347C 1030                 98      MOVE.W #$1030, A2
000010DA  6100 00F2                 99      BSR     OPCODE *test OR
000010DE                           100      
000010DE  43F9 0000269A            101       LEA empty,A1
000010E4  13FC 0001 000025F1       102      MOVE.B  #1,(OutputType)       
000010EC  6100 1120                103      BSR    OUTPUT
000010F0                           104  
000010F0                           105      
000010F0  347C 1036                106      MOVE.W #$1036, A2
000010F4  6100 00D8                107      BSR     OPCODE *test MOVEM
000010F8                           108  
000010F8  347C 103A                109      MOVE.W #$103A, A2
000010FC  6100 00D0                110      BSR     OPCODE *test AND
00001100                           111      
00001100  347C 103C                112      MOVE.W #$103C, A2
00001104  6100 00C8                113      BSR     OPCODE *test ADD
00001108                           114      
00001108  43F9 0000269A            115      LEA empty,A1
0000110E  13FC 0001 000025F1       116      MOVE.B  #1,(OutputType) * new line  
00001116  6100 10F6                117      BSR    OUTPUT
0000111A                           118  
0000111A  347C 103E                119      MOVE.W #$103E, A2
0000111E  6100 00AE                120      BSR     OPCODE *test ADDA
00001122                           121      
00001122  347C 1040                122      MOVE.W #$1040, A2
00001126  6100 00A6                123      BSR     OPCODE *test ADDQ
0000112A                           124      
0000112A  347C 1042                125      MOVE.W #$1042, A2
0000112E  6100 009E                126      BSR     OPCODE *test LSL
00001132                           127  
00001132  347C 1044                128      MOVE.W #$1044, A2
00001136  6100 0096                129      BSR     OPCODE *test LSR
0000113A                           130      
0000113A  347C 1046                131      MOVE.W #$1046, A2
0000113E  6100 008E                132      BSR     OPCODE *test ASL
00001142                           133      
00001142  43F9 0000269A            134      LEA empty,A1
00001148  13FC 0001 000025F1       135      MOVE.B  #1,(OutputType) * new line  
00001150  6100 10BC                136      BSR    OUTPUT
00001154                           137  
00001154                           138  
00001154  347C 1048                139      MOVE.W #$1048, A2
00001158  6100 0074                140      BSR     OPCODE *test ASR
0000115C                           141      
0000115C                           142      
0000115C  347C 104A                143      MOVE.W #$104A, A2
00001160  6100 006C                144      BSR     OPCODE *test ROL
00001164                           145  
00001164  347C 104C                146      MOVE.W #$104C, A2
00001168  6100 0064                147      BSR     OPCODE *test ROR
0000116C                           148      
0000116C  43F9 0000269A            149      LEA empty,A1
00001172  13FC 0001 000025F1       150      MOVE.B  #1,(OutputType) * new line  
0000117A  6100 1092                151      BSR    OUTPUT
0000117E                           152  
0000117E  347C 104E                153      MOVE.W #$104E, A2
00001182  6100 004A                154      BSR     OPCODE *test BGT
00001186                           155  
00001186  347C 1056                156      MOVE.W #$1056, A2
0000118A  6100 0042                157      BSR     OPCODE *test BEQ
0000118E                           158      
0000118E  347C 105A                159      MOVE.W #$105A, A2
00001192  6100 003A                160      BSR     OPCODE *test BLE
00001196                           161      
00001196                           162  
00001196                           163    
00001196  347C 118C                164      MOVE.W #$118C, A2
0000119A  6100 0032                165      BSR     OPCODE *test RTS
0000119E                           166  
0000119E                           167  
0000119E                           168  * calls---------------------------------------------------------    
0000119E  6000 0004                169      BRA userInputRepeat
000011A2                           170  there    
000011A2  4E75                     171      RTS
000011A4                           172  * end testing--------------------------------------------------------------
000011A4                           173   
000011A4                           174  
000011A4                           175       
000011A4                           176    
000011A4                           177  
000011A4                           178      
000011A4                           179  userInputRepeat
000011A4  43F9 0000257C            180      LEA     INPUTREPEAT,A1
000011AA  103C 000E                181      MOVE.B  #14,D0
000011AE  4E4F                     182      TRAP    #15
000011B0  5239 000025F0            183      ADD.B   #1,(LineCounter)
000011B6                           184      
000011B6  43F9 00008008            185      LEA     userInputStored,A1
000011BC  103C 0005                186      MOVE.B  #5,D0
000011C0  4E4F                     187      TRAP    #15
000011C2                           188      
000011C2  B23C 000D                189      CMP.B   #$0D,D1
000011C6  6700 FE40                190      BEQ     userInputStart
000011CA                           191   
000011CA  FFFF FFFF                192      SIMHALT
000011CE                           193  
000011CE                           194  **********************************************************
000011CE                           195  *Subroutine: OPCODE
000011CE                           196  *What it does: Looks at the word pointed to by A2 and determines opcode
000011CE                           197  *Registers: 
000011CE                           198  *A1: printing
000011CE                           199  *A2: parameter with instruction address
000011CE                           200  *D0: printing
000011CE                           201  *D3: used for determing the instruction, mostly shifts
000011CE                           202  *D2: used for determing the size
000011CE                           203  *D4: used for passing size to SIZE
000011CE                           204  *Paramemeters: A2 the memory address to decode from
000011CE                           205  **********************************************************
000011CE                           206  OPCODE:
000011CE  4243                     207      CLR D3
000011D0                           208      
000011D0                           209      
000011D0  0C52 4E75                210      CMP #$4E75, (A2) * RTS compare, this has to be done before JSR, LEA, and NOT
000011D4  6700 0396                211      BEQ rts
000011D8                           212      
000011D8  0C52 4E71                213      CMP #$4E71, (A2) *NOP compare
000011DC  6700 0148                214      BEQ nop
000011E0                           215      
000011E0  3612                     216      Move.W (A2), D3 
000011E2  E04B                     217      LSR #8,D3 * make D3 only contain the first 4 bits of the instruction as its LSig word
000011E4  E84B                     218      LSR #4,D3
000011E6                           219      
000011E6                           220      
000011E6  B67C 000F                221      CMP #%1111, D3 * none of the instructions we are processing have these
000011EA  6700 0764                222      BEQ data
000011EE  B67C 0000                223      CMP #%0000, D3 * 
000011F2  6700 075C                224      BEQ data
000011F6                           225  
000011F6                           226  
000011F6                           227      
000011F6  B67C 0008                228      CMP #%1000, D3 * OR compare
000011FA  6700 05F6                229      BEQ or
000011FE                           230      
000011FE                           231      
000011FE  B67C 0003                232      CMP #%0011, D3 *MOVE and MOVEA compare
00001202  6F00 0142                233      BLE move
00001206                           234      
00001206  B67C 0007                235      CMP #%0111, D3 *MOVEQ compare
0000120A  6700 01C8                236      BEQ moveq
0000120E                           237      
0000120E  B67C 0009                238      CMP #%1001, D3 *SUB compare
00001212  6700 0230                239      BEQ sub
00001216                           240      
00001216  B67C 000C                241      CMP #%1100, D3 *AND compare
0000121A  6700 0622                242      BEQ and
0000121E                           243      
0000121E  B67C 0005                244      CMP #%0101, D3 *ADDQ compare
00001222  6700 026C                245      BEQ addq
00001226                           246      
00001226  B67C 0006                247      CMP #%0110, D3 *BCC compare, BGT, BLE, and BEQ are branched from internally
0000122A  6700 065E                248      BEQ bcc
0000122E                           249      
0000122E                           250  
0000122E  3612                     251      Move.W (A2), D3 * reset D3
00001230  0243 F118                252      ANDI.W #%1111000100011000,D3  * the bits relevant to LSL
00001234  B67C E108                253      CMP #%1110000100001000,D3 * LSL compare
00001238  6700 03CA                254      BEQ lsl
0000123C                           255  
0000123C  3612                     256      Move.W (A2), D3 * reset D3
0000123E  0243 F118                257      ANDI.W #%1111000100011000,D3  * the bits relevant to LSR
00001242  B67C E008                258      CMP #%1110000000001000,D3 * LSR compare
00001246  6700 0408                259      BEQ lsr
0000124A                           260      
0000124A                           261      
0000124A  3612                     262      Move.W (A2), D3 * reset D3
0000124C  0243 F118                263      ANDI.W #%1111000100011000,D3  * the bits relevant to ASL
00001250  B67C E100                264      CMP #%1110000100000000,D3 * ASL compare
00001254  6700 0446                265      BEQ asl
00001258                           266  
00001258  3612                     267      Move.W (A2), D3 * reset D3
0000125A  0243 F118                268      ANDI.W #%1111000100011000,D3  * the bits relevant to ASR
0000125E  B67C E000                269      CMP #%1110000000000000,D3 * ASR compare
00001262  6700 0484                270      BEQ asr
00001266                           271  
00001266  3612                     272      Move.W (A2), D3 * reset D3
00001268  0243 F118                273      ANDI.W #%1111000100011000,D3  * the bits relevant to ASL
0000126C  B67C E118                274      CMP #%1110000100011000,D3 * ROL compare
00001270  6700 04C2                275      BEQ rol
00001274                           276  
00001274  3612                     277      Move.W (A2), D3 * reset D3
00001276  0243 F118                278      ANDI.W #%1111000100011000,D3  * the bits relevant to ASR
0000127A  B67C E018                279      CMP #%1110000000011000,D3 * ROR compare
0000127E  6700 0500                280      BEQ ror
00001282                           281  
00001282                           282      
00001282                           283      
00001282  3612                     284      Move.W (A2), D3 * reset D3
00001284  0243 F0C0                285      ANDI.W #%1111000011000000,D3  * the bits relevant to ADDA
00001288  B67C D0C0                286      CMP #%1101000011000000,D3 * ADDA compare, must be done before add
0000128C  6700 029A                287      BEQ adda
00001290                           288      
00001290  3612                     289      Move.W (A2), D3 
00001292  E04B                     290      LSR #8,D3 * make D3 only contain the first 4 bits of the instruction as its LSig word
00001294  E84B                     291      LSR #4,D3
00001296  B67C 000D                292      CMP #%1101, D3 *ADD compare
0000129A  6700 0240                293      BEQ add
0000129E                           294  
0000129E                           295    
0000129E  3612                     296      Move.W (A2), D3 * reset D3
000012A0  0243 FB80                297      ANDI.W #%1111101110000000,D3  * the bits relevant to MOVEM
000012A4  B67C 4880                298      CMP #%0100100010000000,D3 * MOVEM compare
000012A8  6700 0150                299      BEQ movem
000012AC                           300  
000012AC                           301      
000012AC                           302      
000012AC  3612                     303      Move.W (A2), D3 * reset D3
000012AE  EC4B                     304      LSR #6,D3 * make D3 only contain the first 10 bits of the instruction
000012B0  B67C 013A                305      CMP #%0000000100111010, D3 * JSR compare, this has to be done before NOT and LEA
000012B4  6700 02DC                306      BEQ jsr
000012B8                           307  
000012B8  3612                     308      Move.W (A2), D3 * reset D3
000012BA  E04B                     309      LSR #8,D3 * make D3 only contain the first 8 bits
000012BC  B67C 0046                310      CMP #%01000110,D3 * NOT compare, this has to be done before LEA
000012C0  6700 02F6                311      BEQ not
000012C4                           312      
000012C4  3612                     313      Move.W (A2), D3 * reset D3
000012C6  0243 F1C0                314      ANDI.W #%1111000111000000,D3 * the bits relevant to LEA
000012CA  B67C 41C0                315      CMP #%0100000111000000,D3 *LEA compare
000012CE  6700 04FC                316      BEQ lea
000012D2                           317      
000012D2                           318      
000012D2                           319      
000012D2                           320      
000012D2                           321      
000012D2                           322  
000012D2                           323  
000012D2                           324     
000012D2  3612                     325      Move.W (A2), D3 * reset D3
000012D4  E04B                     326      LSR #8,D3 * make D3 only contain the first 8 bits of the instruction
000012D6  B67C 0060                327      CMP #%01100000, D3 *BRA compare
000012DA  6700 064E                328      BEQ bra
000012DE                           329      
000012DE                           330      
000012DE  6000 0670                331      BRA data
000012E2                           332      
000012E2                           333  return
000012E2  4E75                     334      RTS
000012E4                           335      
000012E4                           336  
000012E4                           337  
000012E4                           338      
000012E4                           339  byte
000012E4  43F9 0000267D            340      LEA    byteout,A1        
000012EA  13FC 0002 000025F1       341      MOVE.B  #2,(OutputType)
000012F2  6100 0F1A                342      BSR     OUTPUT 
000012F6  2257                     343      MOVE.L (SP),A1 
000012F8  4ED1                     344      JMP (A1)
000012FA                           345  
000012FA                           346  word
000012FA  43F9 00002684            347      LEA    wordout,A1        
00001300  13FC 0002 000025F1       348      MOVE.B  #2,(OutputType)
00001308  6100 0F04                349      BSR     OUTPUT
0000130C  2257                     350      MOVE.L (SP),A1 
0000130E  4ED1                     351      JMP (A1)
00001310                           352  
00001310                           353  long
00001310  43F9 0000268B            354      LEA    longout,A1        
00001316  13FC 0002 000025F1       355      MOVE.B  #2,(OutputType)
0000131E  6100 0EEE                356      BSR     OUTPUT
00001322  2257                     357      MOVE.L (SP),A1 
00001324  4ED1                     358      JMP (A1)
00001326                           359      
00001326                           360       
00001326                           361      
00001326                           362  nop 
00001326  13FC 0004 000025F1       363      MOVE.B  #4,(OutputType)
0000132E  6100 0EDE                364      BSR     OUTPUT
00001332  43F9 000025F3            365      LEA    nopout,A1        
00001338  13FC 0001 000025F1       366      MOVE.B  #1,(OutputType)
00001340  6100 0ECC                367      BSR     OUTPUT
00001344  609C                     368      BRA return
00001346                           369      
00001346                           370  move
00001346                           371      * put the size of the instruction into D2 to use later
00001346                           372      * since the first two bits of D3 are 00 for move moving the entire word works
00001346  3403                     373      Move.W D3, D2
00001348                           374  
00001348                           375  
00001348                           376      * determine if MOVE or MOVEA
00001348                           377      * if bits 8,7,6 = 001 its MOVEA
00001348  3612                     378      MOVE.W (A2),D3
0000134A  0243 01C0                379      ANDI.W #%0000000111000000, D3 *extract only bits 8,7,6
0000134E                           380      
0000134E  B67C 0040                381      CMP #%0000000001000000,D3 * if only the sixth bit is set then instruction is MOVEA
00001352  6700 0044                382      BEQ movea
00001356                           383      
00001356  13FC 0004 000025F1       384      MOVE.B  #4,(OutputType)
0000135E  6100 0EAE                385      BSR     OUTPUT
00001362                           386  
00001362  43F9 000025F9            387      LEA    moveout,A1     *print the type
00001368  13FC 0001 000025F1       388      MOVE.B  #1,(OutputType)   
00001370  6100 0E9C                389      BSR    OUTPUT
00001374                           390      
00001374                           391      *now to print size  
00001374  4879 00001390            392      PEA op1
0000137A                           393      
0000137A  B47C 0002                394      cmp #2,D2 *if the size is 2 branch to long
0000137E  6790                     395      BEQ long
00001380  B47C 0003                396      cmp #3,D2 *if the size is 3 branch to word
00001384  6700 FF74                397      BEQ word
00001388  B47C 0001                398      cmp #1,D2 * if the size is 1 branch to byte
0000138C  6700 FF56                399      BEQ byte   
00001390                           400  op1
00001390  6100 07D2                401      BSR MOVE_MOVEA_EA
00001394  6000 FF4C                402      BRA return
00001398                           403      
00001398                           404  movea
00001398  13FC 0004 000025F1       405      MOVE.B  #4,(OutputType)
000013A0  6100 0E6C                406      BSR     OUTPUT
000013A4                           407  
000013A4  43F9 000025FE            408      LEA    moveaout,A1
000013AA  13FC 0001 000025F1       409      MOVE.B  #1,(OutputType)       
000013B2  6100 0E5A                410      BSR    OUTPUT
000013B6                           411      
000013B6                           412      *now to print size  
000013B6  4879 000013CC            413      PEA op2
000013BC                           414  
000013BC  B47C 0002                415      cmp #2,D2 *if the size is 2 branch to long
000013C0  6700 FF4E                416      BEQ long
000013C4  B47C 0003                417      cmp #3,D2 *if the size is 3 branch to word
000013C8  6700 FF30                418      BEQ word
000013CC                           419  op2
000013CC  6100 0796                420      BSR MOVE_MOVEA_EA
000013D0  6000 FF10                421      BRA return
000013D4                           422      
000013D4                           423  moveq
000013D4  13FC 0004 000025F1       424      MOVE.B  #4,(OutputType)
000013DC  6100 0E30                425      BSR     OUTPUT
000013E0                           426  
000013E0  43F9 00002604            427      LEA    moveqout,A1
000013E6  13FC 0001 000025F1       428      MOVE.B  #1,(OutputType)       
000013EE  6100 0E1E                429      BSR    OUTPUT
000013F2  6100 08F8                430      BSR MOVEQ_EA
000013F6  6000 FEEA                431      BRA return
000013FA                           432  
000013FA                           433      
000013FA                           434  movem
000013FA  13FC 0004 000025F1       435      MOVE.B  #4,(OutputType)
00001402  6100 0E0A                436      BSR     OUTPUT
00001406                           437      
00001406  43F9 0000260C            438      LEA    movemout,A1
0000140C  13FC 0001 000025F1       439      MOVE.B  #1,(OutputType)       
00001414  6100 0DF8                440      BSR    OUTPUT
00001418                           441      
00001418  4879 00001436            442      PEA op3
0000141E  3412                     443      MOVE.W (A2),D2
00001420  0242 0040                444      ANDI.W #%0000000001000000, D2 * set to only the size bits
00001424  EC4A                     445      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001426  B47C 0001                446      CMP #1, D2 * if the size is 1 branch to long
0000142A  6700 FEE4                447      BEQ long
0000142E  B47C 0000                448      CMP #0, D2 * if the size is 0 branch to long
00001432  6700 FEC6                449      BEQ word
00001436                           450  op3
00001436  6100 08E0                451      BSR MOVEM_EA
0000143A  4EB9 00001D52            452      JSR PRINT_MOVEM
00001440  6000 FEA0                453      BRA return
00001444                           454      
00001444                           455      
00001444                           456  sub 
00001444  13FC 0004 000025F1       457      MOVE.B  #4,(OutputType)
0000144C  6100 0DC0                458      BSR     OUTPUT
00001450                           459     
00001450  43F9 00002612            460      LEA    subout,A1
00001456  13FC 0001 000025F1       461      MOVE.B  #1,(OutputType)       
0000145E  6100 0DAE                462      BSR    OUTPUT
00001462                           463      
00001462  3412                     464      MOVE.W (A2),D2
00001464  0242 00C0                465      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001468  EC4A                     466      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000146A                           467  
0000146A                           468  
0000146A                           469      
0000146A                           470      *now to print size  
0000146A  4879 00001488            471      PEA op4
00001470  B47C 0002                472      cmp #2,D2 *if the size is 2 branch to long
00001474  6700 FE9A                473      BEQ long
00001478  B47C 0001                474      cmp #1,D2 *if the size is 1 branch to word
0000147C  6700 FE7C                475      BEQ word
00001480  B47C 0000                476      cmp #0,D2 *if the size is 0 branch to byte
00001484  6700 FE5E                477      BEQ byte 
00001488                           478  op4
00001488  6100 075E                479      BSR EA_GROUP1
0000148C  6000 FE54                480      BRA return
00001490                           481      
00001490                           482  addq 
00001490  13FC 0004 000025F1       483      MOVE.B  #4,(OutputType)
00001498  6100 0D74                484      BSR     OUTPUT
0000149C                           485     
0000149C  43F9 0000261F            486      LEA    addqout,A1
000014A2  13FC 0001 000025F1       487      MOVE.B  #1,(OutputType)       
000014AA  6100 0D62                488      BSR    OUTPUT
000014AE                           489      
000014AE  3412                     490      MOVE.W (A2),D2
000014B0  0242 00C0                491      ANDI.W #%0000000011000000, D2 * set to only the size bits
000014B4  EC4A                     492      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000014B6                           493  
000014B6                           494  
000014B6                           495      
000014B6                           496      *now to print size  
000014B6  4879 000014D4            497      PEA op5
000014BC  B47C 0002                498      cmp #2,D2 *if the size is 2 branch to long
000014C0  6700 FE4E                499      BEQ long
000014C4  B47C 0001                500      cmp #1,D2 *if the size is 1 branch to word
000014C8  6700 FE30                501      BEQ word
000014CC  B47C 0000                502      cmp #0,D2 *if the size is 0 branch to byte
000014D0  6700 FE12                503      BEQ byte *otherwise branch to byte
000014D4                           504  op5    
000014D4  6100 07EA                505      BSR ADDQ_EA
000014D8  6000 FE08                506      BRA return    
000014DC                           507      
000014DC                           508      
000014DC                           509  add
000014DC  13FC 0004 000025F1       510      MOVE.B  #4,(OutputType)
000014E4  6100 0D28                511      BSR     OUTPUT
000014E8                           512  
000014E8  43F9 00002616            513      LEA    addout,A1
000014EE  13FC 0001 000025F1       514      MOVE.B  #1,(OutputType)       
000014F6  6100 0D16                515      BSR    OUTPUT
000014FA                           516      
000014FA  3412                     517      MOVE.W (A2),D2
000014FC  0242 00C0                518      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001500  EC4A                     519      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001502                           520  
00001502                           521  
00001502                           522      
00001502                           523      *now to print size  
00001502  4879 00001520            524      PEA op6
00001508  B47C 0002                525      cmp #2,D2 *if the size is 2 branch to long
0000150C  6700 FE02                526      BEQ long
00001510  B47C 0001                527      cmp #1,D2 *if the size is 1 branch to word
00001514  6700 FDE4                528      BEQ word
00001518  B47C 0000                529      cmp #0,D2 *if the size is 0 branch to byte
0000151C  6700 FDDC                530      BEQ word
00001520                           531  op6
00001520  6100 06C6                532      BSR EA_GROUP1
00001524  6000 FDBC                533      BRA return
00001528                           534  
00001528                           535  adda
00001528                           536  
00001528  13FC 0004 000025F1       537      MOVE.B  #4,(OutputType)
00001530  6100 0CDC                538      BSR     OUTPUT
00001534                           539  
00001534  43F9 0000261A            540      LEA    addaout,A1
0000153A  13FC 0001 000025F1       541      MOVE.B  #1,(OutputType)       
00001542  6100 0CCA                542      BSR    OUTPUT
00001546                           543      
00001546  3412                     544      MOVE.W (A2),D2
00001548  0242 0100                545      ANDI.W #%0000000100000000, D2 * set to only the size bit
0000154C  E04A                     546      LSR #8,D2 * make the size bits the first two bits in D2 LSig word
0000154E                           547  
0000154E                           548  
0000154E                           549      
0000154E                           550      *now to print size  
0000154E  4879 00001564            551      PEA op7
00001554  B47C 0001                552      cmp #1,D2 *if the size is 1 branch to long
00001558  6700 FDB6                553      BEQ long
0000155C  B47C 0000                554      cmp #0,D2 *if the size is 0 branch to word
00001560  6700 FD98                555      BEQ word
00001564                           556  op7
00001564  6100 0722                557      BSR EA_GROUP4
00001568  6000 FD78                558      BRA return
0000156C                           559  
0000156C                           560      
0000156C                           561  rts
0000156C  13FC 0004 000025F1       562      MOVE.B  #4,(OutputType)
00001574  6100 0C98                563      BSR     OUTPUT
00001578                           564  
00001578  43F9 00002663            565      LEA    rtsout,A1
0000157E  13FC 0001 000025F1       566      MOVE.B  #1,(OutputType)       
00001586  6100 0C86                567      BSR    OUTPUT
0000158A                           568      
0000158A  6100 06A2                569      BSR EA_GROUP2
0000158E  6000 FD52                570      BRA return
00001592                           571      
00001592                           572      
00001592                           573  jsr 
00001592  13FC 0004 000025F1       574      MOVE.B  #4,(OutputType)
0000159A  6100 0C72                575      BSR     OUTPUT
0000159E                           576     
0000159E  43F9 0000265B            577      LEA    jsrout,A1
000015A4  13FC 0001 000025F1       578      MOVE.B  #1,(OutputType)       
000015AC  6100 0C60                579      BSR    OUTPUT
000015B0                           580      
000015B0  6100 067C                581      BSR EA_GROUP2
000015B4  6000 FD2C                582      BRA return
000015B8                           583      
000015B8                           584      
000015B8                           585  not 
000015B8  13FC 0004 000025F1       586      MOVE.B  #4,(OutputType)
000015C0  6100 0C4C                587      BSR     OUTPUT
000015C4                           588    
000015C4  43F9 0000262C            589      LEA    notout,A1
000015CA  13FC 0001 000025F1       590      MOVE.B  #1,(OutputType)       
000015D2  6100 0C3A                591      BSR    OUTPUT
000015D6                           592      
000015D6  3412                     593      MOVE.W (A2),D2
000015D8  0242 00C0                594      ANDI.W #%0000000011000000, D2 * set to only the size bits
000015DC  EC4A                     595      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000015DE                           596  
000015DE                           597      *now to print size  
000015DE  4879 000015FC            598      PEA op8
000015E4  B47C 0002                599      cmp #2,D2 *if the size is 2 branch to long
000015E8  6700 FD26                600      BEQ long
000015EC  B47C 0001                601      cmp #1,D2 *if the size is 1 branch to word
000015F0  6700 FD08                602      BEQ word
000015F4  B47C 0000                603      cmp #0,D2 *if the size is 0 branch to byte
000015F8  6700 FCEA                604      BEQ byte
000015FC                           605  
000015FC                           606      
000015FC                           607  op8    
000015FC  6100 0672                608      BSR EA_GROUP3
00001600                           609      
00001600  6000 FCE0                610      BRA return
00001604                           611  
00001604                           612  lsl
00001604  13FC 0004 000025F1       613      MOVE.B  #4,(OutputType)
0000160C  6100 0C00                614      BSR     OUTPUT
00001610                           615  
00001610  43F9 00002637            616      LEA    lslout,A1
00001616  13FC 0001 000025F1       617      MOVE.B  #1,(OutputType)       
0000161E  6100 0BEE                618      BSR    OUTPUT
00001622                           619      
00001622  3412                     620      MOVE.W (A2),D2
00001624  0242 00C0                621      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001628  EC4A                     622      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000162A                           623  
0000162A                           624  
0000162A                           625      
0000162A                           626      *now to print size 
0000162A  4879 00001648            627      PEA op9 
00001630  B47C 0002                628      cmp #2,D2 *if the size is 2 branch to long
00001634  6700 FCDA                629      BEQ long
00001638  B47C 0001                630      cmp #1,D2 *if the size is 1 branch to word
0000163C  6700 FCBC                631      BEQ word
00001640  B47C 0000                632      cmp #0,D2 *if the size is 0 branch to byte
00001644  6700 FC9E                633      BEQ byte
00001648                           634  op9
00001648  6100 05E4                635      BSR EA_GROUP2
0000164C  6000 FC94                636      BRA return
00001650                           637  
00001650                           638  lsr
00001650  13FC 0004 000025F1       639      MOVE.B  #4,(OutputType)
00001658  6100 0BB4                640      BSR     OUTPUT
0000165C                           641  
0000165C  43F9 0000263B            642      LEA    lsrout,A1
00001662  13FC 0001 000025F1       643      MOVE.B  #1,(OutputType)       
0000166A  6100 0BA2                644      BSR    OUTPUT
0000166E                           645      
0000166E  3412                     646      MOVE.W (A2),D2
00001670  0242 00C0                647      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001674  EC4A                     648      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001676                           649  
00001676                           650  
00001676                           651      
00001676                           652      *now to print size 
00001676  4879 00001694            653      PEA op10 
0000167C  B47C 0002                654      cmp #2,D2 *if the size is 2 branch to long
00001680  6700 FC8E                655      BEQ long
00001684  B47C 0001                656      cmp #1,D2 *if the size is 1 branch to word
00001688  6700 FC70                657      BEQ word
0000168C  B47C 0000                658      cmp #0,D2 *if the size is 0 branch to byte
00001690  6700 FC52                659      BEQ byte
00001694                           660  op10
00001694  6100 0598                661      BSR EA_GROUP2
00001698  6000 FC48                662      BRA return
0000169C                           663  asl
0000169C  13FC 0004 000025F1       664      MOVE.B  #4,(OutputType)
000016A4  6100 0B68                665      BSR     OUTPUT
000016A8                           666  
000016A8  43F9 0000263F            667      LEA    aslout,A1
000016AE  13FC 0001 000025F1       668      MOVE.B  #1,(OutputType)       
000016B6  6100 0B56                669      BSR    OUTPUT
000016BA                           670      
000016BA  3412                     671      MOVE.W (A2),D2
000016BC  0242 00C0                672      ANDI.W #%0000000011000000, D2 * set to only the size bits
000016C0  EC4A                     673      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000016C2                           674  
000016C2                           675  
000016C2                           676      
000016C2                           677      *now to print size 
000016C2  4879 000016E0            678      PEA op11 
000016C8  B47C 0002                679      cmp #2,D2 *if the size is 2 branch to long
000016CC  6700 FC42                680      BEQ long
000016D0  B47C 0001                681      cmp #1,D2 *if the size is 1 branch to word
000016D4  6700 FC24                682      BEQ word
000016D8  B47C 0000                683      cmp #0,D2 *if the size is 0 branch to byte
000016DC  6700 FC06                684      BEQ byte
000016E0                           685  op11
000016E0  6100 054C                686      BSR EA_GROUP2
000016E4  6000 FBFC                687      BRA return
000016E8                           688  
000016E8                           689  asr
000016E8  13FC 0004 000025F1       690      MOVE.B  #4,(OutputType)
000016F0  6100 0B1C                691      BSR     OUTPUT
000016F4                           692  
000016F4  43F9 00002643            693      LEA    asrout,A1
000016FA  13FC 0001 000025F1       694      MOVE.B  #1,(OutputType)       
00001702  6100 0B0A                695      BSR    OUTPUT
00001706                           696      
00001706  3412                     697      MOVE.W (A2),D2
00001708  0242 00C0                698      ANDI.W #%0000000011000000, D2 * set to only the size bits
0000170C  EC4A                     699      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000170E                           700  
0000170E                           701  
0000170E                           702      
0000170E                           703       *now to print size 
0000170E  4879 0000172C            704      PEA op12 
00001714  B47C 0002                705      cmp #2,D2 *if the size is 2 branch to long
00001718  6700 FBF6                706      BEQ long
0000171C  B47C 0001                707      cmp #1,D2 *if the size is 1 branch to word
00001720  6700 FBD8                708      BEQ word
00001724  B47C 0000                709      cmp #0,D2 *if the size is 0 branch to byte
00001728  6700 FBBA                710      BEQ byte
0000172C                           711  op12
0000172C  6100 0500                712      BSR EA_GROUP2
00001730  6000 FBB0                713      BRA return
00001734                           714      
00001734                           715  rol
00001734  13FC 0004 000025F1       716      MOVE.B  #4,(OutputType)
0000173C  6100 0AD0                717      BSR     OUTPUT
00001740                           718  
00001740  43F9 00002647            719      LEA    rolout,A1
00001746  13FC 0001 000025F1       720      MOVE.B  #1,(OutputType)       
0000174E  6100 0ABE                721      BSR    OUTPUT
00001752                           722      
00001752  3412                     723      MOVE.W (A2),D2
00001754  0242 00C0                724      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001758  EC4A                     725      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000175A                           726  
0000175A                           727  
0000175A                           728      
0000175A                           729     *now to print size 
0000175A  4879 00001778            730      PEA op13 
00001760  B47C 0002                731      cmp #2,D2 *if the size is 2 branch to long
00001764  6700 FBAA                732      BEQ long
00001768  B47C 0001                733      cmp #1,D2 *if the size is 1 branch to word
0000176C  6700 FB8C                734      BEQ word
00001770  B47C 0000                735      cmp #0,D2 *if the size is 0 branch to byte
00001774  6700 FB6E                736      BEQ byte
00001778                           737  op13
00001778  6100 04B4                738      BSR EA_GROUP2
0000177C  6000 FB64                739      BRA return
00001780                           740  
00001780                           741  ror
00001780  13FC 0004 000025F1       742      MOVE.B  #4,(OutputType)
00001788  6100 0A84                743      BSR     OUTPUT
0000178C                           744  
0000178C  43F9 0000264B            745      LEA    rorout,A1
00001792  13FC 0001 000025F1       746      MOVE.B  #1,(OutputType)       
0000179A  6100 0A72                747      BSR    OUTPUT
0000179E                           748      
0000179E  3412                     749      MOVE.W (A2),D2
000017A0  0242 00C0                750      ANDI.W #%0000000011000000, D2 * set to only the size bits
000017A4  EC4A                     751      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000017A6                           752  
000017A6                           753  
000017A6                           754     *now to print size 
000017A6  4879 000017C4            755      PEA op14 
000017AC  B47C 0002                756      cmp #2,D2 *if the size is 2 branch to long
000017B0  6700 FB5E                757      BEQ long
000017B4  B47C 0001                758      cmp #1,D2 *if the size is 1 branch to word
000017B8  6700 FB40                759      BEQ word
000017BC  B47C 0000                760      cmp #0,D2 *if the size is 0 branch to byte
000017C0  6700 FB22                761      BEQ byte
000017C4                           762  op14
000017C4  6100 0468                763      BSR EA_GROUP2
000017C8  6000 FB18                764      BRA return
000017CC                           765      
000017CC                           766      
000017CC                           767  
000017CC                           768  lea
000017CC  13FC 0004 000025F1       769      MOVE.B  #4,(OutputType)
000017D4  6100 0A38                770      BSR     OUTPUT
000017D8                           771  
000017D8  43F9 00002624            772      LEA    leaout,A1
000017DE  13FC 0001 000025F1       773      MOVE.B  #1,(OutputType)       
000017E6  6100 0A26                774      BSR    OUTPUT
000017EA  6100 049C                775      BSR EA_GROUP4
000017EE  6000 FAF2                776      BRA return
000017F2                           777      
000017F2                           778  or
000017F2  13FC 0004 000025F1       779      MOVE.B  #4,(OutputType)
000017FA  6100 0A12                780      BSR     OUTPUT
000017FE                           781  
000017FE  43F9 00002630            782      LEA    orout,A1
00001804  13FC 0001 000025F1       783      MOVE.B  #1,(OutputType)       
0000180C  6100 0A00                784      BSR    OUTPUT
00001810                           785      
00001810                           786          
00001810  3412                     787      MOVE.W (A2),D2
00001812  0242 00C0                788      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001816  EC4A                     789      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001818                           790  
00001818                           791        *now to print size 
00001818  4879 00001836            792      PEA op15 
0000181E  B47C 0002                793      cmp #2,D2 *if the size is 2 branch to long
00001822  6700 FAEC                794      BEQ long
00001826  B47C 0001                795      cmp #1,D2 *if the size is 1 branch to word
0000182A  6700 FACE                796      BEQ word
0000182E  B47C 0000                797      cmp #0,D2 *if the size is 0 branch to byte
00001832  6700 FAB0                798      BEQ byte
00001836                           799  op15    
00001836  6100 03B0                800      BSR EA_GROUP1
0000183A  6000 FAA6                801      BRA return
0000183E                           802      
0000183E                           803  and
0000183E  13FC 0004 000025F1       804      MOVE.B  #4,(OutputType)
00001846  6100 09C6                805      BSR     OUTPUT
0000184A                           806  
0000184A  43F9 00002633            807      LEA    andout,A1
00001850  13FC 0001 000025F1       808      MOVE.B  #1,(OutputType)       
00001858  6100 09B4                809      BSR    OUTPUT
0000185C                           810      
0000185C                           811          
0000185C  3412                     812      MOVE.W (A2),D2
0000185E  0242 00C0                813      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001862  EC4A                     814      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001864                           815  
00001864                           816      *now to print size 
00001864  4879 00001882            817      PEA op16 
0000186A  B47C 0002                818      cmp #2,D2 *if the size is 2 branch to long
0000186E  6700 FAA0                819      BEQ long
00001872  B47C 0001                820      cmp #1,D2 *if the size is 1 branch to word
00001876  6700 FA82                821      BEQ word
0000187A  B47C 0000                822      cmp #0,D2 *if the size is 0 branch to byte
0000187E  6700 FA64                823      BEQ byte
00001882                           824  op16
00001882  6100 0364                825      BSR EA_GROUP1
00001886  6000 FA5A                826      BRA return    
0000188A                           827  
0000188A                           828  bcc
0000188A  4243                     829      CLR D3
0000188C  3612                     830      MOVE.W (A2), D3
0000188E                           831  
0000188E  0243 0F00                832      ANDI.W #%0000111100000000,D3 * bits [11-8]
00001892  E04B                     833      LSR.W #8,D3
00001894  B67C 000E                834      CMP #%1110, D3 * BGT compare
00001898  6700 001E                835      BEQ bgt
0000189C  B67C 000F                836      CMP #%1111, D3 * BLE compare
000018A0  6700 003C                837      BEQ ble
000018A4  B67C 0007                838      CMP #%0111, D3 * BEQ compare
000018A8  6700 005A                839      BEQ beq
000018AC  B67C 0000                840      CMP #%0000, D3 * BRA compare, *doesn't really go here but it works
000018B0  6700 0078                841      BEQ bra
000018B4                           842  
000018B4  6000 009A                843      BRA data * goto data if doesn't work
000018B8                           844      
000018B8                           845  
000018B8                           846  bgt
000018B8  13FC 0004 000025F1       847      MOVE.B  #4,(OutputType)
000018C0  6100 094C                848      BSR     OUTPUT
000018C4                           849  
000018C4  43F9 0000264F            850      LEA    bgtout,A1
000018CA  13FC 0001 000025F1       851      MOVE.B  #1,(OutputType)       
000018D2  6100 093A                852      BSR    OUTPUT
000018D6  6100 0610                853      BSR PRINT_BRA
000018DA  6000 FA06                854      BRA return
000018DE                           855  
000018DE                           856  ble
000018DE  13FC 0004 000025F1       857      MOVE.B  #4,(OutputType)
000018E6  6100 0926                858      BSR     OUTPUT
000018EA                           859  
000018EA  43F9 00002653            860      LEA    bleout,A1
000018F0  13FC 0001 000025F1       861      MOVE.B  #1,(OutputType)       
000018F8  6100 0914                862      BSR    OUTPUT
000018FC  6100 05EA                863      BSR PRINT_BRA
00001900  6000 F9E0                864      BRA return
00001904                           865  beq
00001904  13FC 0004 000025F1       866      MOVE.B  #4,(OutputType)
0000190C  6100 0900                867      BSR     OUTPUT
00001910                           868  
00001910  43F9 00002657            869      LEA    beqout,A1
00001916  13FC 0001 000025F1       870      MOVE.B  #1,(OutputType)       
0000191E  6100 08EE                871      BSR    OUTPUT
00001922  6100 05C4                872      BSR PRINT_BRA
00001926  6000 F9BA                873      BRA return
0000192A                           874  
0000192A                           875  bra
0000192A  13FC 0004 000025F1       876      MOVE.B  #4,(OutputType)
00001932  6100 08DA                877      BSR     OUTPUT
00001936                           878  
00001936  43F9 0000266D            879      LEA    braout,A1
0000193C  13FC 0001 000025F1       880      MOVE.B  #1,(OutputType)       
00001944  6100 08C8                881      BSR    OUTPUT
00001948  6100 059E                882      BSR PRINT_BRA
0000194C  6000 F994                883      BRA return
00001950                           884  
00001950                           885  data
00001950  13FC 0004 000025F1       886      MOVE.B  #4,(OutputType)
00001958  6100 08B4                887      BSR     OUTPUT
0000195C                           888  
0000195C  43F9 00002675            889      LEA    dataout,A1
00001962  13FC 0001 000025F1       890      MOVE.B  #1,(OutputType)       
0000196A  6100 08A2                891      BSR    OUTPUT
0000196E                           892      
0000196E  13FC 0003 000025F1       893      MOVE.B  #3,(OutputType)       
00001976  6100 0896                894      BSR    OUTPUT     
0000197A  6000 F966                895      BRA return
0000197E                           896  
0000197E                           897  
0000197E                           898  **********************************************************
0000197E                           899  *Subroutine: USERINPUT
0000197E                           900  *What it does: Takes in user input, rejects bad input
0000197E                           901  *Registers: Uses register A1, D0, D5
0000197E                           902  *A1: Stores messages and user input
0000197E                           903  *D0: Used for TRAP #15
0000197E                           904  *D5: Temporaraly stores user input to be masked then transfered
0000197E                           905  *Paramemeters: No parameters
0000197E                           906  **********************************************************
0000197E                           907  USERINPUT:
0000197E  4281                     908      CLR.L   D1
00001980  4282                     909      CLR.L   D2
00001982  4283                     910      CLR.L   D3
00001984  4284                     911      CLR.L   D4
00001986  4285                     912      CLR.L   D5
00001988  0C39 0000 000025F2       913      CMP.B   #0,(RepeatFlag)
00001990  6700 001A                914      BEQ     welcomeExplanation
00001994  6000 0030                915      BRA     firstInput
00001998  02B9 00000000 00008000   916      AND.L   #$00000000,(Input1)
000019A2  02B9 00000000 00008004   917      AND.L   #$00000000,(Input2)
000019AC                           918      
000019AC                           919  welcomeExplanation
000019AC  43F9 00002364            920      LEA     STARTMESSAGE,A1         
000019B2  103C 000E                921      MOVE.B  #14,D0
000019B6  4E4F                     922      TRAP    #15
000019B8                           923      
000019B8  5039 000025F0            924      ADD.B   #8,(LineCounter)
000019BE  13FC 0001 000025F2       925      MOVE.B  #1,(RepeatFlag)
000019C6                           926  
000019C6                           927  firstInput
000019C6  43F9 000024D6            928      LEA     INPUT1MESSAGE,A1        
000019CC  103C 000E                929      MOVE.B  #14,D0                  
000019D0  4E4F                     930      TRAP    #15                     Asks user for first input
000019D2  5239 000025F0            931      ADD.B   #1,(LineCounter)        Adds 1 to line counter
000019D8                           932      
000019D8  43F9 00008008            933      LEA     userInputStored,A1
000019DE  103C 0002                934      MOVE.B  #2,D0                   
000019E2  4E4F                     935      TRAP    #15                     User can input string for address
000019E4  5239 000025F0            936      ADD.B   #1,(LineCounter)        Adds 1 to line counter
000019EA                           937  
000019EA                           938      
000019EA  6100 0104                939      BSR     CONVERTATOH                 String converted to hex address
000019EE                           940      
000019EE  0C39 0000 000025EF       941      CMP.B   #0,(InputQuality)       Checks if bad input flag set
000019F6  6700 0014                942      BEQ     throwInput1CharError
000019FA                           943  
000019FA                           944      
000019FA  CABC 00FFFFFF            945      AND.L   #$00FFFFFF,D5           
00001A00  23C5 00008000            946      MOVE.L  D5,input1               Moves result into input 1 memory location
00001A06  4285                     947      CLR.L   D5                      Clears D5 for future use
00001A08  6000 0020                948      BRA     secondInput
00001A0C                           949      
00001A0C                           950      
00001A0C                           951  throwInput1CharError
00001A0C  43F9 00002522            952      LEA     INPUTERRORBADCHAR,A1
00001A12  103C 000E                953      MOVE.B  #14,D0
00001A16  4E4F                     954      TRAP    #15                     Outputs bad character error message
00001A18  5639 000025F0            955      ADD.B   #3,(LineCounter)        Adds 2 to line counter
00001A1E                           956      
00001A1E  13FC 0001 000025EF       957      MOVE.B  #1,(InputQuality)       Resets quality flag to default (good)
00001A26  4285                     958      CLR.L   D5                      Clears D5 for future use
00001A28                           959      
00001A28                           960      
00001A28                           961      
00001A28  609C                     962      BRA     firstInput              Tries again for input1
00001A2A                           963  
00001A2A                           964      
00001A2A                           965  secondInput
00001A2A  43F9 000024FC            966      LEA     INPUT2MESSAGE,A1        
00001A30  103C 000E                967      MOVE.B  #14,D0                  
00001A34  4E4F                     968      TRAP    #15                     Asks user for second input
00001A36  5239 000025F0            969      ADD.B   #1,(LineCounter)
00001A3C                           970      
00001A3C  43F9 00008008            971      LEA     userInputStored,A1
00001A42  103C 0002                972      MOVE.B  #2,D0                   
00001A46  4E4F                     973      TRAP    #15                     User can input string for address
00001A48  5239 000025F0            974      ADD.B   #1,(LineCounter)
00001A4E                           975  
00001A4E                           976      
00001A4E  6100 00A0                977      BSR     CONVERTATOH                 String converted to hex address
00001A52                           978  
00001A52  0C39 0000 000025EF       979      CMP.B   #0,(InputQuality)       
00001A5A  6700 001E                980      BEQ     throwInput2CharError    Checks if bad input flag set
00001A5E                           981      
00001A5E  CABC 00FFFFFF            982      AND.L   #$00FFFFFF,D5
00001A64  BAB9 00008000            983      CMP.L   (input1),D5
00001A6A  6D00 002A                984      BLT     throwInput2LowerError
00001A6E  23C5 00008004            985      MOVE.L  D5,input2               Moves result into input 2 memory location
00001A74  4285                     986      CLR.L   D5                      Clears D5 for future use
00001A76  6000 0032                987      BRA     oddnumberchecker1
00001A7A                           988  
00001A7A                           989  
00001A7A                           990      
00001A7A                           991  throwInput2CharError
00001A7A  43F9 00002522            992      LEA     INPUTERRORBADCHAR,A1    
00001A80  103C 000E                993      MOVE.B  #14,D0
00001A84  4E4F                     994      TRAP    #15                     Outputs bad character error message
00001A86                           995      
00001A86  5639 000025EF            996      ADD.B  #3,(InputQuality)        Resets quality flag to default (good)
00001A8C  4285                     997      CLR.L   D5                      Clears D5 for future use
00001A8E                           998      
00001A8E  5639 000025F0            999      ADD.B   #3,(LineCounter)
00001A94                          1000      
00001A94  6094                    1001      BRA     secondInput             Tries again for input2
00001A96                          1002      
00001A96                          1003  throwInput2LowerError
00001A96  43F9 00002540           1004      LEA     INPUTERROR2SMALLER,A1
00001A9C  103C 000E               1005      MOVE.B  #14,D0
00001AA0  4E4F                    1006      TRAP    #15
00001AA2                          1007      
00001AA2  5639 000025F0           1008      ADD.B   #3,(LineCounter)
00001AA8                          1009      
00001AA8  6080                    1010      BRA     secondInput
00001AAA                          1011      
00001AAA                          1012  oddnumberchecker1
00001AAA                          1013  
00001AAA  2C39 00008000           1014      MOVE.L  (input1),D6
00001AB0  CCBC 0000000F           1015      AND.L   #$0000000F,D6
00001AB6  CC3C 0001               1016      AND.B   #%0001,D6
00001ABA  BC3C 0001               1017      CMP.B   #%0001,D6
00001ABE  6700 0006               1018      BEQ     oddnumber1
00001AC2  6000 000A               1019      BRA     oddnumberchecker2
00001AC6                          1020      
00001AC6                          1021  oddnumber1    
00001AC6  52B9 00008000           1022      ADD.L   #1,(input1)  
00001ACC  4285                    1023      CLR.L   D5
00001ACE                          1024  
00001ACE                          1025  oddnumberchecker2
00001ACE  2C39 00008004           1026      MOVE.L  (input2),D6
00001AD4  CCBC 0000000F           1027      AND.L   #$0000000F,D6
00001ADA  CC3C 0001               1028      AND.B   #%0001,D6
00001ADE  BC3C 0001               1029      CMP.B   #%0001,D6
00001AE2  6700 0002               1030      BEQ     oddnumber2 
00001AE6                          1031  
00001AE6                          1032  oddnumber2
00001AE6  52B9 00008004           1033      ADD.L   #1,(input2)
00001AEC  4285                    1034      CLR.L   D5
00001AEE  4E75                    1035      RTS
00001AF0                          1036    
00001AF0                          1037         
00001AF0                          1038  
00001AF0                          1039  
00001AF0                          1040  
00001AF0                          1041  **********************************************************
00001AF0                          1042  *Subroutine: CONVERTATOH
00001AF0                          1043  *What it does: Converts user input to hex code
00001AF0                          1044  *Registers: Uses register A1, D2, D5
00001AF0                          1045  *Paramemeters: User input stored in (A1)
00001AF0                          1046  ********************************************************** 
00001AF0                          1047  CONVERTATOH:
00001AF0                          1048      
00001AF0                          1049  AtoH
00001AF0  1419                    1050      MOVE.B  (A1)+,D2                Takes first bit (letter), moves to D2 for testing
00001AF2                          1051      
00001AF2  B43C 0000               1052      CMP.B   #$00,D2                 Compares to 00, since 00 is null (enter)
00001AF6  6700 004C               1053      BEQ     Finish                  Moves to finish if they are equal (no more input)
00001AFA                          1054      
00001AFA  E985                    1055      ASL.L   #4,D5
00001AFC                          1056      
00001AFC  B43C 0030               1057      CMP.B   #$30,D2
00001B00  6D00 0044               1058      BLT     inputError
00001B04                          1059      
00001B04  B43C 0039               1060      CMP.B   #$39,D2                 Compares to 39, because 39 in ASCII is 9, which is largest number
00001B08  6E00 000A               1061      BGT     upperCase               Branches if greater, may or may not be a letter in hex
00001B0C                          1062      
00001B0C  0402 0030               1063      SUBI.B  #$30,D2                 Subtracts 30 to turn it into it's hex format
00001B10  DA02                    1064      ADD.B   D2,D5
00001B12                          1065      
00001B12  60DC                    1066      BRA     AtoH
00001B14                          1067  
00001B14                          1068          
00001B14                          1069  upperCase   
00001B14  B43C 0041               1070      CMP.B   #$41,D2
00001B18  6D00 002C               1071      BLT     InputError              Greater than 39 and less than 41 is not part of hex code
00001B1C                          1072      
00001B1C  B43C 0046               1073      CMP.B   #$46,D2                 
00001B20  6E00 000A               1074      BGT     lowerCase               Greater than 46 may be hex code in lowercase
00001B24                          1075      
00001B24  0402 0037               1076      SUBI.B  #$37,D2                 Subtracts 37 to turn it into hex format
00001B28  DA02                    1077      ADD.B   D2,D5
00001B2A  60C4                    1078      BRA     AtoH
00001B2C                          1079  
00001B2C                          1080  lowerCase
00001B2C  B43C 0061               1081      CMP.B   #$61,D2
00001B30  6D00 0014               1082      BLT     InputError              Greater than 46 and less than 61 is not part of hex code
00001B34                          1083      
00001B34  B43C 0066               1084      CMP.B   #$66,D2
00001B38  6E00 000C               1085      BGT     InputError              Greater than 66 is not part of hex code
00001B3C                          1086      
00001B3C  0402 0057               1087      SUBI.B  #$57,D2
00001B40  DA02                    1088      ADD.B   D2,D5
00001B42  60AC                    1089      BRA     AtoH
00001B44                          1090          
00001B44                          1091  Finish
00001B44  4E75                    1092      RTS                             Return from CONVERT
00001B46                          1093      
00001B46                          1094  inputError
00001B46  13FC 0000 000025EF      1095      MOVE.B  #0,(InputQuality)
00001B4E  4E75                    1096      RTS
00001B50                          1097  
00001B50                          1098  *********************************************************************
00001B50                          1099  *Subroutine: EA
00001B50                          1100  *What it does: outputs the ea for a given opword
00001B50                          1101  *Registers: Uses register A1, D4 , d5 , d6
00001B50                          1102  *A1: used to store opcode
00001B50                          1103  *Paramemeters: A1
00001B50                          1104  *A1: Stores what should be used--++
00001B50                          1105  *********************************************************************  
00001B50  =0000003F               1106  BITS0TO5_MASK   EQU %00111111
00001B50  =000000C0               1107  BITS7TO8_MASK   EQU %11000000
00001B50  =00000E00               1108  BITS9TO11_MASK  EQU %00000111000000000
00001B50                          1109  
00001B50  1E3C 000A               1110  FORMAT_IMMEDIATE_DATA   MOVE.B  #10,D7
00001B54  BC7C 0000               1111                          CMP     #0,D6
00001B58  6700 0006               1112                          BEQ     IMMEDIATE0
00001B5C  6000 0004               1113                          BRA     IMMEDIATE_END
00001B60  7C08                    1114  IMMEDIATE0              MOVEQ   #8,D6
00001B62                          1115  
00001B62  4E75                    1116  IMMEDIATE_END           RTS
00001B64                          1117  
00001B64  3212                    1118  MOVE_MOVEA_EA   MOVE.W  (A2),D1
00001B66  0201 003F               1119                  ANDI.B  #BITS0TO5_MASK,D1           * Isolate the source EA bits
00001B6A  0001 00C0               1120                  ORI.B   #BITS7TO8_MASK,D1           * Populate the S and D bits
00001B6E  1C01                    1121                  MOVE.B  D1,D6                   * Pass source EA to print subroutine
00001B70  3212                    1122                  MOVE.W  (A2),D1         
00001B72  3412                    1123                  MOVE.W  (A2),D2 
00001B74  0241 0E00               1124                  ANDI.W  #BITS9TO11_MASK,D1   * Isolate the destination register number
00001B78  163C 0009               1125                  MOVE.B  #9,D3                   * Prepare shift count
00001B7C  E669                    1126                  LSR.W   D3,D1                   * Move destination register bits right
00001B7E  0242 01C0               1127                  ANDI.W  #%0000000111000000,D2   * Isolate the destination mode
00001B82  E64A                    1128                  LSR.W   #3,D2                  * Move destination mode bits right
00001B84  8242                    1129                  OR.W    D2,D1
00001B86  1A01                    1130                  MOVE.B  D1,D5                   * Pass destination EA to print subroutine
00001B88  1206                    1131                  MOVE.B  D6,D1               * Pass source into subroutine
00001B8A  4EB9 00001E72           1132                  JSR     CHECK_VALID_EA
00001B90  1205                    1133                  MOVE.B  D5,D1               * Pass destination into subroutine
00001B92  4EB9 00001E72           1134                  JSR     CHECK_VALID_EA
00001B98  4EB9 00001BA0           1135                  JSR     PRINT_EA1
00001B9E                          1136                  
00001B9E  4E75                    1137                  RTS
00001BA0                          1138                  
00001BA0                          1139  PRINT_EA1
00001BA0  1806                    1140                  MOVE.B  D6,D4
00001BA2  4EB9 00001EB6           1141                  JSR     PRINT_EA                    * PRINT SOURCE EA
00001BA8                          1142                          
00001BA8  0806 0006               1143                  BTST    #6,D6                       * CHECKING IF HAS DEST. EA
00001BAC  6700 0330               1144                  BEQ     PRINT_INSTRUCTION_RETURN    * ONLY ONE EA
00001BB0                          1145                          
00001BB0  4EB9 00002192           1146                  JSR     PRINT_COMMA
00001BB6  1805                    1147                  MOVE.B  D5,D4
00001BB8  4EB9 00001EB6           1148                  JSR     PRINT_EA                    * PRINT DEST. EA
00001BBE  4EB9 000021BE           1149                  JSR     PRINT_NEWLINE
00001BC4  4E75                    1150                  RTS
00001BC6                          1151  PRINT_EA2
00001BC6  4EB9 000021D2           1152       JSR         PRINT_HASH_SIGN         * #
00001BCC  1206                    1153       MOVE.B      D6,D1                   * PRINT DECIMAL
00001BCE  7003                    1154       MOVE.L      #3,D0
00001BD0  4E4F                    1155       TRAP        #15
00001BD2  4EB9 00002192           1156       JSR         PRINT_COMMA             * ,
00001BD8                          1157                          
00001BD8  1805                    1158       MOVE.B      D5,D4
00001BDA  4EB9 00001EB6           1159       JSR         PRINT_EA                * PRINT THE REGISTER
00001BE0  4EB9 000021BE           1160       JSR         PRINT_NEWLINE
00001BE6  4E75                    1161       RTS                
00001BE8                          1162  
00001BE8                          1163  *should be for the following opcodes- MOVEA, ADD, SUB, AND, OR 
00001BE8  3212                    1164  EA_GROUP1     MOVE.W  (A2),D1                 * Prepare to capture register field
00001BEA  3412                    1165          MOVE.W  (A2),D2                 * Prepare to capture EA field
00001BEC  0201 003F               1166          ANDI.B  #BITS0TO5_MASK,D1       * Isolate the source EA bits
00001BF0                          1167          
00001BF0  0242 0E00               1168          ANDI.W  #BITS9TO11_MASK,D2      * Isolate the source EA bits
00001BF4  163C 0009               1169          MOVE.B  #9,D3                   * Prepare shift count
00001BF8  E66A                    1170          LSR.W   D3,D2                   * Move register bits right
00001BFA  0202 00C7               1171          ANDI.B  #%11000111,D2           * Set EA mode
00001BFE  3612                    1172          MOVE.W  (A2),D3
00001C00  0803 0008               1173          BTST    #8,D3                   * Check opmode
00001C04  6700 000A               1174          BEQ     EA1_MODE_ZERO           * Check opmode
00001C08                          1175          
00001C08  3A01                    1176  EA1_MODE_ONE    MOVE.W  D1,D5           * Set EA as destination
00001C0A  3C02                    1177                  MOVE.W  D2,D6           * Set register as source
00001C0C  6000 0006               1178                  BRA EA1_END             * Complete subroutine
00001C10                          1179          
00001C10  3C01                    1180  EA1_MODE_ZERO   MOVE.W  D1,D6           * Set EA as source
00001C12  3A02                    1181                  MOVE.W  D2,D5           * Set register as destination
00001C14                          1182  
00001C14  0006 00C0               1183  EA1_END         ORI.B   #BITS7TO8_MASK,D6       * Populate the S and D bits
00001C18  1206                    1184                  MOVE.B  D6,D1               * Pass source into subroutine
00001C1A  4EB9 00001E72           1185                  JSR     CHECK_VALID_EA
00001C20  1205                    1186                  MOVE.B  D5,D1               * Pass destination into subroutine
00001C22  4EB9 00001E72           1187                  JSR     CHECK_VALID_EA
00001C28  4EB8 1BA0               1188                  JSR     PRINT_EA1
00001C2C                          1189  
00001C2C  4E75                    1190                  RTS
00001C2E                          1191  *should be for opcode LSL LSR ASL ASR ROL ROR but for register shifts
00001C2E  3C12                    1192  EA_GROUP2             MOVE.W  (A2),D6         * Prepare to capture source EA
00001C30  0246 0E00               1193                  ANDI.W  #BITS9TO11_MASK,D6      * Isolate the source EA bits
00001C34  163C 0009               1194                  MOVE.B  #9,D3                   * Prepare shift count
00001C38  E66E                    1195                  LSR.W   D3,D6                   * Move register bits right
00001C3A  3612                    1196                  MOVE.W  (A2),D3
00001C3C  0803 0005               1197                  BTST    #5,D3           * Check whether shift count is immediate
00001C40  6700 000A               1198                  BEQ     EA2_IMMEDIATE
00001C44                          1199   
00001C44  0006 00C0               1200  EA2_REGISTER    ORI.B   #%11000000,D6   * Set S and D bits
00001C48  6000 000A               1201                  BRA     EA2_END         * Complete subroutine
00001C4C                          1202                  
00001C4C  1E3C 000A               1203  EA2_IMMEDIATE   MOVE.B  #10,D7          * Prepare to pass immediate data to print subroutine
00001C50  4EB8 1B50               1204                  JSR     FORMAT_IMMEDIATE_DATA
00001C54                          1205                  
00001C54  3A12                    1206  EA2_END         MOVE.W  (A2),D5         * Prepare to capture destination EA
00001C56  CA3C 0007               1207                  AND.B   #%00000111,D5
00001C5A  1206                    1208                  MOVE.B  D6,D1               * Pass source into subroutine
00001C5C  4EB9 00001E72           1209                  JSR     CHECK_VALID_EA
00001C62  1205                    1210                  MOVE.B  D5,D1               * Pass destination into subroutine
00001C64  4EB9 00001E72           1211                  JSR     CHECK_VALID_EA
00001C6A  4EB8 1BC6               1212                  JSR     PRINT_EA2
00001C6E  4E75                    1213                  RTS   
00001C70                          1214  
00001C70                          1215  
00001C70                          1216  *should be for opcode LSL LSR ASL ASR ROL ROR but for register shifts
00001C70  3C12                    1217  EA_GROUP3     MOVE.W  (A2),D6
00001C72  0206 003F               1218          ANDI.B  #BITS0TO5_MASK,D6       * Isolate the source EA bits
00001C76  0006 0080               1219          ORI.B   #%10000000,D6
00001C7A  1206                    1220          MOVE.B  D6,D1               * Pass source into subroutine
00001C7C  4EB9 00001E72           1221          JSR     CHECK_VALID_EA
00001C82  4EB8 1BC6               1222          JSR     PRINT_EA2
00001C86  4E75                    1223          RTS
00001C88                          1224  
00001C88                          1225  *should be for LEA and ADDA(SHOULD WORK BETTER THEN EA GROUP 1)
00001C88  3212                    1226  EA_GROUP4     MOVE.W  (A2),D1         
00001C8A  0201 003F               1227          ANDI.B  #BITS0TO5_MASK,D1       * Isolate the source EA bits
00001C8E  0001 00C0               1228          ORI.B   #BITS7TO8_MASK,D1       * Populate the S and D bits
00001C92  1C01                    1229          MOVE.B  D1,D6                   * Pass source EA to print subroutine
00001C94  3212                    1230          MOVE.W  (A2),D1         
00001C96                          1231          
00001C96  0241 0E00               1232          ANDI.W  #BITS9TO11_MASK,D1   * Isolate the destination register number
00001C9A  143C 0009               1233          MOVE.B  #9,D2                   * Prepare shift count
00001C9E  E469                    1234          LSR.W   D2,D1                   * Move register bits right
00001CA0  0201 00CF               1235          ANDI.B  #%11001111,D1           * Set destination mode
00001CA4  0001 0008               1236          ORI.B   #%00001000,D1           * Set destination mode
00001CA8  1A01                    1237          MOVE.B  D1,D5                   * Pass destination EA to print subroutine
00001CAA  1206                    1238          MOVE.B  D6,D1               * Pass source into subroutine
00001CAC  4EB9 00001E72           1239          JSR     CHECK_VALID_EA
00001CB2  1205                    1240          MOVE.B  D5,D1               * Pass destination into subroutine
00001CB4  4EB9 00001E72           1241          JSR     CHECK_VALID_EA
00001CBA  4EB8 1BC6               1242          JSR     PRINT_EA2
00001CBE  4E75                    1243          RTS
00001CC0                          1244          
00001CC0  3C12                    1245  ADDQ_EA MOVE.W  (A2),D6                 * Prepare source data bits
00001CC2  0246 0E00               1246          ANDI.W  #BITS9TO11_MASK,D6      * Isolate source data bits
00001CC6  163C 0009               1247          MOVE.B  #9,D3                   * Prepare shift count
00001CCA  E66E                    1248          LSR.W   D3,D6                  * Move source data bits right            !---
00001CCC  3A12                    1249          MOVE.W  (A2),D5                 * Prepare destination bits
00001CCE  0205 003F               1250          ANDI.B  #BITS0TO5_MASK,D5       * Isolate destination bits
00001CD2  4EB8 1B50               1251          JSR     FORMAT_IMMEDIATE_DATA
00001CD6  1206                    1252          MOVE.B  D6,D1               * Pass source into subroutine
00001CD8  4EB9 00001E72           1253          JSR     CHECK_VALID_EA
00001CDE  1205                    1254          MOVE.B  D5,D1               * Pass destination into subroutine
00001CE0  4EB9 00001E72           1255          JSR     CHECK_VALID_EA
00001CE6  4EB8 1BC6               1256          JSR     PRINT_EA2
00001CEA  4E75                    1257          RTS                                    !---
00001CEC                          1258          
00001CEC  3C12                    1259  MOVEQ_EA    MOVE.W  (A2),D6                 * Prepare source data bits          !---
00001CEE  CC7C 00FF               1260              AND.W   #$00FF,D6                                                   !---
00001CF2  3A12                    1261              MOVE.W  (A2),D5                 * Prepare destination regiter bits
00001CF4  0245 0E00               1262              ANDI.W  #BITS9TO11_MASK,D5      * Isolate destination register bits
00001CF8  163C 0009               1263              MOVE.B  #9,D3                   * Prepare shift count
00001CFC  E66D                    1264              LSR.W   D3,D5                   * Move destination register bits right
00001CFE  1E3C 000A               1265              MOVE.B  #10,D7
00001D02  1206                    1266              MOVE.B  D6,D1               * Pass source into subroutine
00001D04  4EB9 00001E72           1267              JSR     CHECK_VALID_EA
00001D0A  1205                    1268              MOVE.B  D5,D1               * Pass destination into subroutine
00001D0C  4EB9 00001E72           1269              JSR     CHECK_VALID_EA
00001D12  4EB8 1BC6               1270              JSR     PRINT_EA2
00001D16  4E75                    1271              RTS                                 !---
00001D18                          1272  
00001D18                          1273  
00001D18                          1274  
00001D18                          1275  
00001D18  3412                    1276  MOVEM_EA   MOVE.W (A2),D2
00001D1A  0802 000A               1277             BTST    #10, D2
00001D1E  6700 0126               1278             BEQ     Register_to_memory *IF THE DIRCTION BIT IS 0,
00001D22                          1279             
00001D22  4E75                    1280              RTS 
00001D24                          1281            
00001D24                          1282             
00001D24                          1283                  
00001D24                          1284  *ELSE IT IS  memory-to-register transfers
00001D24                          1285  
00001D24                          1286  
00001D24                          1287  
00001D24                          1288  
00001D24                          1289     
00001D24  E68A                    1290  Memory_to_Register LSR.L #3, D2
00001D26  C43C 0007               1291                     AND.B #$07, D2
00001D2A  B43C 0002               1292                     CMP.B #$2,D2
00001D2E  6700 0108               1293                     BEQ   MODE_010
00001D32  B43C 0003               1294                     CMP.B #$03, D2
00001D36  6700 0100               1295                     BEQ   MODE_010  
00001D3A  B43C 0007               1296                     CMP.B #$07,D2
00001D3E  6700 00F8               1297                     BEQ   MODE_010  
00001D42  4EF9 00001D48           1298                     JMP   WRONG_INSTRUCTION    
00001D48                          1299     
00001D48  1E3C 0005               1300  WRONG_INSTRUCTION            MOVE.B   #5, D7 ; A WRONG INSTRUCTION 'KEY'
00001D4C  2C4A                    1301                               MOVEA.L  A2, A6 ;MOVING THE MEMORY ADDRESS INTO A6 WHEN INSTRUCTION IS WRONG 
00001D4E  3C12                    1302                               MOVE.W  (A2),D6 ;MOVE MEMORY ADDRESS INTO D6, AND INCREMENT A2 BY WORD
00001D50  4E75                    1303                               RTS 
00001D52                          1304  PRINT_MOVEM         
00001D52                          1305                      
00001D52  0806 0007               1306                      BTST    #7,D6
00001D56  6700 0012               1307                      BEQ     PRINT_MOVEM_MASK            * PRINT THE REGSTER/S FIRST
00001D5A                          1308                      
00001D5A  1806                    1309                      MOVE.B  D6,D4
00001D5C  4EB9 00001EB6           1310                      JSR     PRINT_EA
00001D62  4EB9 00002192           1311                      JSR     PRINT_COMMA
00001D68  4E75                    1312                      rts
00001D6A                          1313  ALL_REG     REG     D0-D7/A0-A6         ; all registers                     
00001D6A  3802                    1314  PRINT_MOVEM_MASK        MOVE.W  D2,D4
00001D6C  4EB9 00001D90           1315                          JSR     PRINT_MASK
00001D72  0806 0007               1316                          BTST    #7,D6                       * CHECK DIRCTION
00001D76  6600 0166               1317                          BNE     PRINT_INSTRUCTION_RETURN
00001D7A                          1318                          
00001D7A  4EB9 00002192           1319                          JSR     PRINT_COMMA
00001D80  1806                    1320                          MOVE.B  D6,D4
00001D82  4EB9 00001EB6           1321                          JSR     PRINT_EA
00001D88  4EF9 000021BE           1322                          JMP     PRINT_NEWLINE
00001D8E  4E75                    1323                          RTS
00001D90                          1324                          
00001D90                          1325  *________________PRINTS THE MASK
00001D90                          1326  *   PARAMETER   D4      THE MASK (WORD)
00001D90                          1327  *               D6      THE DIRECTION (BIT#7)
00001D90                          1328                          
00001D90  48E7 FFFE               1329  PRINT_MASK      MOVEM.L     ALL_REG,-(SP)
00001D94  1406                    1330                  MOVE.B      D6,D2                   * CHECKING IF IT IS PRE DECREMENT
00001D96  C43C 0038               1331                  AND.B       #$38,D2
00001D9A  B43C 0020               1332                  CMP.B       #$20,D2
00001D9E  6600 0026               1333                  BNE         MEM_TO_REG
00001DA2                          1334  
00001DA2  720F                    1335  REG_TO_MEM          MOVE.L      #15,D1              * START OF FLIPPING THE MASK
00001DA4                          1336                      
00001DA4  B23C 0000               1337  FLIP_DIRECTION      CMP.B       #0,D1
00001DA8  6D00 001A               1338                      BLT         REG_TO_MEMO_OK
00001DAC  103C 001F               1339                      MOVE.B      #31,D0
00001DB0  9001                    1340                      SUB.B       D1,D0
00001DB2  0304                    1341                      BTST        D1,D4
00001DB4  6600 0008               1342                      BNE         FLIP_SET
00001DB8  0184                    1343  FLIP_CLR            BCLR        D0,D4
00001DBA  6000 0004               1344                      BRA         FLIP_LOOP_INCR
00001DBE  01C4                    1345  FLIP_SET            BSET        D0,D4                    
00001DC0  5301                    1346  FLIP_LOOP_INCR      SUB.B   #1,D1
00001DC2  60E0                    1347                      BRA     FLIP_DIRECTION 
00001DC4  4844                    1348  REG_TO_MEMO_OK      SWAP    D4
00001DC6                          1349  
00001DC6  163C 0000               1350  MEM_TO_REG          MOVE.B  #0,D3
00001DCA  367C 0000               1351                      MOVE.W  #0,A3
00001DCE  B63C 0010               1352  REG_COUNT           CMP.B   #16,D3
00001DD2  6700 000E               1353                      BEQ     PRINT_MASK_LOOP_START
00001DD6  0704                    1354                      BTST    D3,D4
00001DD8  6700 0004               1355                      BEQ     REG_COUNT_INCR
00001DDC  524B                    1356                      ADD.W   #1,A3
00001DDE  5203                    1357  REG_COUNT_INCR      ADD.B   #1,D3
00001DE0  60EC                    1358                      BRA     REG_COUNT
00001DE2                          1359                      
00001DE2  163C 0000               1360  PRINT_MASK_LOOP_START   MOVE.B      #0,D3
00001DE6                          1361  
00001DE6  B63C 0010               1362  PRINT_MASK_LOOP     CMP.B   #16, D3
00001DEA  6700 0046               1363                      BEQ     PRINT_MASK_RETURN
00001DEE  0704                    1364                      BTST    D3,D4
00001DF0  6600 0006               1365                      BNE     SET_MASK
00001DF4  6000 0036               1366                      BRA     PRINT_MASK_LOOP_INCR
00001DF8  B63C 0007               1367  SET_MASK        CMP.B   #7,D3
00001DFC  6E00 0012               1368                  BGT     A_REG
00001E00  123C 00D0               1369  D_REG           MOVE.B  #$D0, D1
00001E04  D203                    1370                  ADD.B   D3,D1
00001E06  4EB9 000020E4           1371                  JSR     PRINT_REGISTOR
00001E0C  6000 000E               1372                  BRA     PRINT_SLASH
00001E10  123C 0098               1373  A_REG               MOVE.B  #$98,D1
00001E14  D203                    1374                      ADD.B   D3,D1
00001E16  4EB9 000020E4           1375                      JSR     PRINT_REGISTOR
00001E1C  B6FC 0001               1376  PRINT_SLASH             CMP.W   #1,A3
00001E20  6700 000A               1377                          BEQ     PRINT_MASK_LOOP_INCR
00001E24  4EB9 000021FA           1378                          JSR     PRINT_FORWARD_SLASH
00001E2A  534B                    1379                          SUB.W   #1,A3
00001E2C  5203                    1380  PRINT_MASK_LOOP_INCR    ADD.B   #1,D3
00001E2E  5301                    1381                          SUB.B   #1,D1
00001E30  60B4                    1382                          BRA     PRINT_MASK_LOOP
00001E32  4CDF 7FFF               1383  PRINT_MASK_RETURN       MOVEM.L     (SP)+, ALL_REG
00001E36  4E75                    1384                          RTS
00001E38                          1385             
00001E38  3412                    1386  MODE_010  MOVE.W    (A2),D2
00001E3A  C43C 003F               1387            AND.B     #$3F,D2
00001E3E  08C2 0007               1388            BSET      #7,D2 *SET THE DESTINATION INDICATOR
00001E42  1C02                    1389            MOVE.B    D2,D6
00001E44  4E75                    1390            RTS
00001E46                          1391  
00001E46  3412                    1392  Register_to_memory MOVE.W (A2),D2
00001E48  E68A                    1393                     LSR.L #3, D2
00001E4A  C43C 0007               1394                     AND.B #$07, D2
00001E4E  B43C 0002               1395                     CMP.B #$2,D2
00001E52  6700 0016               1396                     BEQ   MODE_01_0
00001E56  B43C 0004               1397                     CMP.B #$04, D2
00001E5A  6700 000E               1398                     BEQ   MODE_01_0 
00001E5E  B43C 0007               1399                     CMP.B #$07,D2
00001E62  6700 0006               1400                     BEQ   MODE_01_0 
00001E66  4EF8 1D48               1401                     JMP   WRONG_INSTRUCTION
00001E6A                          1402                     
00001E6A                          1403  
00001E6A  3C12                    1404  MODE_01_0       MOVE.W  (A2),D6
00001E6C  0206 003F               1405                  ANDI.B  #$3F,D6
00001E70  4E75                    1406                  RTS
00001E72                          1407           
00001E72  1001                    1408  CHECK_VALID_EA  MOVE.B  D1,D0
00001E74  0200 0038               1409                  ANDI.B  #%111000,D0
00001E78  E648                    1410                  LSR     #3,D0
00001E7A  B03C 0005               1411                  CMP.B   #%00000101,D0
00001E7E  6700 002C               1412                  BEQ     INVALID_EA
00001E82  B03C 0006               1413                  CMP.B   #%00000110,D0
00001E86  6700 0024               1414                  BEQ     INVALID_EA
00001E8A  B03C 0007               1415                  CMP.B   #%00000111,D0
00001E8E  6700 0004               1416                  BEQ     VALID_EA_PC
00001E92  4E75                    1417                  RTS
00001E94                          1418                  
00001E94                          1419                  
00001E94  1001                    1420  VALID_EA_PC     MOVE.B  D1,D0
00001E96  0200 0007               1421                  ANDI.B  #%000111,D0
00001E9A  B03C 0010               1422                  CMP.B   #%00010000,D0
00001E9E  6700 000C               1423                  BEQ     INVALID_EA
00001EA2  B03C 0018               1424                  CMP.B   #%00011000,D0
00001EA6  6700 0004               1425                  BEQ     INVALID_EA
00001EAA  4E75                    1426                  RTS
00001EAC                          1427                  
00001EAC  4EB8 1D48               1428  INVALID_EA      JSR     WRONG_INSTRUCTION
00001EB0  3A7C 0005               1429                  MOVE.W  #5, A5
00001EB4  4E75                    1430                  RTS
00001EB6                          1431                  
00001EB6  48E7 FFDE               1432  PRINT_EA        MOVEM.L A0-A1/A3-A6/D0-D7,-(SP)
00001EBA  163C 0038               1433                  MOVE.B  #$38,D3
00001EBE  C604                    1434                  AND.B   D4,D3
00001EC0  C83C 0007               1435                  AND.B   #$7, D4
00001EC4                          1436                  
00001EC4  B63C 0000               1437                  CMP.B   #$0, D3
00001EC8  6600 0078               1438                  BNE     CHECK_EA_AR
00001ECC  0604 00D0               1439                  ADD.B   #$D0, D4
00001ED0  4281                    1440                  CLR.L   D1
00001ED2  1204                    1441                  MOVE.B  D4, D1
00001ED4  4EB9 000020E4           1442                  JSR     PRINT_REGISTOR              * DATA REG
00001EDA  6000 0178               1443                  BRA     PRINT_EA_RETURN
00001EDE  4EB9 000021BE           1444  PRINT_INSTRUCTION_RETURN    JSR         PRINT_NEWLINE
00001EE4  4CDF 7BFF               1445                              MOVEM.L     (SP)+,A0-A1/A3-A6/D0-D7
00001EE8                          1446  
00001EE8                          1447  PRINT_BRA       
00001EE8  3C12                    1448                  move.W      (A2),D6
00001EEA                          1449                  
00001EEA                          1450                                 
00001EEA  240A                    1451                  MOVE.L      A2,D2           * MOVING THE ADDRESS
00001EEC  4281                    1452                  CLR.L       D1
00001EEE                          1453                  
00001EEE  BC3C 0000               1454                  CMP.B       #$00,D6                 * WORD DISPLACEMENT
00001EF2  6700 001E               1455                  BEQ         WORD_DISPLACEMENT
00001EF6  BC3C 00FF               1456                  CMP.B       #$FF,D6                 * LONG DISPLACEMENT
00001EFA  6700 002A               1457                  BEQ         LONG_DISPLACEMENT
00001EFE                          1458                  
00001EFE  1206                    1459                  MOVE.B      D6,D1                   * BYTE DISPLACEMENT
00001F00  0801 0007               1460                  BTST        #7,D1                
00001F04  6700 0022               1461                  BEQ         PRINT_BRA_RETURN        * POSITIVE DISPLACEMENT
00001F08                          1462                  
00001F08  4601                    1463                  NOT.B       D1                      * 1'S COMPLEMENT    (ON BYTE)
00001F0A  5241                    1464                  ADD.W       #$1,D1                   * -> 2'S COMPLEMENT
00001F0C  4481                    1465                  NEG.L       D1
00001F0E  6000 0018               1466                  BRA         PRINT_BRA_RETURN
00001F12                          1467  
00001F12  321A                    1468  WORD_DISPLACEMENT       MOVE.W      (A2)+,D1         * READ THE DISPLACEMENT (WORD)
00001F14                          1469              
00001F14  0801 000F               1470                          BTST    #15,D1
00001F18  6700 000E               1471                          BEQ         PRINT_BRA_RETURN        * POSITIVE DISPLACEMENT
00001F1C                          1472                          
00001F1C  4641                    1473                          NOT.W       D1                      * 1'S COMPLEMENT    (ON WORD)
00001F1E  5281                    1474                          ADD.L       #$1,D1                   * -> 2'S COMPLEMENT
00001F20  4481                    1475                          NEG.L       D1
00001F22  6000 0004               1476                          BRA         PRINT_BRA_RETURN
00001F26                          1477  
00001F26  221A                    1478  LONG_DISPLACEMENT           MOVE.L      (A2)+,D1         * READ THE DISPLACEMENT (LONG)
00001F28                          1479      
00001F28  4EB9 000021E6           1480  PRINT_BRA_RETURN    JSR     PRINT_DOLLAR
00001F2E  D282                    1481                      ADD.L   D2,D1
00001F30  2A01                    1482                      MOVE.L  D1,D5
00001F32  7604                    1483                      MOVE.L  #4,D3
00001F34  4EB9 0000207C           1484                      JSR     PRINT_HEX
00001F3A  4EB9 000021BE           1485                      JSR     PRINT_NEWLINE                            
00001F40  4E75                    1486                      RTS                         * RETURN TO THE CALLER
00001F42                          1487  
00001F42  B63C 0008               1488  CHECK_EA_AR         CMP.B   #$8, D3
00001F46  6600 0014               1489                      BNE     CHECK_EA_INDIRECT
00001F4A  0604 00A0               1490                      ADD.B   #$A0, D4
00001F4E  4281                    1491                      CLR.L   D1
00001F50  1204                    1492                      MOVE.B  D4, D1
00001F52  4EB9 000020E4           1493                      JSR     PRINT_REGISTOR          * ADDRESS REG
00001F58  6000 00FA               1494                      BRA     PRINT_EA_RETURN
00001F5C                          1495                      
00001F5C  B63C 0010               1496  CHECK_EA_INDIRECT       CMP.B   #$10, D3
00001F60  6600 0020               1497                          BNE     CHECK_EA_POST
00001F64  4EB9 00002138           1498                          JSR     PRINT_OPEN_PARENTHESIS      * (
00001F6A  0604 00A0               1499                          ADD.B   #$A0, D4
00001F6E  4281                    1500                          CLR.L   D1
00001F70  1204                    1501                          MOVE.B  D4, D1
00001F72  4EB9 000020E4           1502                          JSR     PRINT_REGISTOR              * ADDRESS REG
00001F78  4EB9 0000214C           1503                          JSR     PRINT_CLOSED_PARENTHESIS    * )
00001F7E  6000 00D4               1504                          BRA     PRINT_EA_RETURN
00001F82                          1505                          
00001F82  B63C 0018               1506  CHECK_EA_POST   CMP.B   #$18,D3
00001F86  6600 0026               1507                  BNE     CHECK_EA_PRE
00001F8A  4EB9 00002138           1508                  JSR     PRINT_OPEN_PARENTHESIS      * (
00001F90  0604 00A0               1509                  ADD.B   #$A0, D4
00001F94  4281                    1510                  CLR.L   D1
00001F96  1204                    1511                  MOVE.B  D4, D1
00001F98  4EB9 000020E4           1512                  JSR     PRINT_REGISTOR              * ADDRESS REG
00001F9E  4EB9 0000214C           1513                  JSR     PRINT_CLOSED_PARENTHESIS    * )
00001FA4  4EB9 00002164           1514                  JSR     PRINT_PLUS                  * +
00001FAA  6000 00A8               1515                  BRA     PRINT_EA_RETURN
00001FAE                          1516  
00001FAE  B63C 0020               1517  CHECK_EA_PRE        CMP.B   #$20,D3
00001FB2  6600 0026               1518                      BNE     CHECK_EA_AB_W
00001FB6  4EB9 00002178           1519                      JSR     PRINT_MINUS                 * -
00001FBC  4EB9 00002138           1520                      JSR     PRINT_OPEN_PARENTHESIS      * (
00001FC2  0604 00A0               1521                      ADD.B   #$A0, D4
00001FC6  4281                    1522                      CLR.L   D1
00001FC8  1204                    1523                      MOVE.B  D4, D1
00001FCA  4EB9 000020E4           1524                      JSR     PRINT_REGISTOR              * ADDRESS REG
00001FD0  4EB9 0000214C           1525                      JSR     PRINT_CLOSED_PARENTHESIS    * )
00001FD6  6000 007C               1526                      BRA     PRINT_EA_RETURN
00001FDA                          1527  
00001FDA  D604                    1528  CHECK_EA_AB_W           ADD.B   D4,D3
00001FDC  B63C 0038               1529                          CMP.B   #$38,D3     
00001FE0  6600 0018               1530                          BNE     CHECK_EA_AB_L
00001FE4  4EB9 000021E6           1531                          JSR     PRINT_DOLLAR        * $
00001FEA  3A1A                    1532                          MOVE.W  (A2)+,D5            * PRINTING WORD ABSOLUTE
00001FEC  163C 0002               1533                          MOVE.B  #2,D3
00001FF0  4EB9 0000207C           1534                          JSR     PRINT_HEX
00001FF6  6000 005C               1535                          BRA     PRINT_EA_RETURN
00001FFA                          1536                          
00001FFA  B63C 0039               1537  CHECK_EA_AB_L       CMP.B   #$39, D3
00001FFE  6600 0018               1538                      BNE     CHECK_EA_IMM
00002002  4EB9 000021E6           1539                      JSR     PRINT_DOLLAR        * $
00002008  2A1A                    1540                      MOVE.L  (A2)+,D5            * PRINTING LONG ABSOLUTE
0000200A  163C 0004               1541                      MOVE.B  #4,D3
0000200E  4EB9 0000207C           1542                      JSR     PRINT_HEX
00002014  6000 003E               1543                      BRA     PRINT_EA_RETURN
00002018                          1544                      
00002018  BE3C 0004               1545  CHECK_EA_IMM        CMP.B   #4,D7
0000201C  6600 001E               1546                      BNE     READ_WORD_IMM
00002020  4EB9 000021D2           1547                      JSR     PRINT_HASH_SIGN     * #
00002026  4EB9 000021E6           1548                      JSR     PRINT_DOLLAR        * $
0000202C  2A1A                    1549                      MOVE.L  (A2)+,D5            * PRINTING LONG IMMIDIATE
0000202E  163C 0004               1550                      MOVE.B  #4,D3
00002032  4EB9 0000207C           1551                      JSR     PRINT_HEX
00002038  6000 001A               1552                      BRA     PRINT_EA_RETURN
0000203C                          1553                      
0000203C  4EB9 000021D2           1554  READ_WORD_IMM       JSR     PRINT_HASH_SIGN     * #
00002042  4EB9 000021E6           1555                      JSR     PRINT_DOLLAR        * $
00002048  3A1A                    1556                      MOVE.W  (A2)+,D5            * PRINTING WORD/BYTE IMMIDIATE        
0000204A  163C 0002               1557                      MOVE.B  #2,D3
0000204E  4EB9 0000207C           1558                      JSR     PRINT_HEX
00002054                          1559  
00002054  4CDF 7BFF               1560  PRINT_EA_RETURN     MOVEM.L     (SP)+,A0-A1/A3-A6/D0-D7   * THE RETURN FOR THE EA PRINTER
00002058  4E75                    1561                      RTS
0000205A                          1562  ALL_REG     REG     D0-D7/A0-A6         ; all registers
0000205A                          1563  PRINT_BUFFER    DS.B    10
00002064= 30 30 30 30 30 30 ...   1564  IPUT_BUFFER_EX  DC.B    '00000000'
0000206C                          1565  INPUT_BUFFER    DS.B    15                    
0000207C  48E7 FFFE               1566  PRINT_HEX       MOVEM.L     ALL_REG,-(SP)
00002080  43F8 205A               1567                  LEA         PRINT_BUFFER, A1        *SETTING UP PRINT BUFFER
00002084  D3FC 0000000A           1568                  ADD.L       #10,A1
0000208A  133C 0000               1569                  MOVE.B      #0,-(A1)                *NULL FOR PRINTER TO STOP
0000208E  6000 000E               1570                  BRA         POPULATE_BUFFER
00002092                          1571                  
00002092  103C 000E               1572  PRINT_HEX_RETURN    MOVE.B      #14,D0
00002096  4E4F                    1573                      TRAP        #15
00002098  4CDF 7FFF               1574                      MOVEM.L     (SP)+,ALL_REG
0000209C  4E75                    1575                      RTS
0000209E                          1576                 
0000209E  B63C 0000               1577  POPULATE_BUFFER     CMP.B       #0,D3
000020A2  67EE                    1578                      BEQ         PRINT_HEX_RETURN
000020A4  183C 000F               1579                      MOVE.B      #$0F,D4
000020A8  C805                    1580                      AND.B       D5,D4
000020AA  E81D                    1581                      ROR.B       #4,D5
000020AC  4EB9 000020C8           1582                      JSR         HEX_TO_ASCII
000020B2  1304                    1583                      MOVE.B      D4,-(A1)
000020B4  1805                    1584                      MOVE.B      D5,D4
000020B6  C83C 000F               1585                      AND.B       #$0F,D4
000020BA  4EB9 000020C8           1586                      JSR         HEX_TO_ASCII
000020C0  1304                    1587                      MOVE.B      D4,-(A1)
000020C2  E08D                    1588                      LSR.L       #8,D5
000020C4  5303                    1589                      SUB.B       #1,D3
000020C6  60D6                    1590                      BRA         POPULATE_BUFFER
000020C8                          1591  
000020C8  48E7 E7FE               1592  HEX_TO_ASCII            MOVEM.L     A0-A6/D0-D2/D5-D7,-(SP)
000020CC  B83C 0009               1593                          CMP.B       #9,D4
000020D0  6F00 000C               1594                          BLE         NUMBER_TO_ASCII
000020D4  0604 0037               1595                          ADD.B       #$37,D4
000020D8  4CDF 7FE7               1596  HEX_TO_ASCII_RETURN     MOVEM.L   (SP)+,A0-A6/D0-D2/D5-D7
000020DC  4E75                    1597                          RTS
000020DE                          1598                  
000020DE  0604 0030               1599  NUMBER_TO_ASCII     ADD.B   #$30,D4
000020E2  60F4                    1600                      BRA     HEX_TO_ASCII_RETURN                    
000020E4                          1601                      
000020E4  48E7 FFFE               1602  PRINT_REGISTOR      MOVEM.L     ALL_REG,-(SP)       * keeping old value
000020E8  3F3C 0000               1603                      MOVE.W      #00,-(SP)           *for printing purpose
000020EC  343C 00F0               1604                      MOVE.W      #$f0,D2             *manipulating each digit
000020F0  C441                    1605                      AND.W       D1,D2
000020F2  E842                    1606                      ASR.W       #4,D2
000020F4  4EB9 0000211A           1607                      JSR         TO_STRING           * converts to the string ASCII val
000020FA  E142                    1608                      ASL.W       #8,D2
000020FC                          1609                      
000020FC  C27C 000F               1610                      AND.W       #$F,D1              * the last digit
00002100  1401                    1611                      MOVE.B      D1,D2               
00002102  4EB9 0000211A           1612                      JSR         TO_STRING
00002108  3F02                    1613                      MOVE.W      D2,-(SP)            * puting on the stack to print
0000210A                          1614                      
0000210A  224F                    1615                      MOVE.L      SP,A1               * printing
0000210C  103C 000E               1616                      MOVE.B      #14,D0
00002110  4E4F                    1617                      TRAP        #15
00002112  2A1F                    1618                      MOVE.L      (SP)+, D5           * Adjesting the sp
00002114                          1619  
00002114  4CDF 7FFF               1620  PRINT_REGISTOR_RETURN           MOVEM.L     (SP)+,ALL_REG   *returning the original val
00002118  4E75                    1621                                  RTS
0000211A                          1622                                  
0000211A  B43C 0009               1623  TO_STRING   CMP.B   #9,D2               * check if digit or leter
0000211E  6E00 0008               1624              BGT     LETTERS     
00002122  0602 0030               1625              ADD.B   #$30,D2             * offseting digit
00002126  4E75                    1626              RTS
00002128  0602 0037               1627  LETTERS     ADD.B   #$37,D2             * offseting leter
0000212C  4E75                    1628              RTS   
0000212E                          1629  
0000212E                          1630  *________________________________________________________________________________________
0000212E                          1631  
0000212E                          1632  
0000212E                          1633  *________________ PRINT OPEN PARENTHESIS ________________________________________
0000212E                          1634          *PARAMENTER     NO PARAMETER NEEDED
0000212E= 28 00                   1635  OPEN_PAR_TAG        DC.B    '(',0  
00002130= 29 00                   1636  CLOSED_PAR_TAG      DC.B    ')',0
00002132= 23 00                   1637  HASH_SIGN_TAG       DC.B    '#',0
00002134= 24 00                   1638  DOLLAR_TAG          DC.B    '$',0
00002136= 2F 00                   1639  FORWARD_SLASH_TAG   DC.B    '/',0      
00002138  48E7 FFFE               1640  PRINT_OPEN_PARENTHESIS  MOVEM.L     ALL_REG, -(SP)
0000213C  43F8 212E               1641                          LEA         OPEN_PAR_TAG, A1
00002140  103C 000E               1642                          MOVE.B      #14,D0
00002144  4E4F                    1643                          TRAP        #15
00002146  4CDF 7FFF               1644                          MOVEM.L     (SP)+,ALL_REG
0000214A  4E75                    1645                          RTS
0000214C                          1646  *_________________________________________________________________________________
0000214C                          1647  
0000214C                          1648  *________________ PRINT CLOSED PARENTHESIS ________________________________________
0000214C                          1649          *PARAMENTER     NO PARAMETER NEEDED
0000214C                          1650          
0000214C  48E7 FFFE               1651  PRINT_CLOSED_PARENTHESIS    MOVEM.L     ALL_REG, -(SP)
00002150  43F8 2130               1652                              LEA         CLOSED_PAR_TAG, A1
00002154  103C 000E               1653                              MOVE.B      #14,D0
00002158  4E4F                    1654                              TRAP        #15
0000215A  4CDF 7FFF               1655                              MOVEM.L     (SP)+,ALL_REG
0000215E  4E75                    1656                              RTS
00002160                          1657  *__________________________________________________________________________________
00002160                          1658  
00002160                          1659  *________________ PRINT PLUS SIGN _________________________________________________
00002160                          1660          *PARAMENTER     NO PARAMETER NEEDED
00002160= 2B 00                   1661  PLUS_TAG            DC.B    '+',0
00002162= 2D 00                   1662  MINUS_TAG           DC.B    '-',0        
00002164  48E7 FFFE               1663  PRINT_PLUS      MOVEM.L     ALL_REG, -(SP)
00002168  43F8 2160               1664                  LEA         PLUS_TAG, A1
0000216C  103C 000E               1665                  MOVE.B      #14,D0
00002170  4E4F                    1666                  TRAP        #15
00002172  4CDF 7FFF               1667                  MOVEM.L     (SP)+,ALL_REG
00002176  4E75                    1668                  RTS
00002178                          1669  *_________________________________________________________________________________
00002178                          1670  
00002178                          1671  *________________ PRINT MINUS SIGN _______________________________________________
00002178                          1672          *PARAMENTER     NO PARAMETER NEEDED
00002178                          1673          
00002178  48E7 FFFE               1674  PRINT_MINUS         MOVEM.L     ALL_REG, -(SP)
0000217C  43F8 2162               1675                      LEA         MINUS_TAG, A1
00002180  103C 000E               1676                      MOVE.B      #14,D0
00002184  4E4F                    1677                      TRAP        #15
00002186  4CDF 7FFF               1678                      MOVEM.L     (SP)+,ALL_REG
0000218A  4E75                    1679                      RTS
0000218C                          1680  *_________________________________________________________________________________
0000218C                          1681  
0000218C                          1682  *________________ PRINT COMMA ____________________________________________________
0000218C                          1683          *PARAMENTER     NO PARAMETER NEEDED
0000218C= 09 00                   1684  TAB_TAG         DC.B    $9,0
0000218E= 20 00                   1685  SPACE_TAG       DC.B    ' ',0
00002190= 2C 00                   1686  COMMA_TAG       DC.B    ',',0        
00002192  48E7 FFFE               1687  PRINT_COMMA         MOVEM.L     ALL_REG,-(SP)
00002196  43F8 2190               1688                      LEA         COMMA_TAG, A1
0000219A  103C 000E               1689                      MOVE.B      #14,D0
0000219E  4E4F                    1690                      TRAP        #15
000021A0  4CDF 7FFF               1691                      MOVEM.L     (SP)+,ALL_REG
000021A4  4E75                    1692                      RTS
000021A6                          1693  *_________________________________________________________________________________
000021A6                          1694  
000021A6                          1695  *________________ PRINT TAB ______________________________________________________
000021A6                          1696          *PARAMENTER     NO PARAMETER NEEDED
000021A6                          1697          
000021A6  48E7 FFFE               1698  PRINT_TAB       MOVEM.L     ALL_REG,-(SP)
000021AA  43F8 218C               1699                  LEA         TAB_TAG, A1
000021AE  103C 000E               1700                  MOVE.B      #14,D0
000021B2  4E4F                    1701                  TRAP        #15
000021B4  4CDF 7FFF               1702                  MOVEM.L     (SP)+,ALL_REG
000021B8  4E75                    1703                  RTS
000021BA                          1704  *_________________________________________________________________________________
000021BA                          1705  
000021BA                          1706  
000021BA                          1707  *_______________    PRINT NEWLINE   ________________________________________________
000021BA                          1708          *PARAMETER NO PARAMETER NEEDED
000021BA= 0D 0A 00                1709  NEWLINE_TAG         DC.B    CR,LF,0        
000021BE  48E7 FFFE               1710  PRINT_NEWLINE       MOVEM.L     ALL_REG,-(SP)
000021C2  43F8 21BA               1711                      LEA         NEWLINE_TAG, A1
000021C6  103C 000E               1712                      MOVE.B      #14,D0
000021CA  4E4F                    1713                      TRAP        #15
000021CC  4CDF 7FFF               1714                      MOVEM.L     (SP)+,ALL_REG
000021D0  4E75                    1715                      RTS
000021D2                          1716  
000021D2                          1717  *___________________________________________________________________________________
000021D2                          1718  
000021D2                          1719  
000021D2                          1720  *_______________    PRINT HASH SIGN   ________________________________________________
000021D2                          1721          *PARAMETER NO PARAMETER NEEDED
000021D2                          1722          
000021D2  48E7 FFFE               1723  PRINT_HASH_SIGN     MOVEM.L     ALL_REG,-(SP)
000021D6  43F8 2132               1724                      LEA         HASH_SIGN_TAG, A1
000021DA  103C 000E               1725                      MOVE.B      #14,D0
000021DE  4E4F                    1726                      TRAP        #15
000021E0  4CDF 7FFF               1727                      MOVEM.L     (SP)+,ALL_REG
000021E4  4E75                    1728                      RTS
000021E6                          1729  
000021E6                          1730  *___________________________________________________________________________________
000021E6                          1731  
000021E6                          1732  
000021E6                          1733  
000021E6                          1734  *_______________    PRINT DOLLAR   ________________________________________________
000021E6                          1735          *PARAMETER NO PARAMETER NEEDED
000021E6                          1736          
000021E6  48E7 FFFE               1737  PRINT_DOLLAR        MOVEM.L     ALL_REG,-(SP)
000021EA  43F8 2134               1738                      LEA         DOLLAR_TAG, A1
000021EE  103C 000E               1739                      MOVE.B      #14,D0
000021F2  4E4F                    1740                      TRAP        #15
000021F4  4CDF 7FFF               1741                      MOVEM.L     (SP)+,ALL_REG
000021F8  4E75                    1742                      RTS
000021FA                          1743  
000021FA                          1744  *___________________________________________________________________________________
000021FA                          1745  
000021FA                          1746  
000021FA                          1747  
000021FA                          1748  *_______________    PRINT FORWARD SLASH   ________________________________________________
000021FA                          1749          *PARAMETER NO PARAMETER NEEDED
000021FA                          1750          
000021FA  48E7 FFFE               1751  PRINT_FORWARD_SLASH     MOVEM.L     ALL_REG,-(SP)
000021FE  43F8 2136               1752                          LEA         FORWARD_SLASH_TAG, A1
00002202  103C 000E               1753                          MOVE.B      #14,D0
00002206  4E4F                    1754                          TRAP        #15
00002208  4CDF 7FFF               1755                          MOVEM.L     (SP)+,ALL_REG
0000220C  4E75                    1756                          RTS
0000220E                          1757  
0000220E                          1758  
0000220E                          1759     
0000220E                          1760  *********************************************************************
0000220E                          1761  *Subroutine: OUTPUT
0000220E                          1762  *What it does: Outputs parts of opword, moves to new screen if needed
0000220E                          1763  *Registers: Uses register A1, D0,
0000220E                          1764  *A1: Used to store messages and single char
0000220E                          1765  *Paramemeters: A1, A2
0000220E                          1766  *A1: Stores what should be used
0000220E                          1767  *********************************************************************  
0000220E                          1768  
0000220E                          1769       OUTPUT:
0000220E                          1770       
0000220E  0C39 0001 000025F1      1771       CMP.B  #1,(OutputType)
00002216  6700 0026               1772       BEQ    outputOpcode
0000221A  0C39 0002 000025F1      1773       CMP.B  #2,(OutputType)
00002222  6700 0066               1774       BEQ    OutputSize
00002226  0C39 0003 000025F1      1775       CMP.B  #3,(OutputType)
0000222E  6700 0062               1776       BEQ    OutputData
00002232  0C39 0004 000025F1      1777       CMP.B  #4,(OutputType)
0000223A  6700 00AC               1778       BEQ    OutputAddress
0000223E                          1779       
0000223E                          1780  outputOpcode    
0000223E  0C39 001E 000025F0      1781       CMP.B  #30, (LineCounter)      Console holds 32 lines total, 30 used for dissassembly data
00002246  6C00 0010               1782       BGE    outputOpcodeNewScreen
0000224A                          1783       
0000224A  103C 000E               1784       MOVE.B #14,D0
0000224E  4E4F                    1785       TRAP   #15
00002250                          1786       
00002250  5239 000025F0           1787       ADD.B  #1,(LineCounter)
00002256                          1788       
00002256  4E75                    1789       RTS
00002258                          1790       
00002258                          1791       
00002258                          1792  outputOpcodeNewScreen
00002258  2F09                    1793       MOVE.L A1,-(SP)                Storing last message to be used later
0000225A                          1794       
0000225A  43F9 000025C6           1795       LEA    OUTPUTNEWSCREEN,A1         
00002260  103C 000E               1796       MOVE.B #14,D0
00002264  4E4F                    1797       TRAP   #15
00002266                          1798       
00002266  43F9 00008008           1799       LEA    userInputStored,A1         Pauses program to show screen full of data
0000226C  103C 0002               1800       MOVE.B #2,D0
00002270  4E4F                    1801       TRAP   #15
00002272                          1802       
00002272  13FC 0000 000025F0      1803       MOVE.B #0,(LineCounter)        Sets LineCounter to 0 to reset screen
0000227A                          1804       
0000227A  225F                    1805       MOVE.L (SP)+,A1                Retriving message to be used
0000227C                          1806       
0000227C  103C 000E               1807       MOVE.B #14,D0                  Outputting decoded message
00002280  4E4F                    1808       TRAP   #15
00002282                          1809       
00002282  5239 000025F0           1810       ADD.B  #1,(LineCounter)        Add to line counter for new screen
00002288                          1811       
00002288  4E75                    1812       RTS
0000228A                          1813       
0000228A                          1814  outputSize
0000228A  103C 000E               1815      MOVE.B  #14,D0
0000228E  4E4F                    1816      TRAP    #15
00002290  4E75                    1817      RTS
00002292                          1818  outputData
00002292  267C 00000800           1819      MOVE.L   #$800,A3
00002298  3692                    1820      MOVE.W  (A2),(A3)
0000229A  2F06                    1821      MOVE.L  D6,-(SP)
0000229C  103C 0000               1822      MOVE.B  #0,D0
000022A0  43F9 00009005           1823      LEA     addressOutput,A1
000022A6                          1824  
000022A6                          1825  outputDataLoop
000022A6                          1826  *check if loop has run 4 times
000022A6  B03C 0002               1827      CMP.B   #2,D0
000022AA  6700 001C               1828      BEQ     outputDataLoopEnd
000022AE                          1829      *Grab byte from address, dont increment
000022AE  1C13                    1830      MOVE.B  (A3),D6
000022B0                          1831      *LSR to isolate left bit
000022B0  E80E                    1832      LSR.B   #4,D6
000022B2                          1833      *Call converthtoa
000022B2  6100 008A               1834      BSR     CONVERTHTOA
000022B6  12C6                    1835      MOVE.B  D6,(A1)+   
000022B8                          1836      *Grab bye from address, increment
000022B8  1C1B                    1837      MOVE.B  (A3)+,D6
000022BA                          1838      *AND Mask second digit
000022BA  CC3C 000F               1839      AND.B   #$0F,D6
000022BE  6100 007E               1840      BSR     CONVERTHTOA
000022C2  12C6                    1841      MOVE.B  D6,(A1)+
000022C4  5200                    1842      ADD.B   #1,D0
000022C6  60DE                    1843      BRA     outputDataLoop
000022C8                          1844      
000022C8                          1845  outputDataLoopEnd
000022C8  12BC 0000               1846      MOVE.B  #$00,(A1)
000022CC  2C1F                    1847      MOVE.L  (SP)+,D6
000022CE  43F9 00009005           1848      LEA     addressOutput,A1
000022D4  103C 000E               1849      MOVE.B  #14,D0
000022D8  4E4F                    1850      TRAP    #15
000022DA                          1851      
000022DA  43F9 000025E9           1852      LEA     NEWLINE,A1
000022E0  103C 000E               1853      MOVE.B  #14,D0
000022E4  4E4F                    1854      TRAP    #15
000022E6                          1855  
000022E6  4E75                    1856      RTS
000022E8                          1857   
000022E8                          1858      
000022E8                          1859  outputAddress
000022E8  267C 00000800           1860      MOVE.L  #$800,A3
000022EE  268A                    1861      MOVE.L  A2,(A3)
000022F0  2F06                    1862      MOVE.L  D6,-(SP)
000022F2  103C 0000               1863      MOVE.B  #0,D0
000022F6  43F9 00009005           1864      LEA     addressOutput,A1
000022FC                          1865  outputAddressLoop
000022FC                          1866      *check if loop has run 4 times
000022FC  B03C 0004               1867      CMP.B   #4,D0
00002300  6700 001C               1868      BEQ     outputAddressLoopEnd
00002304                          1869      *Grab byte from address, dont increment
00002304  1C13                    1870      MOVE.B  (A3),D6
00002306                          1871      *LSR to isolate left bit
00002306  E80E                    1872      LSR.B   #4,D6
00002308                          1873      *Call converthtoa
00002308  6100 0034               1874      BSR     CONVERTHTOA
0000230C  12C6                    1875      MOVE.B  D6,(A1)+   
0000230E                          1876      *Grab bye from address, increment
0000230E  1C1B                    1877      MOVE.B  (A3)+,D6
00002310                          1878      *AND Mask second digit
00002310  CC3C 000F               1879      AND.B   #$0F,D6
00002314  6100 0028               1880      BSR     CONVERTHTOA
00002318  12C6                    1881      MOVE.B  D6,(A1)+
0000231A  5200                    1882      ADD.B   #1,D0
0000231C  60DE                    1883      BRA     outputAddressLoop
0000231E                          1884      
0000231E                          1885      
0000231E                          1886  outputAddressLoopEnd
0000231E  12BC 0000               1887      MOVE.B  #$00,(A1)
00002322  2C1F                    1888      MOVE.L  (SP)+,D6
00002324  43F9 00009005           1889      LEA     addressOutput,A1
0000232A                          1890      
0000232A  103C 000E               1891      MOVE.B  #14,D0
0000232E  4E4F                    1892      TRAP    #15
00002330                          1893      
00002330  43F9 000025EC           1894      LEA     spaces,A1
00002336  103C 000E               1895      MOVE.B  #14,D0
0000233A  4E4F                    1896      TRAP    #15
0000233C                          1897  
0000233C                          1898  
0000233C  4E75                    1899      RTS
0000233E                          1900  
0000233E                          1901  *********************************************************************
0000233E                          1902  *Subroutine: CONVERTHTOA
0000233E                          1903  *What it does: Converts HEX to ASCII
0000233E                          1904  *Registers: Uses register D6,D0
0000233E                          1905  *D6: Stores hex character to be converted
0000233E                          1906  *Paramemeters: D6
0000233E                          1907  *D6: Stores hex characcter to be converted
0000233E                          1908  *********************************************************************
0000233E                          1909      CONVERTHTOA:
0000233E                          1910      
0000233E  BC3C 0009               1911      CMP.B   #9,D6
00002342  6F00 0006               1912      BLE     zerotonine
00002346  6000 000A               1913      BRA     AtoF
0000234A                          1914      
0000234A                          1915  zerotonine    
0000234A  0686 00000030           1916      ADD.L   #$30,D6
00002350  4E75                    1917      RTS
00002352                          1918  AtoF
00002352  0686 00000037           1919      ADD.L   #$37,D6
00002358  4E75                    1920      RTS
0000235A                          1921      
0000235A                          1922  END_SIMULATION:
0000235A                          1923          
0000235A  103C 0009               1924      MOVE.B  #9,D0
0000235E  4E4F                    1925      TRAP    #15
00002360                          1926  
00002360  FFFF FFFF               1927      SIMHALT             ; halt simulator
00002364                          1928  
00002364                          1929  * Put variables and constants here
00002364= 57 65 6C 63 6F 6D ...   1930  STARTMESSAGE    DC.B    'Welcome to the CSS 422 dissasembler!',CR,LF
0000238A= 53 6F 6D 65 20 71 ...   1931                  DC.B    'Some quick rules:',CR,LF
0000239D= 31 29 20 4F 6E 6C ...   1932                  DC.B    '1) Only the last 6 characters will be saved as the address',CR,LF
000023D9= 32 29 20 54 68 65 ...   1933                  DC.B    '2) The input only accepts hexadecimal input, both in upper and lower case',CR,LF
00002424= 33 29 20 41 6E 79 ...   1934                  DC.B    '3) Any part of the input that is not within the hexadecimal range ',CR,LF
00002468= 20 20 20 77 69 6C ...   1935                  DC.B    '   will be rejected',CR,LF
0000247D= 34 29 20 54 68 65 ...   1936                  DC.B    '4) The first input must be smaller than the second, otherwise it ',CR,LF
000024C0= 20 20 20 77 69 6C ...   1937                  DC.B    '   will be rejected',CR,LF,0      
000024D6= 50 6C 65 61 73 65 ...   1938  INPUT1MESSAGE   DC.B    'Please input the lower address edge',CR,LF,0
000024FC= 50 6C 65 61 73 65 ...   1939  INPUT2MESSAGE   DC.B    'Please input the upper address edge',CR,LF,0
00002522                          1940  
00002522= 0D 0A 54 68 69 73 ...   1941  INPUTERRORBADCHAR   DC.B    CR,LF,'This value is not valid',CR,LF,CR,LF,0
00002540= 0D 0A 49 6E 70 75 ...   1942  INPUTERROR2SMALLER  DC.B    CR,LF,'Input 2 is smaller than input 1. Input a larger value',CR,LF,CR,LF,0
0000257C                          1943  
0000257C= 54 6F 20 72 65 70 ...   1944  INPUTREPEAT     DC.B    'To repeat the program, press enter. Otherwise, press any button to quit',CR,LF,0
000025C6                          1945  
000025C6= 50 6C 65 61 73 65 ...   1946  OUTPUTNEWSCREEN     DC.B    'Please press enter for more code',CR,LF,0
000025E9                          1947  
000025E9= 0D 0A 00                1948  NEWLINE     DC.B    CR,LF,0
000025EC= 20 20 00                1949  SPACES      DC.B    '  ',0
000025EF                          1950  
000025EF= 01                      1951  InputQuality    DC.B    1       Set to 1 for default good
000025F0= 00                      1952  LineCounter     DC.B    0      Counts the number of lines used per screen (max of 31)
000025F1= 00                      1953  OutputType      DC.B    0      To track what type is being output
000025F2= 00                      1954  RepeatFlag      DC.B    0
000025F3                          1955  
000025F3= 4E 4F 50 0D 0A 00       1956  nopout  DC.B    'NOP',CR,LF,0
000025F9= 4D 4F 56 45 00          1957  moveout  DC.B    'MOVE',0
000025FE= 4D 4F 56 45 41 00       1958  moveaout DC.B      'MOVEA',0
00002604= 4D 4F 56 45 51 20 ...   1959  moveqout DC.B   'MOVEQ  ',0
0000260C= 4D 4F 56 45 4D 00       1960  movemout DC.B   'MOVEM',0
00002612                          1961  
00002612= 53 55 42 00             1962  subout    DC.B  'SUB',0
00002616= 41 44 44 00             1963  addout    DC.B 'ADD',0
0000261A= 41 44 44 41 00          1964  addaout    DC.B 'ADDA',0
0000261F= 41 44 44 51 00          1965  addqout    DC.B 'ADDQ',0
00002624                          1966  
00002624= 4C 45 41 20 20 20 ...   1967  leaout    DC.B  'LEA    ',0
0000262C                          1968  
0000262C= 4E 4F 54 00             1969  notout    DC.B  'NOT',0
00002630= 4F 52 00                1970  orout DC.B     'OR',0
00002633= 41 4E 44 00             1971  andout DC.B     'AND',0
00002637                          1972  
00002637                          1973  
00002637= 4C 53 4C 00             1974  lslout    DC.B  'LSL',0
0000263B= 4C 53 52 00             1975  lsrout    DC.B  'LSR',0
0000263F= 41 53 4C 00             1976  aslout    DC.B  'ASL',0
00002643= 41 53 52 00             1977  asrout    DC.B  'ASR',0
00002647                          1978  
00002647= 52 4F 4C 00             1979  rolout    DC.B  'ROL',0
0000264B= 52 4F 52 00             1980  rorout    DC.B  'ROR',0
0000264F                          1981  
0000264F= 42 47 54 00             1982  bgtout DC.B     'BGT',0
00002653= 42 4C 45 00             1983  bleout DC.B     'BLE',0
00002657= 42 45 51 00             1984  beqout DC.B     'BEQ',0
0000265B                          1985  
0000265B= 4A 53 52 20 20 20 ...   1986  jsrout DC.B     'JSR    ',0
00002663= 52 54 53 20 20 20 ...   1987  rtsout DC.B     'RTS    ',CR,LF,0
0000266D= 42 52 41 20 20 20 ...   1988  braout DC.B     'BRA    ',0
00002675                          1989  
00002675= 44 41 54 41 20 20 ...   1990  dataout DC.B    'DATA   ',0
0000267D                          1991  
0000267D                          1992  
0000267D                          1993  
0000267D= 2E 42 20 20 20 20 00    1994  byteout  DC.B    '.B    ',0
00002684= 2E 57 20 20 20 20 00    1995  wordout  DC.B    '.W    ',0
0000268B= 2E 4C 20 20 20 20 00    1996  longout  DC.B    '.L    ',0
00002692= 20 20 20 20 20 20 ...   1997  nosizeout DC.B   '       ',0
0000269A                          1998  
0000269A= 0D 0A 00                1999  empty    DC.B    '',CR,LF,0
0000269D                          2000  
0000269D  =0000000D               2001  CR  EQU $0D
0000269D  =0000000A               2002  LF  EQU $0A
0000269D                          2003  
0000269D                          2004  
0000269D                          2005      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 14DC
ADDA                1528
ADDAOUT             261A
ADDOUT              2616
ADDQ                1490
ADDQOUT             261F
ADDQ_EA             1CC0
ADDRESSOUTPUT       9005
ALL_REG             7FFF
AND                 183E
ANDOUT              2633
ASL                 169C
ASLOUT              263F
ASR                 16E8
ASROUT              2643
ATOF                2352
ATOH                1AF0
A_REG               1E10
BCC                 188A
BEQ                 1904
BEQOUT              2657
BGT                 18B8
BGTOUT              264F
BITS0TO5_MASK       3F
BITS7TO8_MASK       C0
BITS9TO11_MASK      E00
BLE                 18DE
BLEOUT              2653
BRA                 192A
BRAOUT              266D
BYTE                12E4
BYTEOUT             267D
CHECK_EA_AB_L       1FFA
CHECK_EA_AB_W       1FDA
CHECK_EA_AR         1F42
CHECK_EA_IMM        2018
CHECK_EA_INDIRECT   1F5C
CHECK_EA_POST       1F82
CHECK_EA_PRE        1FAE
CHECK_VALID_EA      1E72
CLOSED_PAR_TAG      2130
COMMA_TAG           2190
CONVERTATOH         1AF0
CONVERTHTOA         233E
CR                  D
DATA                1950
DATAOUT             2675
DOLLAR_TAG          2134
D_REG               1E00
EA1_END             1C14
EA1_MODE_ONE        1C08
EA1_MODE_ZERO       1C10
EA2_END             1C54
EA2_IMMEDIATE       1C4C
EA2_REGISTER        1C44
EA_GROUP1           1BE8
EA_GROUP2           1C2E
EA_GROUP3           1C70
EA_GROUP4           1C88
EMPTY               269A
END_SIMULATION      235A
FINISH              1B44
FIRSTINPUT          19C6
FLIP_CLR            1DB8
FLIP_DIRECTION      1DA4
FLIP_LOOP_INCR      1DC0
FLIP_SET            1DBE
FORMAT_IMMEDIATE_DATA  1B50
FORWARD_SLASH_TAG   2136
HASH_SIGN_TAG       2132
HERE                103C
HEX_TO_ASCII        20C8
HEX_TO_ASCII_RETURN  20D8
IMMEDIATE0          1B60
IMMEDIATE_END       1B62
INPUT1              8000
INPUT1MESSAGE       24D6
INPUT2              8004
INPUT2MESSAGE       24FC
INPUTERROR          1B46
INPUTERROR2SMALLER  2540
INPUTERRORBADCHAR   2522
INPUTQUALITY        25EF
INPUTREPEAT         257C
INPUT_BUFFER        206C
INVALID_EA          1EAC
IPUT_BUFFER_EX      2064
JSR                 1592
JSROUT              265B
LEA                 17CC
LEAOUT              2624
LETSGO              1074
LETTERS             2128
LF                  A
LINECOUNTER         25F0
LONG                1310
LONGOUT             268B
LONG_DISPLACEMENT   1F26
LOWERCASE           1B2C
LSL                 1604
LSLOUT              2637
LSR                 1650
LSROUT              263B
MEMORYLOOP          1012
MEMORY_TO_REGISTER  1D24
MEM_TO_REG          1DC6
MINUS_TAG           2162
MODE_010            1E38
MODE_01_0           1E6A
MOVE                1346
MOVEA               1398
MOVEAOUT            25FE
MOVEM               13FA
MOVEMOUT            260C
MOVEM_EA            1D18
MOVEOUT             25F9
MOVEQ               13D4
MOVEQOUT            2604
MOVEQ_EA            1CEC
MOVE_MOVEA_EA       1B64
NEWLINE             25E9
NEWLINE_TAG         21BA
NOP                 1326
NOPOUT              25F3
NOSIZEOUT           2692
NOT                 15B8
NOTOUT              262C
NUMBER_TO_ASCII     20DE
ODDNUMBER1          1AC6
ODDNUMBER2          1AE6
ODDNUMBERCHECKER1   1AAA
ODDNUMBERCHECKER2   1ACE
OP1                 1390
OP10                1694
OP11                16E0
OP12                172C
OP13                1778
OP14                17C4
OP15                1836
OP16                1882
OP2                 13CC
OP3                 1436
OP4                 1488
OP5                 14D4
OP6                 1520
OP7                 1564
OP8                 15FC
OP9                 1648
OPCODE              11CE
OPEN_PAR_TAG        212E
OR                  17F2
OROUT               2630
OUTPUT              220E
OUTPUTADDRESS       22E8
OUTPUTADDRESSLOOP   22FC
OUTPUTADDRESSLOOPEND  231E
OUTPUTDATA          2292
OUTPUTDATALOOP      22A6
OUTPUTDATALOOPEND   22C8
OUTPUTNEWSCREEN     25C6
OUTPUTOPCODE        223E
OUTPUTOPCODENEWSCREEN  2258
OUTPUTSIZE          228A
OUTPUTTYPE          25F1
PLUS_TAG            2160
POPULATE_BUFFER     209E
PRINT_BRA           1EE8
PRINT_BRA_RETURN    1F28
PRINT_BUFFER        205A
PRINT_CLOSED_PARENTHESIS  214C
PRINT_COMMA         2192
PRINT_DOLLAR        21E6
PRINT_EA            1EB6
PRINT_EA1           1BA0
PRINT_EA2           1BC6
PRINT_EA_RETURN     2054
PRINT_FORWARD_SLASH  21FA
PRINT_HASH_SIGN     21D2
PRINT_HEX           207C
PRINT_HEX_RETURN    2092
PRINT_INSTRUCTION_RETURN  1EDE
PRINT_MASK          1D90
PRINT_MASK_LOOP     1DE6
PRINT_MASK_LOOP_INCR  1E2C
PRINT_MASK_LOOP_START  1DE2
PRINT_MASK_RETURN   1E32
PRINT_MINUS         2178
PRINT_MOVEM         1D52
PRINT_MOVEM_MASK    1D6A
PRINT_NEWLINE       21BE
PRINT_OPEN_PARENTHESIS  2138
PRINT_PLUS          2164
PRINT_REGISTOR      20E4
PRINT_REGISTOR_RETURN  2114
PRINT_SLASH         1E1C
PRINT_TAB           21A6
READ_WORD_IMM       203C
REGISTER_TO_MEMORY  1E46
REG_COUNT           1DCE
REG_COUNT_INCR      1DDE
REG_TO_MEM          1DA2
REG_TO_MEMO_OK      1DC4
REPEATFLAG          25F2
RETURN              12E2
ROL                 1734
ROLOUT              2647
ROR                 1780
ROROUT              264B
RTS                 156C
RTSOUT              2663
SECONDINPUT         1A2A
SET_MASK            1DF8
SPACES              25EC
SPACE_TAG           218E
START               1000
STARTMESSAGE        2364
SUB                 1444
SUBOUT              2612
TAB_TAG             218C
THERE               11A2
THROWINPUT1CHARERROR  1A0C
THROWINPUT2CHARERROR  1A7A
THROWINPUT2LOWERERROR  1A96
TO_STRING           211A
UPPERCASE           1B14
USERINPUT           197E
USERINPUTREPEAT     11A4
USERINPUTSTART      1008
USERINPUTSTORED     8008
VALID_EA_PC         1E94
WELCOMEEXPLANATION  19AC
WORD                12FA
WORDOUT             2684
WORD_DISPLACEMENT   1F12
WRONG_INSTRUCTION   1D48
ZEROTONINE          234A
