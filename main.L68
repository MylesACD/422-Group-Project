00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/11/2022 2:19:16 PM

00000000  =00009005                  1  addressOutput EQU   $9005
00000000  =00008000                  2  input1      EQU     $8000           where input 1 is stored (can be changed if needed)
00000000  =00008004                  3  input2      EQU     $8004          where input 2 is stored (can be changed if needed)
00000000  =00008008                  4  userInputStored    EQU     $8008   
00000000                             5  
00000000                             6  
00000000                             7  
00000000                             8  
00000000                             9  
00001000                            10      ORG    $1000
00001000                            11  START:                           *Main
00001000                            12  
00001000  13FC 0000 000025C6        13      MOVE.B  #0,(LineCounter)
00001008                            14  userInputStart
00001008  6100 094A                 15      BSR     USERINPUT
0000100C  45F9 00008000             16      LEA     input1,A2
00001012                            17  *memoryLoop
00001012                            18     * BSR     OPCODE
00001012                            19     * ADD.L   #2,A2
00001012                            20      *CMP.B   A2,(input2)
00001012                            21      *BGE     userInputRepeat
00001012                            22      *BRA     memoryLoop
00001012                            23  
00001012                            24      
00001012                            25  *testing purposes----------------------------------------------------
00001012  1C3C 0004                 26      MOVE.B #$04, D6
00001016  347C 1004                 27      MOVE.W #$1004, A2
0000101A  7C0A                      28      MOVEQ #10, D6
0000101C  264A                      29      MOVEA.L A2, A3
0000101E  B641                      30      CMP D1,D3
00001020  9C82                      31      SUB.L D2, D6
00001022                            32  
00001022  6000 0002                 33      BRA here
00001026                            34  here
00001026  4EB9 0000118C             35      JSR there
0000102C  4693                      36      NOT.L (A3)
0000102E  47D1                      37      LEA (A1),A3
00001030  8AB9 00008000             38      OR.L input1, D5
00001036  48E7 FFFE                 39      MOVEM.L D0-D7/A0-A6,-(SP) 
0000103A  CC01                      40      AND.B D1,D6
0000103C  D803                      41      ADD.B D3,D4
0000103E  D4C9                      42      ADDA.W A1,A2
00001040  5E81                      43      ADDQ.L #7,D1
00001042  E709                      44      LSL.B #3,D1
00001044  E449                      45      lSR.W #2,D1
00001046  ED02                      46      ASL.B #6,D2
00001048  EA42                      47      ASR.W #5,D2
0000104A  EB1B                      48      ROL.B #5,D3
0000104C  E85B                      49      ROR.W #4,D3
0000104E  6E00 000E                 50      BGT letsgo
00001052  B67C 0004                 51      CMP #4,D3 
00001056  6700 0006                 52      BEQ letsgo
0000105A  6F00 0002                 53      BLE letsgo
0000105E                            54     
0000105E                            55  letsgo
0000105E                            56      
0000105E                            57  * calls-------------------------------------------------------
0000105E  347C 1012                 58      MOVE.W #$1012, A2
00001062  6100 0154                 59      BSR     OPCODE * test MOVE.B
00001066                            60  
00001066  347C 1016                 61      MOVE.W #$1016, A2
0000106A  6100 014C                 62      BSR     OPCODE * test MOVEA.W
0000106E                            63      
0000106E  347C 101A                 64      MOVE.W #$101A, A2
00001072  6100 0144                 65      BSR     OPCODE * test MOVEQ
00001076                            66     
00001076  347C 101C                 67      MOVE.W #$101C, A2
0000107A  6100 013C                 68      BSR     OPCODE *test MOVEA.L
0000107E                            69      
0000107E  347C 101E                 70      MOVE.W #$101E, A2
00001082  6100 0134                 71      BSR     OPCODE *test DATA
00001086                            72      
00001086                            73      
00001086  347C 1020                 74      MOVE.W #$1020, A2
0000108A  6100 012C                 75      BSR     OPCODE *test SUB.L
0000108E                            76      
0000108E  347C 1022                 77      MOVE.W #$1022, A2
00001092  6100 0124                 78      BSR     OPCODE *test BRA
00001096                            79      
00001096  347C 1026                 80      MOVE.W #$1026, A2
0000109A  6100 011C                 81      BSR     OPCODE *test JSR
0000109E                            82      
0000109E                            83      
0000109E  43F9 00002662             84      LEA empty,A1
000010A4  13FC 0001 000025C7        85      MOVE.B  #1,(OutputType)       
000010AC  6100 1136                 86      BSR    OUTPUT
000010B0                            87  
000010B0                            88      
000010B0  347C 102C                 89      MOVE.W #$102C, A2
000010B4  6100 0102                 90      BSR     OPCODE *test NOT
000010B8                            91      
000010B8  347C 102E                 92      MOVE.W #$102E, A2
000010BC  6100 00FA                 93      BSR     OPCODE *test LEA
000010C0                            94      
000010C0  347C 1030                 95      MOVE.W #$1030, A2
000010C4  6100 00F2                 96      BSR     OPCODE *test OR
000010C8                            97      
000010C8  43F9 00002662             98       LEA empty,A1
000010CE  13FC 0001 000025C7        99      MOVE.B  #1,(OutputType)       
000010D6  6100 110C                100      BSR    OUTPUT
000010DA                           101  
000010DA                           102      
000010DA  347C 1036                103      MOVE.W #$1036, A2
000010DE  6100 00D8                104      BSR     OPCODE *test MOVEM
000010E2                           105  
000010E2  347C 103A                106      MOVE.W #$103A, A2
000010E6  6100 00D0                107      BSR     OPCODE *test AND
000010EA                           108      
000010EA  347C 103C                109      MOVE.W #$103C, A2
000010EE  6100 00C8                110      BSR     OPCODE *test ADD
000010F2                           111      
000010F2  43F9 00002662            112      LEA empty,A1
000010F8  13FC 0001 000025C7       113      MOVE.B  #1,(OutputType) * new line  
00001100  6100 10E2                114      BSR    OUTPUT
00001104                           115  
00001104  347C 103E                116      MOVE.W #$103E, A2
00001108  6100 00AE                117      BSR     OPCODE *test ADDA
0000110C                           118      
0000110C  347C 1040                119      MOVE.W #$1040, A2
00001110  6100 00A6                120      BSR     OPCODE *test ADDQ
00001114                           121      
00001114  347C 1042                122      MOVE.W #$1042, A2
00001118  6100 009E                123      BSR     OPCODE *test LSL
0000111C                           124  
0000111C  347C 1044                125      MOVE.W #$1044, A2
00001120  6100 0096                126      BSR     OPCODE *test LSR
00001124                           127      
00001124  347C 1046                128      MOVE.W #$1046, A2
00001128  6100 008E                129      BSR     OPCODE *test ASL
0000112C                           130      
0000112C  43F9 00002662            131      LEA empty,A1
00001132  13FC 0001 000025C7       132      MOVE.B  #1,(OutputType) * new line  
0000113A  6100 10A8                133      BSR    OUTPUT
0000113E                           134  
0000113E                           135  
0000113E  347C 1048                136      MOVE.W #$1048, A2
00001142  6100 0074                137      BSR     OPCODE *test ASR
00001146                           138      
00001146                           139      
00001146  347C 104A                140      MOVE.W #$104A, A2
0000114A  6100 006C                141      BSR     OPCODE *test ROL
0000114E                           142  
0000114E  347C 104C                143      MOVE.W #$104C, A2
00001152  6100 0064                144      BSR     OPCODE *test ROR
00001156                           145      
00001156  43F9 00002662            146      LEA empty,A1
0000115C  13FC 0001 000025C7       147      MOVE.B  #1,(OutputType) * new line  
00001164  6100 107E                148      BSR    OUTPUT
00001168                           149  
00001168  347C 104E                150      MOVE.W #$104E, A2
0000116C  6100 004A                151      BSR     OPCODE *test BGT
00001170                           152  
00001170  347C 1056                153      MOVE.W #$1056, A2
00001174  6100 0042                154      BSR     OPCODE *test BEQ
00001178                           155      
00001178  347C 105A                156      MOVE.W #$105A, A2
0000117C  6100 003A                157      BSR     OPCODE *test BLE
00001180                           158      
00001180                           159  
00001180                           160    
00001180  347C 118C                161      MOVE.W #$118C, A2
00001184  6100 0032                162      BSR     OPCODE *test RTS
00001188                           163  
00001188                           164  
00001188                           165  * calls---------------------------------------------------------    
00001188  6000 0004                166      BRA userInputRepeat
0000118C                           167  there    
0000118C  4E75                     168      RTS
0000118E                           169  * end testing--------------------------------------------------------------
0000118E                           170   
0000118E                           171  
0000118E                           172       
0000118E                           173    
0000118E                           174  
0000118E                           175      
0000118E                           176  userInputRepeat
0000118E  43F9 00002552            177      LEA     INPUTREPEAT,A1
00001194  103C 000E                178      MOVE.B  #14,D0
00001198  4E4F                     179      TRAP    #15
0000119A  5239 000025C6            180      ADD.B   #1,(LineCounter)
000011A0                           181      
000011A0  43F9 00008008            182      LEA     userInputStored,A1
000011A6  103C 0005                183      MOVE.B  #5,D0
000011AA  4E4F                     184      TRAP    #15
000011AC                           185      
000011AC  B23C 000D                186      CMP.B   #$0D,D1
000011B0  6700 FE56                187      BEQ     userInputStart
000011B4                           188   
000011B4  FFFF FFFF                189      SIMHALT
000011B8                           190  
000011B8                           191  **********************************************************
000011B8                           192  *Subroutine: OPCODE
000011B8                           193  *What it does: Looks at the word pointed to by A2 and determines opcode
000011B8                           194  *Registers: 
000011B8                           195  *A1: printing
000011B8                           196  *A2: parameter with instruction address
000011B8                           197  *D0: printing
000011B8                           198  *D3: used for determing the instruction, mostly shifts
000011B8                           199  *D2: used for determing the size
000011B8                           200  *D4: used for passing size to SIZE
000011B8                           201  *Paramemeters: A2 the memory address to decode from
000011B8                           202  **********************************************************
000011B8                           203  OPCODE:
000011B8  4243                     204      CLR D3
000011BA                           205      
000011BA  0C52 4E75                206      CMP #$4E75, (A2) * RTS compare, this has to be done before JSR, LEA, and NOT
000011BE  6700 0386                207      BEQ rts
000011C2                           208      
000011C2  0C52 4E71                209      CMP #$4E71, (A2) *NOP compare
000011C6  6700 0138                210      BEQ nop
000011CA                           211      
000011CA  3612                     212      Move.W (A2), D3 
000011CC  E04B                     213      LSR #8,D3 * make D3 only contain the first 4 bits of the instruction as its LSig word
000011CE  E84B                     214      LSR #4,D3
000011D0                           215      
000011D0                           216      
000011D0  B67C 0008                217      CMP #%1000, D3 * OR compare
000011D4  6700 05F2                218      BEQ or
000011D8                           219      
000011D8                           220      
000011D8  B67C 0003                221      CMP #%0011, D3 *MOVE and MOVEA compare
000011DC  6F00 0142                222      BLE move
000011E0                           223      
000011E0  B67C 0007                224      CMP #%0111, D3 *MOVEQ compare
000011E4  6700 01C8                225      BEQ moveq
000011E8                           226      
000011E8  B67C 0009                227      CMP #%1001, D3 *SUB compare
000011EC  6700 0230                228      BEQ sub
000011F0                           229      
000011F0  B67C 000C                230      CMP #%1100, D3 *AND compare
000011F4  6700 061E                231      BEQ and
000011F8                           232      
000011F8  B67C 0005                233      CMP #%0101, D3 *ADDQ compare
000011FC  6700 026C                234      BEQ addq
00001200                           235      
00001200  B67C 0006                236      CMP #%0110, D3 *BCC compare, BGT, BLE, and BEQ are branched from internally
00001204  6700 065A                237      BEQ bcc
00001208                           238      
00001208                           239  
00001208  3612                     240      Move.W (A2), D3 * reset D3
0000120A  0243 F118                241      ANDI.W #%1111000100011000,D3  * the bits relevant to LSL
0000120E  B67C E108                242      CMP #%1110000100001000,D3 * LSL compare
00001212  6700 03C6                243      BEQ lsl
00001216                           244  
00001216  3612                     245      Move.W (A2), D3 * reset D3
00001218  0243 F118                246      ANDI.W #%1111000100011000,D3  * the bits relevant to LSR
0000121C  B67C E008                247      CMP #%1110000000001000,D3 * LSR compare
00001220  6700 0404                248      BEQ lsr
00001224                           249      
00001224                           250      
00001224  3612                     251      Move.W (A2), D3 * reset D3
00001226  0243 F118                252      ANDI.W #%1111000100011000,D3  * the bits relevant to ASL
0000122A  B67C E100                253      CMP #%1110000100000000,D3 * ASL compare
0000122E  6700 0442                254      BEQ asl
00001232                           255  
00001232  3612                     256      Move.W (A2), D3 * reset D3
00001234  0243 F118                257      ANDI.W #%1111000100011000,D3  * the bits relevant to ASR
00001238  B67C E000                258      CMP #%1110000000000000,D3 * ASR compare
0000123C  6700 0480                259      BEQ asr
00001240                           260  
00001240  3612                     261      Move.W (A2), D3 * reset D3
00001242  0243 F118                262      ANDI.W #%1111000100011000,D3  * the bits relevant to ASL
00001246  B67C E118                263      CMP #%1110000100011000,D3 * ROL compare
0000124A  6700 04BE                264      BEQ rol
0000124E                           265  
0000124E  3612                     266      Move.W (A2), D3 * reset D3
00001250  0243 F118                267      ANDI.W #%1111000100011000,D3  * the bits relevant to ASR
00001254  B67C E018                268      CMP #%1110000000011000,D3 * ROR compare
00001258  6700 04FC                269      BEQ ror
0000125C                           270  
0000125C                           271      
0000125C                           272      
0000125C  3612                     273      Move.W (A2), D3 * reset D3
0000125E  0243 F0C0                274      ANDI.W #%1111000011000000,D3  * the bits relevant to ADDA
00001262  B67C D0C0                275      CMP #%1101000011000000,D3 * ADDA compare, must be done before add
00001266  6700 029A                276      BEQ adda
0000126A                           277      
0000126A  3612                     278      Move.W (A2), D3 
0000126C  E04B                     279      LSR #8,D3 * make D3 only contain the first 4 bits of the instruction as its LSig word
0000126E  E84B                     280      LSR #4,D3
00001270  B67C 000D                281      CMP #%1101, D3 *ADD compare
00001274  6700 0240                282      BEQ add
00001278                           283  
00001278                           284    
00001278  3612                     285      Move.W (A2), D3 * reset D3
0000127A  0243 FB80                286      ANDI.W #%1111101110000000,D3  * the bits relevant to MOVEM
0000127E  B67C 4880                287      CMP #%0100100010000000,D3 * MOVEM compare
00001282  6700 0150                288      BEQ movem
00001286                           289  
00001286                           290      
00001286                           291      
00001286  3612                     292      Move.W (A2), D3 * reset D3
00001288  EC4B                     293      LSR #6,D3 * make D3 only contain the first 10 bits of the instruction
0000128A  B67C 013A                294      CMP #%0000000100111010, D3 * JSR compare, this has to be done before NOT and LEA
0000128E  6700 02D8                295      BEQ jsr
00001292                           296  
00001292  3612                     297      Move.W (A2), D3 * reset D3
00001294  E04B                     298      LSR #8,D3 * make D3 only contain the first 8 bits
00001296  B67C 0046                299      CMP #%01000110,D3 * NOT compare, this has to be done before LEA
0000129A  6700 02F2                300      BEQ not
0000129E                           301      
0000129E  3612                     302      Move.W (A2), D3 * reset D3
000012A0  0243 F1C0                303      ANDI.W #%1111000111000000,D3 * the bits relevant to LEA
000012A4  B67C 41C0                304      CMP #%0100000111000000,D3 *LEA compare
000012A8  6700 04F8                305      BEQ lea
000012AC                           306      
000012AC                           307      
000012AC                           308      
000012AC                           309      
000012AC                           310      
000012AC                           311  
000012AC                           312  
000012AC                           313     
000012AC  3612                     314      Move.W (A2), D3 * reset D3
000012AE  E04B                     315      LSR #8,D3 * make D3 only contain the first 8 bits of the instruction
000012B0  B67C 0060                316      CMP #%01100000, D3 *BRA compare
000012B4  6700 064A                317      BEQ bra
000012B8                           318      
000012B8                           319      
000012B8  6000 066C                320      BRA data
000012BC                           321      
000012BC                           322  return
000012BC  4E75                     323      RTS
000012BE                           324      
000012BE                           325  
000012BE                           326  
000012BE                           327      
000012BE                           328  byte
000012BE  43F9 00002645            329      LEA    byteout,A1        
000012C4  13FC 0002 000025C7       330      MOVE.B  #2,(OutputType)
000012CC  6100 0F16                331      BSR     OUTPUT 
000012D0  2257                     332      MOVE.L (SP),A1 
000012D2  4ED1                     333      JMP (A1)
000012D4                           334  
000012D4                           335  word
000012D4  43F9 0000264C            336      LEA    wordout,A1        
000012DA  13FC 0002 000025C7       337      MOVE.B  #2,(OutputType)
000012E2  6100 0F00                338      BSR     OUTPUT
000012E6  2257                     339      MOVE.L (SP),A1 
000012E8  4ED1                     340      JMP (A1)
000012EA                           341  
000012EA                           342  long
000012EA  43F9 00002653            343      LEA    longout,A1        
000012F0  13FC 0002 000025C7       344      MOVE.B  #2,(OutputType)
000012F8  6100 0EEA                345      BSR     OUTPUT
000012FC  2257                     346      MOVE.L (SP),A1 
000012FE  4ED1                     347      JMP (A1)
00001300                           348      
00001300                           349       
00001300                           350      
00001300                           351  nop 
00001300  13FC 0004 000025C7       352      MOVE.B  #4,(OutputType)
00001308  6100 0EDA                353      BSR     OUTPUT
0000130C  43F9 000025C9            354      LEA    nopout,A1        
00001312  13FC 0001 000025C7       355      MOVE.B  #1,(OutputType)
0000131A  6100 0EC8                356      BSR     OUTPUT
0000131E  609C                     357      BRA return
00001320                           358      
00001320                           359  move
00001320                           360      * put the size of the instruction into D2 to use later
00001320                           361      * since the first two bits of D3 are 00 for move moving the entire word works
00001320  3403                     362      Move.W D3, D2
00001322                           363  
00001322                           364  
00001322                           365      * determine if MOVE or MOVEA
00001322                           366      * if bits 8,7,6 = 001 its MOVEA
00001322  3612                     367      MOVE.W (A2),D3
00001324  0243 01C0                368      ANDI.W #%0000000111000000, D3 *extract only bits 8,7,6
00001328                           369      
00001328  B67C 0040                370      CMP #%0000000001000000,D3 * if only the sixth bit is set then instruction is MOVEA
0000132C  6700 0044                371      BEQ movea
00001330                           372      
00001330  13FC 0004 000025C7       373      MOVE.B  #4,(OutputType)
00001338  6100 0EAA                374      BSR     OUTPUT
0000133C                           375  
0000133C  43F9 000025CF            376      LEA    moveout,A1     *print the type
00001342  13FC 0001 000025C7       377      MOVE.B  #1,(OutputType)   
0000134A  6100 0E98                378      BSR    OUTPUT
0000134E                           379      
0000134E                           380      *now to print size  
0000134E  4879 0000136A            381      PEA op1
00001354                           382      
00001354  B47C 0002                383      cmp #2,D2 *if the size is 2 branch to long
00001358  6790                     384      BEQ long
0000135A  B47C 0003                385      cmp #3,D2 *if the size is 3 branch to word
0000135E  6700 FF74                386      BEQ word
00001362  B47C 0001                387      cmp #1,D2 * if the size is 1 branch to byte
00001366  6700 FF56                388      BEQ byte   
0000136A                           389  op1
0000136A  6100 07CE                390      BSR MOVE_MOVEA_EA
0000136E  6000 FF4C                391      BRA return
00001372                           392      
00001372                           393  movea
00001372  13FC 0004 000025C7       394      MOVE.B  #4,(OutputType)
0000137A  6100 0E68                395      BSR     OUTPUT
0000137E                           396  
0000137E  43F9 000025D4            397      LEA    moveaout,A1
00001384  13FC 0001 000025C7       398      MOVE.B  #1,(OutputType)       
0000138C  6100 0E56                399      BSR    OUTPUT
00001390                           400      
00001390                           401      *now to print size  
00001390  4879 000013A6            402      PEA op2
00001396                           403  
00001396  B47C 0002                404      cmp #2,D2 *if the size is 2 branch to long
0000139A  6700 FF4E                405      BEQ long
0000139E  B47C 0003                406      cmp #3,D2 *if the size is 3 branch to word
000013A2  6700 FF30                407      BEQ word
000013A6                           408  op2
000013A6  6100 0792                409      BSR MOVE_MOVEA_EA
000013AA  6000 FF10                410      BRA return
000013AE                           411      
000013AE                           412  moveq
000013AE  13FC 0004 000025C7       413      MOVE.B  #4,(OutputType)
000013B6  6100 0E2C                414      BSR     OUTPUT
000013BA                           415  
000013BA  43F9 000025DA            416      LEA    moveqout,A1
000013C0  13FC 0001 000025C7       417      MOVE.B  #1,(OutputType)       
000013C8  6100 0E1A                418      BSR    OUTPUT
000013CC  6100 08F4                419      BSR MOVEQ_EA
000013D0  6000 FEEA                420      BRA return
000013D4                           421  
000013D4                           422      
000013D4                           423  movem
000013D4  13FC 0004 000025C7       424      MOVE.B  #4,(OutputType)
000013DC  6100 0E06                425      BSR     OUTPUT
000013E0                           426      
000013E0  43F9 000025E0            427      LEA    movemout,A1
000013E6  13FC 0001 000025C7       428      MOVE.B  #1,(OutputType)       
000013EE  6100 0DF4                429      BSR    OUTPUT
000013F2                           430      
000013F2  4879 00001410            431      PEA op3
000013F8  3412                     432      MOVE.W (A2),D2
000013FA  0242 0040                433      ANDI.W #%0000000001000000, D2 * set to only the size bits
000013FE  EC4A                     434      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001400  B47C 0001                435      CMP #1, D2 * if the size is 1 branch to long
00001404  6700 FEE4                436      BEQ long
00001408  B47C 0000                437      CMP #0, D2 * if the size is 0 branch to long
0000140C  6700 FEC6                438      BEQ word
00001410                           439  op3
00001410  6100 08DC                440      BSR MOVEM_EA
00001414  4EB9 00001D28            441      JSR PRINT_MOVEM
0000141A  6000 FEA0                442      BRA return
0000141E                           443      
0000141E                           444      
0000141E                           445  sub 
0000141E  13FC 0004 000025C7       446      MOVE.B  #4,(OutputType)
00001426  6100 0DBC                447      BSR     OUTPUT
0000142A                           448     
0000142A  43F9 000025E6            449      LEA    subout,A1
00001430  13FC 0001 000025C7       450      MOVE.B  #1,(OutputType)       
00001438  6100 0DAA                451      BSR    OUTPUT
0000143C                           452      
0000143C  3412                     453      MOVE.W (A2),D2
0000143E  0242 00C0                454      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001442  EC4A                     455      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001444                           456  
00001444                           457  
00001444                           458      
00001444                           459      *now to print size  
00001444  4879 00001462            460      PEA op4
0000144A  B47C 0002                461      cmp #2,D2 *if the size is 2 branch to long
0000144E  6700 FE9A                462      BEQ long
00001452  B47C 0001                463      cmp #1,D2 *if the size is 1 branch to word
00001456  6700 FE7C                464      BEQ word
0000145A  B47C 0000                465      cmp #0,D2 *if the size is 0 branch to byte
0000145E  6700 FE5E                466      BEQ byte 
00001462                           467  op4
00001462  6100 075A                468      BSR EA_GROUP1
00001466  6000 FE54                469      BRA return
0000146A                           470      
0000146A                           471  addq 
0000146A  13FC 0004 000025C7       472      MOVE.B  #4,(OutputType)
00001472  6100 0D70                473      BSR     OUTPUT
00001476                           474     
00001476  43F9 000025F3            475      LEA    addqout,A1
0000147C  13FC 0001 000025C7       476      MOVE.B  #1,(OutputType)       
00001484  6100 0D5E                477      BSR    OUTPUT
00001488                           478      
00001488  3412                     479      MOVE.W (A2),D2
0000148A  0242 00C0                480      ANDI.W #%0000000011000000, D2 * set to only the size bits
0000148E  EC4A                     481      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001490                           482  
00001490                           483  
00001490                           484      
00001490                           485      *now to print size  
00001490  4879 000014AE            486      PEA op5
00001496  B47C 0002                487      cmp #2,D2 *if the size is 2 branch to long
0000149A  6700 FE4E                488      BEQ long
0000149E  B47C 0001                489      cmp #1,D2 *if the size is 1 branch to word
000014A2  6700 FE30                490      BEQ word
000014A6  B47C 0000                491      cmp #0,D2 *if the size is 0 branch to byte
000014AA  6700 FE12                492      BEQ byte *otherwise branch to byte
000014AE                           493  op5    
000014AE  6100 07E6                494      BSR ADDQ_EA
000014B2  6000 FE08                495      BRA return    
000014B6                           496      
000014B6                           497      
000014B6                           498  add
000014B6  13FC 0004 000025C7       499      MOVE.B  #4,(OutputType)
000014BE  6100 0D24                500      BSR     OUTPUT
000014C2                           501  
000014C2  43F9 000025EA            502      LEA    addout,A1
000014C8  13FC 0001 000025C7       503      MOVE.B  #1,(OutputType)       
000014D0  6100 0D12                504      BSR    OUTPUT
000014D4                           505      
000014D4  3412                     506      MOVE.W (A2),D2
000014D6  0242 00C0                507      ANDI.W #%0000000011000000, D2 * set to only the size bits
000014DA  EC4A                     508      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000014DC                           509  
000014DC                           510  
000014DC                           511      
000014DC                           512      *now to print size  
000014DC  4879 000014FA            513      PEA op6
000014E2  B47C 0002                514      cmp #2,D2 *if the size is 2 branch to long
000014E6  6700 FE02                515      BEQ long
000014EA  B47C 0001                516      cmp #1,D2 *if the size is 1 branch to word
000014EE  6700 FDE4                517      BEQ word
000014F2  B47C 0000                518      cmp #0,D2 *if the size is 0 branch to byte
000014F6  6700 FDDC                519      BEQ word
000014FA                           520  op6
000014FA  6100 06C2                521      BSR EA_GROUP1
000014FE  6000 FDBC                522      BRA return
00001502                           523  
00001502                           524  adda
00001502                           525  
00001502  13FC 0004 000025C7       526      MOVE.B  #4,(OutputType)
0000150A  6100 0CD8                527      BSR     OUTPUT
0000150E                           528  
0000150E  43F9 000025EE            529      LEA    addaout,A1
00001514  13FC 0001 000025C7       530      MOVE.B  #1,(OutputType)       
0000151C  6100 0CC6                531      BSR    OUTPUT
00001520                           532      
00001520  3412                     533      MOVE.W (A2),D2
00001522  0242 0100                534      ANDI.W #%0000000100000000, D2 * set to only the size bit
00001526  E04A                     535      LSR #8,D2 * make the size bits the first two bits in D2 LSig word
00001528                           536  
00001528                           537  
00001528                           538      
00001528                           539      *now to print size  
00001528  4879 0000153E            540      PEA op7
0000152E  B47C 0001                541      cmp #1,D2 *if the size is 1 branch to long
00001532  6700 FDB6                542      BEQ long
00001536  B47C 0000                543      cmp #0,D2 *if the size is 0 branch to word
0000153A  6700 FD98                544      BEQ word
0000153E                           545  op7
0000153E  6100 071E                546      BSR EA_GROUP4
00001542  6000 FD78                547      BRA return
00001546                           548  
00001546                           549      
00001546                           550  rts
00001546  13FC 0004 000025C7       551      MOVE.B  #4,(OutputType)
0000154E  6100 0C94                552      BSR     OUTPUT
00001552                           553  
00001552  43F9 00002633            554      LEA    rtsout,A1
00001558  13FC 0001 000025C7       555      MOVE.B  #1,(OutputType)       
00001560  6100 0C82                556      BSR    OUTPUT
00001564                           557      
00001564  6000 FD56                558      BRA return
00001568                           559      
00001568                           560      
00001568                           561  jsr 
00001568  13FC 0004 000025C7       562      MOVE.B  #4,(OutputType)
00001570  6100 0C72                563      BSR     OUTPUT
00001574                           564     
00001574  43F9 0000262F            565      LEA    jsrout,A1
0000157A  13FC 0001 000025C7       566      MOVE.B  #1,(OutputType)       
00001582  6100 0C60                567      BSR    OUTPUT
00001586                           568      
00001586  6100 067C                569      BSR EA_GROUP2
0000158A  6000 FD30                570      BRA return
0000158E                           571      
0000158E                           572      
0000158E                           573  not 
0000158E  13FC 0004 000025C7       574      MOVE.B  #4,(OutputType)
00001596  6100 0C4C                575      BSR     OUTPUT
0000159A                           576    
0000159A  43F9 00002600            577      LEA    notout,A1
000015A0  13FC 0001 000025C7       578      MOVE.B  #1,(OutputType)       
000015A8  6100 0C3A                579      BSR    OUTPUT
000015AC                           580      
000015AC  3412                     581      MOVE.W (A2),D2
000015AE  0242 00C0                582      ANDI.W #%0000000011000000, D2 * set to only the size bits
000015B2  EC4A                     583      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000015B4                           584  
000015B4                           585      *now to print size  
000015B4  4879 000015D2            586      PEA op8
000015BA  B47C 0002                587      cmp #2,D2 *if the size is 2 branch to long
000015BE  6700 FD2A                588      BEQ long
000015C2  B47C 0001                589      cmp #1,D2 *if the size is 1 branch to word
000015C6  6700 FD0C                590      BEQ word
000015CA  B47C 0000                591      cmp #0,D2 *if the size is 0 branch to byte
000015CE  6700 FCEE                592      BEQ byte
000015D2                           593  
000015D2                           594      
000015D2                           595  op8    
000015D2  6100 0672                596      BSR EA_GROUP3
000015D6                           597      
000015D6  6000 FCE4                598      BRA return
000015DA                           599  
000015DA                           600  lsl
000015DA  13FC 0004 000025C7       601      MOVE.B  #4,(OutputType)
000015E2  6100 0C00                602      BSR     OUTPUT
000015E6                           603  
000015E6  43F9 0000260B            604      LEA    lslout,A1
000015EC  13FC 0001 000025C7       605      MOVE.B  #1,(OutputType)       
000015F4  6100 0BEE                606      BSR    OUTPUT
000015F8                           607      
000015F8  3412                     608      MOVE.W (A2),D2
000015FA  0242 00C0                609      ANDI.W #%0000000011000000, D2 * set to only the size bits
000015FE  EC4A                     610      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001600                           611  
00001600                           612  
00001600                           613      
00001600                           614      *now to print size 
00001600  4879 0000161E            615      PEA op9 
00001606  B47C 0002                616      cmp #2,D2 *if the size is 2 branch to long
0000160A  6700 FCDE                617      BEQ long
0000160E  B47C 0001                618      cmp #1,D2 *if the size is 1 branch to word
00001612  6700 FCC0                619      BEQ word
00001616  B47C 0000                620      cmp #0,D2 *if the size is 0 branch to byte
0000161A  6700 FCA2                621      BEQ byte
0000161E                           622  op9
0000161E  6100 05E4                623      BSR EA_GROUP2
00001622  6000 FC98                624      BRA return
00001626                           625  
00001626                           626  lsr
00001626  13FC 0004 000025C7       627      MOVE.B  #4,(OutputType)
0000162E  6100 0BB4                628      BSR     OUTPUT
00001632                           629  
00001632  43F9 0000260F            630      LEA    lsrout,A1
00001638  13FC 0001 000025C7       631      MOVE.B  #1,(OutputType)       
00001640  6100 0BA2                632      BSR    OUTPUT
00001644                           633      
00001644  3412                     634      MOVE.W (A2),D2
00001646  0242 00C0                635      ANDI.W #%0000000011000000, D2 * set to only the size bits
0000164A  EC4A                     636      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000164C                           637  
0000164C                           638  
0000164C                           639      
0000164C                           640      *now to print size 
0000164C  4879 0000166A            641      PEA op10 
00001652  B47C 0002                642      cmp #2,D2 *if the size is 2 branch to long
00001656  6700 FC92                643      BEQ long
0000165A  B47C 0001                644      cmp #1,D2 *if the size is 1 branch to word
0000165E  6700 FC74                645      BEQ word
00001662  B47C 0000                646      cmp #0,D2 *if the size is 0 branch to byte
00001666  6700 FC56                647      BEQ byte
0000166A                           648  op10
0000166A  6100 0598                649      BSR EA_GROUP2
0000166E  6000 FC4C                650      BRA return
00001672                           651  asl
00001672  13FC 0004 000025C7       652      MOVE.B  #4,(OutputType)
0000167A  6100 0B68                653      BSR     OUTPUT
0000167E                           654  
0000167E  43F9 00002613            655      LEA    aslout,A1
00001684  13FC 0001 000025C7       656      MOVE.B  #1,(OutputType)       
0000168C  6100 0B56                657      BSR    OUTPUT
00001690                           658      
00001690  3412                     659      MOVE.W (A2),D2
00001692  0242 00C0                660      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001696  EC4A                     661      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001698                           662  
00001698                           663  
00001698                           664      
00001698                           665      *now to print size 
00001698  4879 000016B6            666      PEA op11 
0000169E  B47C 0002                667      cmp #2,D2 *if the size is 2 branch to long
000016A2  6700 FC46                668      BEQ long
000016A6  B47C 0001                669      cmp #1,D2 *if the size is 1 branch to word
000016AA  6700 FC28                670      BEQ word
000016AE  B47C 0000                671      cmp #0,D2 *if the size is 0 branch to byte
000016B2  6700 FC0A                672      BEQ byte
000016B6                           673  op11
000016B6  6100 054C                674      BSR EA_GROUP2
000016BA  6000 FC00                675      BRA return
000016BE                           676  
000016BE                           677  asr
000016BE  13FC 0004 000025C7       678      MOVE.B  #4,(OutputType)
000016C6  6100 0B1C                679      BSR     OUTPUT
000016CA                           680  
000016CA  43F9 00002617            681      LEA    asrout,A1
000016D0  13FC 0001 000025C7       682      MOVE.B  #1,(OutputType)       
000016D8  6100 0B0A                683      BSR    OUTPUT
000016DC                           684      
000016DC  3412                     685      MOVE.W (A2),D2
000016DE  0242 00C0                686      ANDI.W #%0000000011000000, D2 * set to only the size bits
000016E2  EC4A                     687      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000016E4                           688  
000016E4                           689  
000016E4                           690      
000016E4                           691       *now to print size 
000016E4  4879 00001702            692      PEA op12 
000016EA  B47C 0002                693      cmp #2,D2 *if the size is 2 branch to long
000016EE  6700 FBFA                694      BEQ long
000016F2  B47C 0001                695      cmp #1,D2 *if the size is 1 branch to word
000016F6  6700 FBDC                696      BEQ word
000016FA  B47C 0000                697      cmp #0,D2 *if the size is 0 branch to byte
000016FE  6700 FBBE                698      BEQ byte
00001702                           699  op12
00001702  6100 0500                700      BSR EA_GROUP2
00001706  6000 FBB4                701      BRA return
0000170A                           702      
0000170A                           703  rol
0000170A  13FC 0004 000025C7       704      MOVE.B  #4,(OutputType)
00001712  6100 0AD0                705      BSR     OUTPUT
00001716                           706  
00001716  43F9 0000261B            707      LEA    rolout,A1
0000171C  13FC 0001 000025C7       708      MOVE.B  #1,(OutputType)       
00001724  6100 0ABE                709      BSR    OUTPUT
00001728                           710      
00001728  3412                     711      MOVE.W (A2),D2
0000172A  0242 00C0                712      ANDI.W #%0000000011000000, D2 * set to only the size bits
0000172E  EC4A                     713      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001730                           714  
00001730                           715  
00001730                           716      
00001730                           717     *now to print size 
00001730  4879 0000174E            718      PEA op13 
00001736  B47C 0002                719      cmp #2,D2 *if the size is 2 branch to long
0000173A  6700 FBAE                720      BEQ long
0000173E  B47C 0001                721      cmp #1,D2 *if the size is 1 branch to word
00001742  6700 FB90                722      BEQ word
00001746  B47C 0000                723      cmp #0,D2 *if the size is 0 branch to byte
0000174A  6700 FB72                724      BEQ byte
0000174E                           725  op13
0000174E  6100 04B4                726      BSR EA_GROUP2
00001752  6000 FB68                727      BRA return
00001756                           728  
00001756                           729  ror
00001756  13FC 0004 000025C7       730      MOVE.B  #4,(OutputType)
0000175E  6100 0A84                731      BSR     OUTPUT
00001762                           732  
00001762  43F9 0000261F            733      LEA    rorout,A1
00001768  13FC 0001 000025C7       734      MOVE.B  #1,(OutputType)       
00001770  6100 0A72                735      BSR    OUTPUT
00001774                           736      
00001774  3412                     737      MOVE.W (A2),D2
00001776  0242 00C0                738      ANDI.W #%0000000011000000, D2 * set to only the size bits
0000177A  EC4A                     739      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000177C                           740  
0000177C                           741  
0000177C                           742     *now to print size 
0000177C  4879 0000179A            743      PEA op14 
00001782  B47C 0002                744      cmp #2,D2 *if the size is 2 branch to long
00001786  6700 FB62                745      BEQ long
0000178A  B47C 0001                746      cmp #1,D2 *if the size is 1 branch to word
0000178E  6700 FB44                747      BEQ word
00001792  B47C 0000                748      cmp #0,D2 *if the size is 0 branch to byte
00001796  6700 FB26                749      BEQ byte
0000179A                           750  op14
0000179A  6100 0468                751      BSR EA_GROUP2
0000179E  6000 FB1C                752      BRA return
000017A2                           753      
000017A2                           754      
000017A2                           755  
000017A2                           756  lea
000017A2  13FC 0004 000025C7       757      MOVE.B  #4,(OutputType)
000017AA  6100 0A38                758      BSR     OUTPUT
000017AE                           759  
000017AE  43F9 000025F8            760      LEA    leaout,A1
000017B4  13FC 0001 000025C7       761      MOVE.B  #1,(OutputType)       
000017BC  6100 0A26                762      BSR    OUTPUT
000017C0  6100 049C                763      BSR EA_GROUP4
000017C4  6000 FAF6                764      BRA return
000017C8                           765      
000017C8                           766  or
000017C8  13FC 0004 000025C7       767      MOVE.B  #4,(OutputType)
000017D0  6100 0A12                768      BSR     OUTPUT
000017D4                           769  
000017D4  43F9 00002604            770      LEA    orout,A1
000017DA  13FC 0001 000025C7       771      MOVE.B  #1,(OutputType)       
000017E2  6100 0A00                772      BSR    OUTPUT
000017E6                           773      
000017E6                           774          
000017E6  3412                     775      MOVE.W (A2),D2
000017E8  0242 00C0                776      ANDI.W #%0000000011000000, D2 * set to only the size bits
000017EC  EC4A                     777      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000017EE                           778  
000017EE                           779        *now to print size 
000017EE  4879 0000180C            780      PEA op15 
000017F4  B47C 0002                781      cmp #2,D2 *if the size is 2 branch to long
000017F8  6700 FAF0                782      BEQ long
000017FC  B47C 0001                783      cmp #1,D2 *if the size is 1 branch to word
00001800  6700 FAD2                784      BEQ word
00001804  B47C 0000                785      cmp #0,D2 *if the size is 0 branch to byte
00001808  6700 FAB4                786      BEQ byte
0000180C                           787  op15    
0000180C  6100 03B0                788      BSR EA_GROUP1
00001810  6000 FAAA                789      BRA return
00001814                           790      
00001814                           791  and
00001814  13FC 0004 000025C7       792      MOVE.B  #4,(OutputType)
0000181C  6100 09C6                793      BSR     OUTPUT
00001820                           794  
00001820  43F9 00002607            795      LEA    andout,A1
00001826  13FC 0001 000025C7       796      MOVE.B  #1,(OutputType)       
0000182E  6100 09B4                797      BSR    OUTPUT
00001832                           798      
00001832                           799          
00001832  3412                     800      MOVE.W (A2),D2
00001834  0242 00C0                801      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001838  EC4A                     802      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000183A                           803  
0000183A                           804      *now to print size 
0000183A  4879 00001858            805      PEA op16 
00001840  B47C 0002                806      cmp #2,D2 *if the size is 2 branch to long
00001844  6700 FAA4                807      BEQ long
00001848  B47C 0001                808      cmp #1,D2 *if the size is 1 branch to word
0000184C  6700 FA86                809      BEQ word
00001850  B47C 0000                810      cmp #0,D2 *if the size is 0 branch to byte
00001854  6700 FA68                811      BEQ byte
00001858                           812  op16
00001858  6100 0364                813      BSR EA_GROUP1
0000185C  6000 FA5E                814      BRA return    
00001860                           815  
00001860                           816  bcc
00001860  4243                     817      CLR D3
00001862  3612                     818      MOVE.W (A2), D3
00001864                           819  
00001864  0243 0F00                820      ANDI.W #%0000111100000000,D3 * bits [11-8]
00001868  E04B                     821      LSR.W #8,D3
0000186A  B67C 000E                822      CMP #%1110, D3 * BGT compare
0000186E  6700 001E                823      BEQ bgt
00001872  B67C 000F                824      CMP #%1111, D3 * BLE compare
00001876  6700 003C                825      BEQ ble
0000187A  B67C 0007                826      CMP #%0111, D3 * BEQ compare
0000187E  6700 005A                827      BEQ beq
00001882  B67C 0000                828      CMP #%0000, D3 * BRA compare, *doesn't really go here but it works
00001886  6700 0078                829      BEQ bra
0000188A                           830  
0000188A  6000 009A                831      BRA data * goto data if doesn't work
0000188E                           832      
0000188E                           833  
0000188E                           834  bgt
0000188E  13FC 0004 000025C7       835      MOVE.B  #4,(OutputType)
00001896  6100 094C                836      BSR     OUTPUT
0000189A                           837  
0000189A  43F9 00002623            838      LEA    bgtout,A1
000018A0  13FC 0001 000025C7       839      MOVE.B  #1,(OutputType)       
000018A8  6100 093A                840      BSR    OUTPUT
000018AC  6100 0610                841      BSR PRINT_BRA
000018B0  6000 FA0A                842      BRA return
000018B4                           843  
000018B4                           844  ble
000018B4  13FC 0004 000025C7       845      MOVE.B  #4,(OutputType)
000018BC  6100 0926                846      BSR     OUTPUT
000018C0                           847  
000018C0  43F9 00002627            848      LEA    bleout,A1
000018C6  13FC 0001 000025C7       849      MOVE.B  #1,(OutputType)       
000018CE  6100 0914                850      BSR    OUTPUT
000018D2  6100 05EA                851      BSR PRINT_BRA
000018D6  6000 F9E4                852      BRA return
000018DA                           853  beq
000018DA  13FC 0004 000025C7       854      MOVE.B  #4,(OutputType)
000018E2  6100 0900                855      BSR     OUTPUT
000018E6                           856  
000018E6  43F9 0000262B            857      LEA    beqout,A1
000018EC  13FC 0001 000025C7       858      MOVE.B  #1,(OutputType)       
000018F4  6100 08EE                859      BSR    OUTPUT
000018F8  6100 05C4                860      BSR PRINT_BRA
000018FC  6000 F9BE                861      BRA return
00001900                           862  
00001900                           863  bra
00001900  13FC 0004 000025C7       864      MOVE.B  #4,(OutputType)
00001908  6100 08DA                865      BSR     OUTPUT
0000190C                           866  
0000190C  43F9 00002639            867      LEA    braout,A1
00001912  13FC 0001 000025C7       868      MOVE.B  #1,(OutputType)       
0000191A  6100 08C8                869      BSR    OUTPUT
0000191E  6100 059E                870      BSR PRINT_BRA
00001922  6000 F998                871      BRA return
00001926                           872  
00001926                           873  data
00001926  13FC 0004 000025C7       874      MOVE.B  #4,(OutputType)
0000192E  6100 08B4                875      BSR     OUTPUT
00001932                           876  
00001932  43F9 0000263D            877      LEA    dataout,A1
00001938  13FC 0001 000025C7       878      MOVE.B  #1,(OutputType)       
00001940  6100 08A2                879      BSR    OUTPUT
00001944                           880      
00001944  13FC 0003 000025C7       881      MOVE.B  #3,(OutputType)       
0000194C  6100 0896                882      BSR    OUTPUT     
00001950  6000 F96A                883      BRA return
00001954                           884  
00001954                           885  
00001954                           886  **********************************************************
00001954                           887  *Subroutine: USERINPUT
00001954                           888  *What it does: Takes in user input, rejects bad input
00001954                           889  *Registers: Uses register A1, D0, D5
00001954                           890  *A1: Stores messages and user input
00001954                           891  *D0: Used for TRAP #15
00001954                           892  *D5: Temporaraly stores user input to be masked then transfered
00001954                           893  *Paramemeters: No parameters
00001954                           894  **********************************************************
00001954                           895  USERINPUT:
00001954  4281                     896      CLR.L   D1
00001956  4282                     897      CLR.L   D2
00001958  4283                     898      CLR.L   D3
0000195A  4284                     899      CLR.L   D4
0000195C  4285                     900      CLR.L   D5
0000195E  0C39 0000 000025C8       901      CMP.B   #0,(RepeatFlag)
00001966  6700 001A                902      BEQ     welcomeExplanation
0000196A  6000 0030                903      BRA     firstInput
0000196E  02B9 00000000 00008000   904      AND.L   #$00000000,(Input1)
00001978  02B9 00000000 00008004   905      AND.L   #$00000000,(Input2)
00001982                           906      
00001982                           907  welcomeExplanation
00001982  43F9 0000233A            908      LEA     STARTMESSAGE,A1         
00001988  103C 000E                909      MOVE.B  #14,D0
0000198C  4E4F                     910      TRAP    #15
0000198E                           911      
0000198E  5039 000025C6            912      ADD.B   #8,(LineCounter)
00001994  13FC 0001 000025C8       913      MOVE.B  #1,(RepeatFlag)
0000199C                           914  
0000199C                           915  firstInput
0000199C  43F9 000024AC            916      LEA     INPUT1MESSAGE,A1        
000019A2  103C 000E                917      MOVE.B  #14,D0                  
000019A6  4E4F                     918      TRAP    #15                     Asks user for first input
000019A8  5239 000025C6            919      ADD.B   #1,(LineCounter)        Adds 1 to line counter
000019AE                           920      
000019AE  43F9 00008008            921      LEA     userInputStored,A1
000019B4  103C 0002                922      MOVE.B  #2,D0                   
000019B8  4E4F                     923      TRAP    #15                     User can input string for address
000019BA  5239 000025C6            924      ADD.B   #1,(LineCounter)        Adds 1 to line counter
000019C0                           925  
000019C0                           926      
000019C0  6100 0104                927      BSR     CONVERTATOH                 String converted to hex address
000019C4                           928      
000019C4  0C39 0000 000025C5       929      CMP.B   #0,(InputQuality)       Checks if bad input flag set
000019CC  6700 0014                930      BEQ     throwInput1CharError
000019D0                           931  
000019D0                           932      
000019D0  CABC 00FFFFFF            933      AND.L   #$00FFFFFF,D5           
000019D6  23C5 00008000            934      MOVE.L  D5,input1               Moves result into input 1 memory location
000019DC  4285                     935      CLR.L   D5                      Clears D5 for future use
000019DE  6000 0020                936      BRA     secondInput
000019E2                           937      
000019E2                           938      
000019E2                           939  throwInput1CharError
000019E2  43F9 000024F8            940      LEA     INPUTERRORBADCHAR,A1
000019E8  103C 000E                941      MOVE.B  #14,D0
000019EC  4E4F                     942      TRAP    #15                     Outputs bad character error message
000019EE  5639 000025C6            943      ADD.B   #3,(LineCounter)        Adds 2 to line counter
000019F4                           944      
000019F4  13FC 0001 000025C5       945      MOVE.B  #1,(InputQuality)       Resets quality flag to default (good)
000019FC  4285                     946      CLR.L   D5                      Clears D5 for future use
000019FE                           947      
000019FE                           948      
000019FE                           949      
000019FE  609C                     950      BRA     firstInput              Tries again for input1
00001A00                           951  
00001A00                           952      
00001A00                           953  secondInput
00001A00  43F9 000024D2            954      LEA     INPUT2MESSAGE,A1        
00001A06  103C 000E                955      MOVE.B  #14,D0                  
00001A0A  4E4F                     956      TRAP    #15                     Asks user for second input
00001A0C  5239 000025C6            957      ADD.B   #1,(LineCounter)
00001A12                           958      
00001A12  43F9 00008008            959      LEA     userInputStored,A1
00001A18  103C 0002                960      MOVE.B  #2,D0                   
00001A1C  4E4F                     961      TRAP    #15                     User can input string for address
00001A1E  5239 000025C6            962      ADD.B   #1,(LineCounter)
00001A24                           963  
00001A24                           964      
00001A24  6100 00A0                965      BSR     CONVERTATOH                 String converted to hex address
00001A28                           966  
00001A28  0C39 0000 000025C5       967      CMP.B   #0,(InputQuality)       
00001A30  6700 001E                968      BEQ     throwInput2CharError    Checks if bad input flag set
00001A34                           969      
00001A34  CABC 00FFFFFF            970      AND.L   #$00FFFFFF,D5
00001A3A  BAB9 00008000            971      CMP.L   (input1),D5
00001A40  6D00 002A                972      BLT     throwInput2LowerError
00001A44  23C5 00008004            973      MOVE.L  D5,input2               Moves result into input 2 memory location
00001A4A  4285                     974      CLR.L   D5                      Clears D5 for future use
00001A4C  6000 0032                975      BRA     oddnumberchecker1
00001A50                           976  
00001A50                           977  
00001A50                           978      
00001A50                           979  throwInput2CharError
00001A50  43F9 000024F8            980      LEA     INPUTERRORBADCHAR,A1    
00001A56  103C 000E                981      MOVE.B  #14,D0
00001A5A  4E4F                     982      TRAP    #15                     Outputs bad character error message
00001A5C                           983      
00001A5C  5639 000025C5            984      ADD.B  #3,(InputQuality)        Resets quality flag to default (good)
00001A62  4285                     985      CLR.L   D5                      Clears D5 for future use
00001A64                           986      
00001A64  5639 000025C6            987      ADD.B   #3,(LineCounter)
00001A6A                           988      
00001A6A  6094                     989      BRA     secondInput             Tries again for input2
00001A6C                           990      
00001A6C                           991  throwInput2LowerError
00001A6C  43F9 00002516            992      LEA     INPUTERROR2SMALLER,A1
00001A72  103C 000E                993      MOVE.B  #14,D0
00001A76  4E4F                     994      TRAP    #15
00001A78                           995      
00001A78  5639 000025C6            996      ADD.B   #3,(LineCounter)
00001A7E                           997      
00001A7E  6080                     998      BRA     secondInput
00001A80                           999      
00001A80                          1000  oddnumberchecker1
00001A80                          1001  
00001A80  2C39 00008000           1002      MOVE.L  (input1),D6
00001A86  CCBC 0000000F           1003      AND.L   #$0000000F,D6
00001A8C  CC3C 0001               1004      AND.B   #%0001,D6
00001A90  BC3C 0001               1005      CMP.B   #%0001,D6
00001A94  6700 0006               1006      BEQ     oddnumber1
00001A98  6000 000A               1007      BRA     oddnumberchecker2
00001A9C                          1008      
00001A9C                          1009  oddnumber1    
00001A9C  52B9 00008000           1010      ADD.L   #1,(input1)  
00001AA2  4285                    1011      CLR.L   D5
00001AA4                          1012  
00001AA4                          1013  oddnumberchecker2
00001AA4  2C39 00008004           1014      MOVE.L  (input2),D6
00001AAA  CCBC 0000000F           1015      AND.L   #$0000000F,D6
00001AB0  CC3C 0001               1016      AND.B   #%0001,D6
00001AB4  BC3C 0001               1017      CMP.B   #%0001,D6
00001AB8  6700 0002               1018      BEQ     oddnumber2 
00001ABC                          1019  
00001ABC                          1020  oddnumber2
00001ABC  52B9 00008004           1021      ADD.L   #1,(input2)
00001AC2  4285                    1022      CLR.L   D5
00001AC4  4E75                    1023      RTS
00001AC6                          1024    
00001AC6                          1025         
00001AC6                          1026  
00001AC6                          1027  
00001AC6                          1028  
00001AC6                          1029  **********************************************************
00001AC6                          1030  *Subroutine: CONVERTATOH
00001AC6                          1031  *What it does: Converts user input to hex code
00001AC6                          1032  *Registers: Uses register A1, D2, D5
00001AC6                          1033  *Paramemeters: User input stored in (A1)
00001AC6                          1034  ********************************************************** 
00001AC6                          1035  CONVERTATOH:
00001AC6                          1036      
00001AC6                          1037  AtoH
00001AC6  1419                    1038      MOVE.B  (A1)+,D2                Takes first bit (letter), moves to D2 for testing
00001AC8                          1039      
00001AC8  B43C 0000               1040      CMP.B   #$00,D2                 Compares to 00, since 00 is null (enter)
00001ACC  6700 004C               1041      BEQ     Finish                  Moves to finish if they are equal (no more input)
00001AD0                          1042      
00001AD0  E985                    1043      ASL.L   #4,D5
00001AD2                          1044      
00001AD2  B43C 0030               1045      CMP.B   #$30,D2
00001AD6  6D00 0044               1046      BLT     inputError
00001ADA                          1047      
00001ADA  B43C 0039               1048      CMP.B   #$39,D2                 Compares to 39, because 39 in ASCII is 9, which is largest number
00001ADE  6E00 000A               1049      BGT     upperCase               Branches if greater, may or may not be a letter in hex
00001AE2                          1050      
00001AE2  0402 0030               1051      SUBI.B  #$30,D2                 Subtracts 30 to turn it into it's hex format
00001AE6  DA02                    1052      ADD.B   D2,D5
00001AE8                          1053      
00001AE8  60DC                    1054      BRA     AtoH
00001AEA                          1055  
00001AEA                          1056          
00001AEA                          1057  upperCase   
00001AEA  B43C 0041               1058      CMP.B   #$41,D2
00001AEE  6D00 002C               1059      BLT     InputError              Greater than 39 and less than 41 is not part of hex code
00001AF2                          1060      
00001AF2  B43C 0046               1061      CMP.B   #$46,D2                 
00001AF6  6E00 000A               1062      BGT     lowerCase               Greater than 46 may be hex code in lowercase
00001AFA                          1063      
00001AFA  0402 0037               1064      SUBI.B  #$37,D2                 Subtracts 37 to turn it into hex format
00001AFE  DA02                    1065      ADD.B   D2,D5
00001B00  60C4                    1066      BRA     AtoH
00001B02                          1067  
00001B02                          1068  lowerCase
00001B02  B43C 0061               1069      CMP.B   #$61,D2
00001B06  6D00 0014               1070      BLT     InputError              Greater than 46 and less than 61 is not part of hex code
00001B0A                          1071      
00001B0A  B43C 0066               1072      CMP.B   #$66,D2
00001B0E  6E00 000C               1073      BGT     InputError              Greater than 66 is not part of hex code
00001B12                          1074      
00001B12  0402 0057               1075      SUBI.B  #$57,D2
00001B16  DA02                    1076      ADD.B   D2,D5
00001B18  60AC                    1077      BRA     AtoH
00001B1A                          1078          
00001B1A                          1079  Finish
00001B1A  4E75                    1080      RTS                             Return from CONVERT
00001B1C                          1081      
00001B1C                          1082  inputError
00001B1C  13FC 0000 000025C5      1083      MOVE.B  #0,(InputQuality)
00001B24  4E75                    1084      RTS
00001B26                          1085  
00001B26                          1086  *********************************************************************
00001B26                          1087  *Subroutine: EA
00001B26                          1088  *What it does: outputs the ea for a given opword
00001B26                          1089  *Registers: Uses register A1, D4 , d5 , d6
00001B26                          1090  *A1: used to store opcode
00001B26                          1091  *Paramemeters: A1
00001B26                          1092  *A1: Stores what should be used--++
00001B26                          1093  *********************************************************************  
00001B26  =0000003F               1094  BITS0TO5_MASK   EQU %00111111
00001B26  =000000C0               1095  BITS7TO8_MASK   EQU %11000000
00001B26  =00000E00               1096  BITS9TO11_MASK  EQU %00000111000000000
00001B26                          1097  
00001B26  1E3C 000A               1098  FORMAT_IMMEDIATE_DATA   MOVE.B  #10,D7
00001B2A  BC7C 0000               1099                          CMP     #0,D6
00001B2E  6700 0006               1100                          BEQ     IMMEDIATE0
00001B32  6000 0004               1101                          BRA     IMMEDIATE_END
00001B36  7C08                    1102  IMMEDIATE0              MOVEQ   #8,D6
00001B38                          1103  
00001B38  4E75                    1104  IMMEDIATE_END           RTS
00001B3A                          1105  
00001B3A  3212                    1106  MOVE_MOVEA_EA   MOVE.W  (A2),D1
00001B3C  0201 003F               1107                  ANDI.B  #BITS0TO5_MASK,D1           * Isolate the source EA bits
00001B40  0001 00C0               1108                  ORI.B   #BITS7TO8_MASK,D1           * Populate the S and D bits
00001B44  1C01                    1109                  MOVE.B  D1,D6                   * Pass source EA to print subroutine
00001B46  3212                    1110                  MOVE.W  (A2),D1         
00001B48  3412                    1111                  MOVE.W  (A2),D2 
00001B4A  0241 0E00               1112                  ANDI.W  #BITS9TO11_MASK,D1   * Isolate the destination register number
00001B4E  163C 0009               1113                  MOVE.B  #9,D3                   * Prepare shift count
00001B52  E669                    1114                  LSR.W   D3,D1                   * Move destination register bits right
00001B54  0242 01C0               1115                  ANDI.W  #%0000000111000000,D2   * Isolate the destination mode
00001B58  E64A                    1116                  LSR.W   #3,D2                  * Move destination mode bits right
00001B5A  8242                    1117                  OR.W    D2,D1
00001B5C  1A01                    1118                  MOVE.B  D1,D5                   * Pass destination EA to print subroutine
00001B5E  1206                    1119                  MOVE.B  D6,D1               * Pass source into subroutine
00001B60  4EB9 00001E48           1120                  JSR     CHECK_VALID_EA
00001B66  1205                    1121                  MOVE.B  D5,D1               * Pass destination into subroutine
00001B68  4EB9 00001E48           1122                  JSR     CHECK_VALID_EA
00001B6E  4EB9 00001B76           1123                  JSR     PRINT_EA1
00001B74                          1124                  
00001B74  4E75                    1125                  RTS
00001B76                          1126                  
00001B76                          1127  PRINT_EA1
00001B76  1806                    1128                  MOVE.B  D6,D4
00001B78  4EB9 00001E8C           1129                  JSR     PRINT_EA                    * PRINT SOURCE EA
00001B7E                          1130                          
00001B7E  0806 0006               1131                  BTST    #6,D6                       * CHECKING IF HAS DEST. EA
00001B82  6700 0330               1132                  BEQ     PRINT_INSTRUCTION_RETURN    * ONLY ONE EA
00001B86                          1133                          
00001B86  4EB9 00002168           1134                  JSR     PRINT_COMMA
00001B8C  1805                    1135                  MOVE.B  D5,D4
00001B8E  4EB9 00001E8C           1136                  JSR     PRINT_EA                    * PRINT DEST. EA
00001B94  4EB9 00002194           1137                  JSR     PRINT_NEWLINE
00001B9A  4E75                    1138                  RTS
00001B9C                          1139  PRINT_EA2
00001B9C  4EB9 000021A8           1140       JSR         PRINT_HASH_SIGN         * #
00001BA2  1206                    1141       MOVE.B      D6,D1                   * PRINT DECIMAL
00001BA4  7003                    1142       MOVE.L      #3,D0
00001BA6  4E4F                    1143       TRAP        #15
00001BA8  4EB9 00002168           1144       JSR         PRINT_COMMA             * ,
00001BAE                          1145                          
00001BAE  1805                    1146       MOVE.B      D5,D4
00001BB0  4EB9 00001E8C           1147       JSR         PRINT_EA                * PRINT THE REGISTER
00001BB6  4EB9 00002194           1148       JSR         PRINT_NEWLINE
00001BBC  4E75                    1149       RTS                
00001BBE                          1150  
00001BBE                          1151  *should be for the following opcodes- MOVEA, ADD, SUB, AND, OR 
00001BBE  3212                    1152  EA_GROUP1     MOVE.W  (A2),D1                 * Prepare to capture register field
00001BC0  3412                    1153          MOVE.W  (A2),D2                 * Prepare to capture EA field
00001BC2  0201 003F               1154          ANDI.B  #BITS0TO5_MASK,D1       * Isolate the source EA bits
00001BC6                          1155          
00001BC6  0242 0E00               1156          ANDI.W  #BITS9TO11_MASK,D2      * Isolate the source EA bits
00001BCA  163C 0009               1157          MOVE.B  #9,D3                   * Prepare shift count
00001BCE  E66A                    1158          LSR.W   D3,D2                   * Move register bits right
00001BD0  0202 00C7               1159          ANDI.B  #%11000111,D2           * Set EA mode
00001BD4  3612                    1160          MOVE.W  (A2),D3
00001BD6  0803 0008               1161          BTST    #8,D3                   * Check opmode
00001BDA  6700 000A               1162          BEQ     EA1_MODE_ZERO           * Check opmode
00001BDE                          1163          
00001BDE  3A01                    1164  EA1_MODE_ONE    MOVE.W  D1,D5           * Set EA as destination
00001BE0  3C02                    1165                  MOVE.W  D2,D6           * Set register as source
00001BE2  6000 0006               1166                  BRA EA1_END             * Complete subroutine
00001BE6                          1167          
00001BE6  3C01                    1168  EA1_MODE_ZERO   MOVE.W  D1,D6           * Set EA as source
00001BE8  3A02                    1169                  MOVE.W  D2,D5           * Set register as destination
00001BEA                          1170  
00001BEA  0006 00C0               1171  EA1_END         ORI.B   #BITS7TO8_MASK,D6       * Populate the S and D bits
00001BEE  1206                    1172                  MOVE.B  D6,D1               * Pass source into subroutine
00001BF0  4EB9 00001E48           1173                  JSR     CHECK_VALID_EA
00001BF6  1205                    1174                  MOVE.B  D5,D1               * Pass destination into subroutine
00001BF8  4EB9 00001E48           1175                  JSR     CHECK_VALID_EA
00001BFE  4EB8 1B76               1176                  JSR     PRINT_EA1
00001C02                          1177  
00001C02  4E75                    1178                  RTS
00001C04                          1179  *should be for opcode LSL LSR ASL ASR ROL ROR but for register shifts
00001C04  3C12                    1180  EA_GROUP2             MOVE.W  (A2),D6         * Prepare to capture source EA
00001C06  0246 0E00               1181                  ANDI.W  #BITS9TO11_MASK,D6      * Isolate the source EA bits
00001C0A  163C 0009               1182                  MOVE.B  #9,D3                   * Prepare shift count
00001C0E  E66E                    1183                  LSR.W   D3,D6                   * Move register bits right
00001C10  3612                    1184                  MOVE.W  (A2),D3
00001C12  0803 0005               1185                  BTST    #5,D3           * Check whether shift count is immediate
00001C16  6700 000A               1186                  BEQ     EA2_IMMEDIATE
00001C1A                          1187   
00001C1A  0006 00C0               1188  EA2_REGISTER    ORI.B   #%11000000,D6   * Set S and D bits
00001C1E  6000 000A               1189                  BRA     EA2_END         * Complete subroutine
00001C22                          1190                  
00001C22  1E3C 000A               1191  EA2_IMMEDIATE   MOVE.B  #10,D7          * Prepare to pass immediate data to print subroutine
00001C26  4EB8 1B26               1192                  JSR     FORMAT_IMMEDIATE_DATA
00001C2A                          1193                  
00001C2A  3A12                    1194  EA2_END         MOVE.W  (A2),D5         * Prepare to capture destination EA
00001C2C  CA3C 0007               1195                  AND.B   #%00000111,D5
00001C30  1206                    1196                  MOVE.B  D6,D1               * Pass source into subroutine
00001C32  4EB9 00001E48           1197                  JSR     CHECK_VALID_EA
00001C38  1205                    1198                  MOVE.B  D5,D1               * Pass destination into subroutine
00001C3A  4EB9 00001E48           1199                  JSR     CHECK_VALID_EA
00001C40  4EB8 1B9C               1200                  JSR     PRINT_EA2
00001C44  4E75                    1201                  RTS   
00001C46                          1202  
00001C46                          1203  
00001C46                          1204  *should be for opcode LSL LSR ASL ASR ROL ROR but for register shifts
00001C46  3C12                    1205  EA_GROUP3     MOVE.W  (A2),D6
00001C48  0206 003F               1206          ANDI.B  #BITS0TO5_MASK,D6       * Isolate the source EA bits
00001C4C  0006 0080               1207          ORI.B   #%10000000,D6
00001C50  1206                    1208          MOVE.B  D6,D1               * Pass source into subroutine
00001C52  4EB9 00001E48           1209          JSR     CHECK_VALID_EA
00001C58  4EB8 1B9C               1210          JSR     PRINT_EA2
00001C5C  4E75                    1211          RTS
00001C5E                          1212  
00001C5E                          1213  *should be for LEA and ADDA(SHOULD WORK BETTER THEN EA GROUP 1)
00001C5E  3212                    1214  EA_GROUP4     MOVE.W  (A2),D1         
00001C60  0201 003F               1215          ANDI.B  #BITS0TO5_MASK,D1       * Isolate the source EA bits
00001C64  0001 00C0               1216          ORI.B   #BITS7TO8_MASK,D1       * Populate the S and D bits
00001C68  1C01                    1217          MOVE.B  D1,D6                   * Pass source EA to print subroutine
00001C6A  3212                    1218          MOVE.W  (A2),D1         
00001C6C                          1219          
00001C6C  0241 0E00               1220          ANDI.W  #BITS9TO11_MASK,D1   * Isolate the destination register number
00001C70  143C 0009               1221          MOVE.B  #9,D2                   * Prepare shift count
00001C74  E469                    1222          LSR.W   D2,D1                   * Move register bits right
00001C76  0201 00CF               1223          ANDI.B  #%11001111,D1           * Set destination mode
00001C7A  0001 0008               1224          ORI.B   #%00001000,D1           * Set destination mode
00001C7E  1A01                    1225          MOVE.B  D1,D5                   * Pass destination EA to print subroutine
00001C80  1206                    1226          MOVE.B  D6,D1               * Pass source into subroutine
00001C82  4EB9 00001E48           1227          JSR     CHECK_VALID_EA
00001C88  1205                    1228          MOVE.B  D5,D1               * Pass destination into subroutine
00001C8A  4EB9 00001E48           1229          JSR     CHECK_VALID_EA
00001C90  4EB8 1B9C               1230          JSR     PRINT_EA2
00001C94  4E75                    1231          RTS
00001C96                          1232          
00001C96  3C12                    1233  ADDQ_EA MOVE.W  (A2),D6                 * Prepare source data bits
00001C98  0246 0E00               1234          ANDI.W  #BITS9TO11_MASK,D6      * Isolate source data bits
00001C9C  163C 0009               1235          MOVE.B  #9,D3                   * Prepare shift count
00001CA0  E66E                    1236          LSR.W   D3,D6                  * Move source data bits right            !---
00001CA2  3A12                    1237          MOVE.W  (A2),D5                 * Prepare destination bits
00001CA4  0205 003F               1238          ANDI.B  #BITS0TO5_MASK,D5       * Isolate destination bits
00001CA8  4EB8 1B26               1239          JSR     FORMAT_IMMEDIATE_DATA
00001CAC  1206                    1240          MOVE.B  D6,D1               * Pass source into subroutine
00001CAE  4EB9 00001E48           1241          JSR     CHECK_VALID_EA
00001CB4  1205                    1242          MOVE.B  D5,D1               * Pass destination into subroutine
00001CB6  4EB9 00001E48           1243          JSR     CHECK_VALID_EA
00001CBC  4EB8 1B9C               1244          JSR     PRINT_EA2
00001CC0  4E75                    1245          RTS                                    !---
00001CC2                          1246          
00001CC2  3C12                    1247  MOVEQ_EA    MOVE.W  (A2),D6                 * Prepare source data bits          !---
00001CC4  CC7C 00FF               1248              AND.W   #$00FF,D6                                                   !---
00001CC8  3A12                    1249              MOVE.W  (A2),D5                 * Prepare destination regiter bits
00001CCA  0245 0E00               1250              ANDI.W  #BITS9TO11_MASK,D5      * Isolate destination register bits
00001CCE  163C 0009               1251              MOVE.B  #9,D3                   * Prepare shift count
00001CD2  E66D                    1252              LSR.W   D3,D5                   * Move destination register bits right
00001CD4  1E3C 000A               1253              MOVE.B  #10,D7
00001CD8  1206                    1254              MOVE.B  D6,D1               * Pass source into subroutine
00001CDA  4EB9 00001E48           1255              JSR     CHECK_VALID_EA
00001CE0  1205                    1256              MOVE.B  D5,D1               * Pass destination into subroutine
00001CE2  4EB9 00001E48           1257              JSR     CHECK_VALID_EA
00001CE8  4EB8 1B9C               1258              JSR     PRINT_EA2
00001CEC  4E75                    1259              RTS                                 !---
00001CEE                          1260  
00001CEE                          1261  
00001CEE                          1262  
00001CEE                          1263  
00001CEE  3412                    1264  MOVEM_EA   MOVE.W (A2),D2
00001CF0  0802 000A               1265             BTST    #10, D2
00001CF4  6700 0126               1266             BEQ     Register_to_memory *IF THE DIRCTION BIT IS 0,
00001CF8                          1267             
00001CF8  4E75                    1268              RTS 
00001CFA                          1269            
00001CFA                          1270             
00001CFA                          1271                  
00001CFA                          1272  *ELSE IT IS  memory-to-register transfers
00001CFA                          1273  
00001CFA                          1274  
00001CFA                          1275  
00001CFA                          1276  
00001CFA                          1277     
00001CFA  E68A                    1278  Memory_to_Register LSR.L #3, D2
00001CFC  C43C 0007               1279                     AND.B #$07, D2
00001D00  B43C 0002               1280                     CMP.B #$2,D2
00001D04  6700 0108               1281                     BEQ   MODE_010
00001D08  B43C 0003               1282                     CMP.B #$03, D2
00001D0C  6700 0100               1283                     BEQ   MODE_010  
00001D10  B43C 0007               1284                     CMP.B #$07,D2
00001D14  6700 00F8               1285                     BEQ   MODE_010  
00001D18  4EF9 00001D1E           1286                     JMP   WRONG_INSTRUCTION    
00001D1E                          1287     
00001D1E  1E3C 0005               1288  WRONG_INSTRUCTION            MOVE.B   #5, D7 ; A WRONG INSTRUCTION 'KEY'
00001D22  2C4A                    1289                               MOVEA.L  A2, A6 ;MOVING THE MEMORY ADDRESS INTO A6 WHEN INSTRUCTION IS WRONG 
00001D24  3C12                    1290                               MOVE.W  (A2),D6 ;MOVE MEMORY ADDRESS INTO D6, AND INCREMENT A2 BY WORD
00001D26  4E75                    1291                               RTS 
00001D28                          1292  PRINT_MOVEM         
00001D28                          1293                      
00001D28  0806 0007               1294                      BTST    #7,D6
00001D2C  6700 0012               1295                      BEQ     PRINT_MOVEM_MASK            * PRINT THE REGSTER/S FIRST
00001D30                          1296                      
00001D30  1806                    1297                      MOVE.B  D6,D4
00001D32  4EB9 00001E8C           1298                      JSR     PRINT_EA
00001D38  4EB9 00002168           1299                      JSR     PRINT_COMMA
00001D3E  4E75                    1300                      rts
00001D40                          1301  ALL_REG     REG     D0-D7/A0-A6         ; all registers                     
00001D40  3802                    1302  PRINT_MOVEM_MASK        MOVE.W  D2,D4
00001D42  4EB9 00001D66           1303                          JSR     PRINT_MASK
00001D48  0806 0007               1304                          BTST    #7,D6                       * CHECK DIRCTION
00001D4C  6600 0166               1305                          BNE     PRINT_INSTRUCTION_RETURN
00001D50                          1306                          
00001D50  4EB9 00002168           1307                          JSR     PRINT_COMMA
00001D56  1806                    1308                          MOVE.B  D6,D4
00001D58  4EB9 00001E8C           1309                          JSR     PRINT_EA
00001D5E  4EF9 00002194           1310                          JMP     PRINT_NEWLINE
00001D64  4E75                    1311                          RTS
00001D66                          1312                          
00001D66                          1313  *________________PRINTS THE MASK
00001D66                          1314  *   PARAMETER   D4      THE MASK (WORD)
00001D66                          1315  *               D6      THE DIRECTION (BIT#7)
00001D66                          1316                          
00001D66  48E7 FFFE               1317  PRINT_MASK      MOVEM.L     ALL_REG,-(SP)
00001D6A  1406                    1318                  MOVE.B      D6,D2                   * CHECKING IF IT IS PRE DECREMENT
00001D6C  C43C 0038               1319                  AND.B       #$38,D2
00001D70  B43C 0020               1320                  CMP.B       #$20,D2
00001D74  6600 0026               1321                  BNE         MEM_TO_REG
00001D78                          1322  
00001D78  720F                    1323  REG_TO_MEM          MOVE.L      #15,D1              * START OF FLIPPING THE MASK
00001D7A                          1324                      
00001D7A  B23C 0000               1325  FLIP_DIRECTION      CMP.B       #0,D1
00001D7E  6D00 001A               1326                      BLT         REG_TO_MEMO_OK
00001D82  103C 001F               1327                      MOVE.B      #31,D0
00001D86  9001                    1328                      SUB.B       D1,D0
00001D88  0304                    1329                      BTST        D1,D4
00001D8A  6600 0008               1330                      BNE         FLIP_SET
00001D8E  0184                    1331  FLIP_CLR            BCLR        D0,D4
00001D90  6000 0004               1332                      BRA         FLIP_LOOP_INCR
00001D94  01C4                    1333  FLIP_SET            BSET        D0,D4                    
00001D96  5301                    1334  FLIP_LOOP_INCR      SUB.B   #1,D1
00001D98  60E0                    1335                      BRA     FLIP_DIRECTION 
00001D9A  4844                    1336  REG_TO_MEMO_OK      SWAP    D4
00001D9C                          1337  
00001D9C  163C 0000               1338  MEM_TO_REG          MOVE.B  #0,D3
00001DA0  367C 0000               1339                      MOVE.W  #0,A3
00001DA4  B63C 0010               1340  REG_COUNT           CMP.B   #16,D3
00001DA8  6700 000E               1341                      BEQ     PRINT_MASK_LOOP_START
00001DAC  0704                    1342                      BTST    D3,D4
00001DAE  6700 0004               1343                      BEQ     REG_COUNT_INCR
00001DB2  524B                    1344                      ADD.W   #1,A3
00001DB4  5203                    1345  REG_COUNT_INCR      ADD.B   #1,D3
00001DB6  60EC                    1346                      BRA     REG_COUNT
00001DB8                          1347                      
00001DB8  163C 0000               1348  PRINT_MASK_LOOP_START   MOVE.B      #0,D3
00001DBC                          1349  
00001DBC  B63C 0010               1350  PRINT_MASK_LOOP     CMP.B   #16, D3
00001DC0  6700 0046               1351                      BEQ     PRINT_MASK_RETURN
00001DC4  0704                    1352                      BTST    D3,D4
00001DC6  6600 0006               1353                      BNE     SET_MASK
00001DCA  6000 0036               1354                      BRA     PRINT_MASK_LOOP_INCR
00001DCE  B63C 0007               1355  SET_MASK        CMP.B   #7,D3
00001DD2  6E00 0012               1356                  BGT     A_REG
00001DD6  123C 00D0               1357  D_REG           MOVE.B  #$D0, D1
00001DDA  D203                    1358                  ADD.B   D3,D1
00001DDC  4EB9 000020BA           1359                  JSR     PRINT_REGISTOR
00001DE2  6000 000E               1360                  BRA     PRINT_SLASH
00001DE6  123C 0098               1361  A_REG               MOVE.B  #$98,D1
00001DEA  D203                    1362                      ADD.B   D3,D1
00001DEC  4EB9 000020BA           1363                      JSR     PRINT_REGISTOR
00001DF2  B6FC 0001               1364  PRINT_SLASH             CMP.W   #1,A3
00001DF6  6700 000A               1365                          BEQ     PRINT_MASK_LOOP_INCR
00001DFA  4EB9 000021D0           1366                          JSR     PRINT_FORWARD_SLASH
00001E00  534B                    1367                          SUB.W   #1,A3
00001E02  5203                    1368  PRINT_MASK_LOOP_INCR    ADD.B   #1,D3
00001E04  5301                    1369                          SUB.B   #1,D1
00001E06  60B4                    1370                          BRA     PRINT_MASK_LOOP
00001E08  4CDF 7FFF               1371  PRINT_MASK_RETURN       MOVEM.L     (SP)+, ALL_REG
00001E0C  4E75                    1372                          RTS
00001E0E                          1373             
00001E0E  3412                    1374  MODE_010  MOVE.W    (A2),D2
00001E10  C43C 003F               1375            AND.B     #$3F,D2
00001E14  08C2 0007               1376            BSET      #7,D2 *SET THE DESTINATION INDICATOR
00001E18  1C02                    1377            MOVE.B    D2,D6
00001E1A  4E75                    1378            RTS
00001E1C                          1379  
00001E1C  3412                    1380  Register_to_memory MOVE.W (A2),D2
00001E1E  E68A                    1381                     LSR.L #3, D2
00001E20  C43C 0007               1382                     AND.B #$07, D2
00001E24  B43C 0002               1383                     CMP.B #$2,D2
00001E28  6700 0016               1384                     BEQ   MODE_01_0
00001E2C  B43C 0004               1385                     CMP.B #$04, D2
00001E30  6700 000E               1386                     BEQ   MODE_01_0 
00001E34  B43C 0007               1387                     CMP.B #$07,D2
00001E38  6700 0006               1388                     BEQ   MODE_01_0 
00001E3C  4EF8 1D1E               1389                     JMP   WRONG_INSTRUCTION
00001E40                          1390                     
00001E40                          1391  
00001E40  3C12                    1392  MODE_01_0       MOVE.W  (A2),D6
00001E42  0206 003F               1393                  ANDI.B  #$3F,D6
00001E46  4E75                    1394                  RTS
00001E48                          1395           
00001E48  1001                    1396  CHECK_VALID_EA  MOVE.B  D1,D0
00001E4A  0200 0038               1397                  ANDI.B  #%111000,D0
00001E4E  E648                    1398                  LSR     #3,D0
00001E50  B03C 0005               1399                  CMP.B   #%00000101,D0
00001E54  6700 002C               1400                  BEQ     INVALID_EA
00001E58  B03C 0006               1401                  CMP.B   #%00000110,D0
00001E5C  6700 0024               1402                  BEQ     INVALID_EA
00001E60  B03C 0007               1403                  CMP.B   #%00000111,D0
00001E64  6700 0004               1404                  BEQ     VALID_EA_PC
00001E68  4E75                    1405                  RTS
00001E6A                          1406                  
00001E6A                          1407                  
00001E6A  1001                    1408  VALID_EA_PC     MOVE.B  D1,D0
00001E6C  0200 0007               1409                  ANDI.B  #%000111,D0
00001E70  B03C 0010               1410                  CMP.B   #%00010000,D0
00001E74  6700 000C               1411                  BEQ     INVALID_EA
00001E78  B03C 0018               1412                  CMP.B   #%00011000,D0
00001E7C  6700 0004               1413                  BEQ     INVALID_EA
00001E80  4E75                    1414                  RTS
00001E82                          1415                  
00001E82  4EB8 1D1E               1416  INVALID_EA      JSR     WRONG_INSTRUCTION
00001E86  3A7C 0005               1417                  MOVE.W  #5, A5
00001E8A  4E75                    1418                  RTS
00001E8C                          1419                  
00001E8C  48E7 FFDE               1420  PRINT_EA        MOVEM.L A0-A1/A3-A6/D0-D7,-(SP)
00001E90  163C 0038               1421                  MOVE.B  #$38,D3
00001E94  C604                    1422                  AND.B   D4,D3
00001E96  C83C 0007               1423                  AND.B   #$7, D4
00001E9A                          1424                  
00001E9A  B63C 0000               1425                  CMP.B   #$0, D3
00001E9E  6600 0078               1426                  BNE     CHECK_EA_AR
00001EA2  0604 00D0               1427                  ADD.B   #$D0, D4
00001EA6  4281                    1428                  CLR.L   D1
00001EA8  1204                    1429                  MOVE.B  D4, D1
00001EAA  4EB9 000020BA           1430                  JSR     PRINT_REGISTOR              * DATA REG
00001EB0  6000 0178               1431                  BRA     PRINT_EA_RETURN
00001EB4  4EB9 00002194           1432  PRINT_INSTRUCTION_RETURN    JSR         PRINT_NEWLINE
00001EBA  4CDF 7BFF               1433                              MOVEM.L     (SP)+,A0-A1/A3-A6/D0-D7
00001EBE                          1434  
00001EBE                          1435  PRINT_BRA       
00001EBE  3C12                    1436                  move.W      (A2),D6
00001EC0                          1437                  
00001EC0                          1438                                 
00001EC0  240A                    1439                  MOVE.L      A2,D2           * MOVING THE ADDRESS
00001EC2  4281                    1440                  CLR.L       D1
00001EC4                          1441                  
00001EC4  BC3C 0000               1442                  CMP.B       #$00,D6                 * WORD DISPLACEMENT
00001EC8  6700 001E               1443                  BEQ         WORD_DISPLACEMENT
00001ECC  BC3C 00FF               1444                  CMP.B       #$FF,D6                 * LONG DISPLACEMENT
00001ED0  6700 002A               1445                  BEQ         LONG_DISPLACEMENT
00001ED4                          1446                  
00001ED4  1206                    1447                  MOVE.B      D6,D1                   * BYTE DISPLACEMENT
00001ED6  0801 0007               1448                  BTST        #7,D1                
00001EDA  6700 0022               1449                  BEQ         PRINT_BRA_RETURN        * POSITIVE DISPLACEMENT
00001EDE                          1450                  
00001EDE  4601                    1451                  NOT.B       D1                      * 1'S COMPLEMENT    (ON BYTE)
00001EE0  5241                    1452                  ADD.W       #$1,D1                   * -> 2'S COMPLEMENT
00001EE2  4481                    1453                  NEG.L       D1
00001EE4  6000 0018               1454                  BRA         PRINT_BRA_RETURN
00001EE8                          1455  
00001EE8  321A                    1456  WORD_DISPLACEMENT       MOVE.W      (A2)+,D1         * READ THE DISPLACEMENT (WORD)
00001EEA                          1457              
00001EEA  0801 000F               1458                          BTST    #15,D1
00001EEE  6700 000E               1459                          BEQ         PRINT_BRA_RETURN        * POSITIVE DISPLACEMENT
00001EF2                          1460                          
00001EF2  4641                    1461                          NOT.W       D1                      * 1'S COMPLEMENT    (ON WORD)
00001EF4  5281                    1462                          ADD.L       #$1,D1                   * -> 2'S COMPLEMENT
00001EF6  4481                    1463                          NEG.L       D1
00001EF8  6000 0004               1464                          BRA         PRINT_BRA_RETURN
00001EFC                          1465  
00001EFC  221A                    1466  LONG_DISPLACEMENT           MOVE.L      (A2)+,D1         * READ THE DISPLACEMENT (LONG)
00001EFE                          1467      
00001EFE  4EB9 000021BC           1468  PRINT_BRA_RETURN    JSR     PRINT_DOLLAR
00001F04  D282                    1469                      ADD.L   D2,D1
00001F06  2A01                    1470                      MOVE.L  D1,D5
00001F08  7604                    1471                      MOVE.L  #4,D3
00001F0A  4EB9 00002052           1472                      JSR     PRINT_HEX
00001F10  4EB9 00002194           1473                      JSR     PRINT_NEWLINE                            
00001F16  4E75                    1474                      RTS                         * RETURN TO THE CALLER
00001F18                          1475  
00001F18  B63C 0008               1476  CHECK_EA_AR         CMP.B   #$8, D3
00001F1C  6600 0014               1477                      BNE     CHECK_EA_INDIRECT
00001F20  0604 00A0               1478                      ADD.B   #$A0, D4
00001F24  4281                    1479                      CLR.L   D1
00001F26  1204                    1480                      MOVE.B  D4, D1
00001F28  4EB9 000020BA           1481                      JSR     PRINT_REGISTOR          * ADDRESS REG
00001F2E  6000 00FA               1482                      BRA     PRINT_EA_RETURN
00001F32                          1483                      
00001F32  B63C 0010               1484  CHECK_EA_INDIRECT       CMP.B   #$10, D3
00001F36  6600 0020               1485                          BNE     CHECK_EA_POST
00001F3A  4EB9 0000210E           1486                          JSR     PRINT_OPEN_PARENTHESIS      * (
00001F40  0604 00A0               1487                          ADD.B   #$A0, D4
00001F44  4281                    1488                          CLR.L   D1
00001F46  1204                    1489                          MOVE.B  D4, D1
00001F48  4EB9 000020BA           1490                          JSR     PRINT_REGISTOR              * ADDRESS REG
00001F4E  4EB9 00002122           1491                          JSR     PRINT_CLOSED_PARENTHESIS    * )
00001F54  6000 00D4               1492                          BRA     PRINT_EA_RETURN
00001F58                          1493                          
00001F58  B63C 0018               1494  CHECK_EA_POST   CMP.B   #$18,D3
00001F5C  6600 0026               1495                  BNE     CHECK_EA_PRE
00001F60  4EB9 0000210E           1496                  JSR     PRINT_OPEN_PARENTHESIS      * (
00001F66  0604 00A0               1497                  ADD.B   #$A0, D4
00001F6A  4281                    1498                  CLR.L   D1
00001F6C  1204                    1499                  MOVE.B  D4, D1
00001F6E  4EB9 000020BA           1500                  JSR     PRINT_REGISTOR              * ADDRESS REG
00001F74  4EB9 00002122           1501                  JSR     PRINT_CLOSED_PARENTHESIS    * )
00001F7A  4EB9 0000213A           1502                  JSR     PRINT_PLUS                  * +
00001F80  6000 00A8               1503                  BRA     PRINT_EA_RETURN
00001F84                          1504  
00001F84  B63C 0020               1505  CHECK_EA_PRE        CMP.B   #$20,D3
00001F88  6600 0026               1506                      BNE     CHECK_EA_AB_W
00001F8C  4EB9 0000214E           1507                      JSR     PRINT_MINUS                 * -
00001F92  4EB9 0000210E           1508                      JSR     PRINT_OPEN_PARENTHESIS      * (
00001F98  0604 00A0               1509                      ADD.B   #$A0, D4
00001F9C  4281                    1510                      CLR.L   D1
00001F9E  1204                    1511                      MOVE.B  D4, D1
00001FA0  4EB9 000020BA           1512                      JSR     PRINT_REGISTOR              * ADDRESS REG
00001FA6  4EB9 00002122           1513                      JSR     PRINT_CLOSED_PARENTHESIS    * )
00001FAC  6000 007C               1514                      BRA     PRINT_EA_RETURN
00001FB0                          1515  
00001FB0  D604                    1516  CHECK_EA_AB_W           ADD.B   D4,D3
00001FB2  B63C 0038               1517                          CMP.B   #$38,D3     
00001FB6  6600 0018               1518                          BNE     CHECK_EA_AB_L
00001FBA  4EB9 000021BC           1519                          JSR     PRINT_DOLLAR        * $
00001FC0  3A1A                    1520                          MOVE.W  (A2)+,D5            * PRINTING WORD ABSOLUTE
00001FC2  163C 0002               1521                          MOVE.B  #2,D3
00001FC6  4EB9 00002052           1522                          JSR     PRINT_HEX
00001FCC  6000 005C               1523                          BRA     PRINT_EA_RETURN
00001FD0                          1524                          
00001FD0  B63C 0039               1525  CHECK_EA_AB_L       CMP.B   #$39, D3
00001FD4  6600 0018               1526                      BNE     CHECK_EA_IMM
00001FD8  4EB9 000021BC           1527                      JSR     PRINT_DOLLAR        * $
00001FDE  2A1A                    1528                      MOVE.L  (A2)+,D5            * PRINTING LONG ABSOLUTE
00001FE0  163C 0004               1529                      MOVE.B  #4,D3
00001FE4  4EB9 00002052           1530                      JSR     PRINT_HEX
00001FEA  6000 003E               1531                      BRA     PRINT_EA_RETURN
00001FEE                          1532                      
00001FEE  BE3C 0004               1533  CHECK_EA_IMM        CMP.B   #4,D7
00001FF2  6600 001E               1534                      BNE     READ_WORD_IMM
00001FF6  4EB9 000021A8           1535                      JSR     PRINT_HASH_SIGN     * #
00001FFC  4EB9 000021BC           1536                      JSR     PRINT_DOLLAR        * $
00002002  2A1A                    1537                      MOVE.L  (A2)+,D5            * PRINTING LONG IMMIDIATE
00002004  163C 0004               1538                      MOVE.B  #4,D3
00002008  4EB9 00002052           1539                      JSR     PRINT_HEX
0000200E  6000 001A               1540                      BRA     PRINT_EA_RETURN
00002012                          1541                      
00002012  4EB9 000021A8           1542  READ_WORD_IMM       JSR     PRINT_HASH_SIGN     * #
00002018  4EB9 000021BC           1543                      JSR     PRINT_DOLLAR        * $
0000201E  3A1A                    1544                      MOVE.W  (A2)+,D5            * PRINTING WORD/BYTE IMMIDIATE        
00002020  163C 0002               1545                      MOVE.B  #2,D3
00002024  4EB9 00002052           1546                      JSR     PRINT_HEX
0000202A                          1547  
0000202A  4CDF 7BFF               1548  PRINT_EA_RETURN     MOVEM.L     (SP)+,A0-A1/A3-A6/D0-D7   * THE RETURN FOR THE EA PRINTER
0000202E  4E75                    1549                      RTS
00002030                          1550  ALL_REG     REG     D0-D7/A0-A6         ; all registers
00002030                          1551  PRINT_BUFFER    DS.B    10
0000203A= 30 30 30 30 30 30 ...   1552  IPUT_BUFFER_EX  DC.B    '00000000'
00002042                          1553  INPUT_BUFFER    DS.B    15                    
00002052  48E7 FFFE               1554  PRINT_HEX       MOVEM.L     ALL_REG,-(SP)
00002056  43F8 2030               1555                  LEA         PRINT_BUFFER, A1        *SETTING UP PRINT BUFFER
0000205A  D3FC 0000000A           1556                  ADD.L       #10,A1
00002060  133C 0000               1557                  MOVE.B      #0,-(A1)                *NULL FOR PRINTER TO STOP
00002064  6000 000E               1558                  BRA         POPULATE_BUFFER
00002068                          1559                  
00002068  103C 000E               1560  PRINT_HEX_RETURN    MOVE.B      #14,D0
0000206C  4E4F                    1561                      TRAP        #15
0000206E  4CDF 7FFF               1562                      MOVEM.L     (SP)+,ALL_REG
00002072  4E75                    1563                      RTS
00002074                          1564                 
00002074  B63C 0000               1565  POPULATE_BUFFER     CMP.B       #0,D3
00002078  67EE                    1566                      BEQ         PRINT_HEX_RETURN
0000207A  183C 000F               1567                      MOVE.B      #$0F,D4
0000207E  C805                    1568                      AND.B       D5,D4
00002080  E81D                    1569                      ROR.B       #4,D5
00002082  4EB9 0000209E           1570                      JSR         HEX_TO_ASCII
00002088  1304                    1571                      MOVE.B      D4,-(A1)
0000208A  1805                    1572                      MOVE.B      D5,D4
0000208C  C83C 000F               1573                      AND.B       #$0F,D4
00002090  4EB9 0000209E           1574                      JSR         HEX_TO_ASCII
00002096  1304                    1575                      MOVE.B      D4,-(A1)
00002098  E08D                    1576                      LSR.L       #8,D5
0000209A  5303                    1577                      SUB.B       #1,D3
0000209C  60D6                    1578                      BRA         POPULATE_BUFFER
0000209E                          1579  
0000209E  48E7 E7FE               1580  HEX_TO_ASCII            MOVEM.L     A0-A6/D0-D2/D5-D7,-(SP)
000020A2  B83C 0009               1581                          CMP.B       #9,D4
000020A6  6F00 000C               1582                          BLE         NUMBER_TO_ASCII
000020AA  0604 0037               1583                          ADD.B       #$37,D4
000020AE  4CDF 7FE7               1584  HEX_TO_ASCII_RETURN     MOVEM.L   (SP)+,A0-A6/D0-D2/D5-D7
000020B2  4E75                    1585                          RTS
000020B4                          1586                  
000020B4  0604 0030               1587  NUMBER_TO_ASCII     ADD.B   #$30,D4
000020B8  60F4                    1588                      BRA     HEX_TO_ASCII_RETURN                    
000020BA                          1589                      
000020BA  48E7 FFFE               1590  PRINT_REGISTOR      MOVEM.L     ALL_REG,-(SP)       * keeping old value
000020BE  3F3C 0000               1591                      MOVE.W      #00,-(SP)           *for printing purpose
000020C2  343C 00F0               1592                      MOVE.W      #$f0,D2             *manipulating each digit
000020C6  C441                    1593                      AND.W       D1,D2
000020C8  E842                    1594                      ASR.W       #4,D2
000020CA  4EB9 000020F0           1595                      JSR         TO_STRING           * converts to the string ASCII val
000020D0  E142                    1596                      ASL.W       #8,D2
000020D2                          1597                      
000020D2  C27C 000F               1598                      AND.W       #$F,D1              * the last digit
000020D6  1401                    1599                      MOVE.B      D1,D2               
000020D8  4EB9 000020F0           1600                      JSR         TO_STRING
000020DE  3F02                    1601                      MOVE.W      D2,-(SP)            * puting on the stack to print
000020E0                          1602                      
000020E0  224F                    1603                      MOVE.L      SP,A1               * printing
000020E2  103C 000E               1604                      MOVE.B      #14,D0
000020E6  4E4F                    1605                      TRAP        #15
000020E8  2A1F                    1606                      MOVE.L      (SP)+, D5           * Adjesting the sp
000020EA                          1607  
000020EA  4CDF 7FFF               1608  PRINT_REGISTOR_RETURN           MOVEM.L     (SP)+,ALL_REG   *returning the original val
000020EE  4E75                    1609                                  RTS
000020F0                          1610                                  
000020F0  B43C 0009               1611  TO_STRING   CMP.B   #9,D2               * check if digit or leter
000020F4  6E00 0008               1612              BGT     LETTERS     
000020F8  0602 0030               1613              ADD.B   #$30,D2             * offseting digit
000020FC  4E75                    1614              RTS
000020FE  0602 0037               1615  LETTERS     ADD.B   #$37,D2             * offseting leter
00002102  4E75                    1616              RTS   
00002104                          1617  
00002104                          1618  *________________________________________________________________________________________
00002104                          1619  
00002104                          1620  
00002104                          1621  *________________ PRINT OPEN PARENTHESIS ________________________________________
00002104                          1622          *PARAMENTER     NO PARAMETER NEEDED
00002104= 28 00                   1623  OPEN_PAR_TAG        DC.B    '(',0  
00002106= 29 00                   1624  CLOSED_PAR_TAG      DC.B    ')',0
00002108= 23 00                   1625  HASH_SIGN_TAG       DC.B    '#',0
0000210A= 24 00                   1626  DOLLAR_TAG          DC.B    '$',0
0000210C= 2F 00                   1627  FORWARD_SLASH_TAG   DC.B    '/',0      
0000210E  48E7 FFFE               1628  PRINT_OPEN_PARENTHESIS  MOVEM.L     ALL_REG, -(SP)
00002112  43F8 2104               1629                          LEA         OPEN_PAR_TAG, A1
00002116  103C 000E               1630                          MOVE.B      #14,D0
0000211A  4E4F                    1631                          TRAP        #15
0000211C  4CDF 7FFF               1632                          MOVEM.L     (SP)+,ALL_REG
00002120  4E75                    1633                          RTS
00002122                          1634  *_________________________________________________________________________________
00002122                          1635  
00002122                          1636  *________________ PRINT CLOSED PARENTHESIS ________________________________________
00002122                          1637          *PARAMENTER     NO PARAMETER NEEDED
00002122                          1638          
00002122  48E7 FFFE               1639  PRINT_CLOSED_PARENTHESIS    MOVEM.L     ALL_REG, -(SP)
00002126  43F8 2106               1640                              LEA         CLOSED_PAR_TAG, A1
0000212A  103C 000E               1641                              MOVE.B      #14,D0
0000212E  4E4F                    1642                              TRAP        #15
00002130  4CDF 7FFF               1643                              MOVEM.L     (SP)+,ALL_REG
00002134  4E75                    1644                              RTS
00002136                          1645  *__________________________________________________________________________________
00002136                          1646  
00002136                          1647  *________________ PRINT PLUS SIGN _________________________________________________
00002136                          1648          *PARAMENTER     NO PARAMETER NEEDED
00002136= 2B 00                   1649  PLUS_TAG            DC.B    '+',0
00002138= 2D 00                   1650  MINUS_TAG           DC.B    '-',0        
0000213A  48E7 FFFE               1651  PRINT_PLUS      MOVEM.L     ALL_REG, -(SP)
0000213E  43F8 2136               1652                  LEA         PLUS_TAG, A1
00002142  103C 000E               1653                  MOVE.B      #14,D0
00002146  4E4F                    1654                  TRAP        #15
00002148  4CDF 7FFF               1655                  MOVEM.L     (SP)+,ALL_REG
0000214C  4E75                    1656                  RTS
0000214E                          1657  *_________________________________________________________________________________
0000214E                          1658  
0000214E                          1659  *________________ PRINT MINUS SIGN _______________________________________________
0000214E                          1660          *PARAMENTER     NO PARAMETER NEEDED
0000214E                          1661          
0000214E  48E7 FFFE               1662  PRINT_MINUS         MOVEM.L     ALL_REG, -(SP)
00002152  43F8 2138               1663                      LEA         MINUS_TAG, A1
00002156  103C 000E               1664                      MOVE.B      #14,D0
0000215A  4E4F                    1665                      TRAP        #15
0000215C  4CDF 7FFF               1666                      MOVEM.L     (SP)+,ALL_REG
00002160  4E75                    1667                      RTS
00002162                          1668  *_________________________________________________________________________________
00002162                          1669  
00002162                          1670  *________________ PRINT COMMA ____________________________________________________
00002162                          1671          *PARAMENTER     NO PARAMETER NEEDED
00002162= 09 00                   1672  TAB_TAG         DC.B    $9,0
00002164= 20 00                   1673  SPACE_TAG       DC.B    ' ',0
00002166= 2C 00                   1674  COMMA_TAG       DC.B    ',',0        
00002168  48E7 FFFE               1675  PRINT_COMMA         MOVEM.L     ALL_REG,-(SP)
0000216C  43F8 2166               1676                      LEA         COMMA_TAG, A1
00002170  103C 000E               1677                      MOVE.B      #14,D0
00002174  4E4F                    1678                      TRAP        #15
00002176  4CDF 7FFF               1679                      MOVEM.L     (SP)+,ALL_REG
0000217A  4E75                    1680                      RTS
0000217C                          1681  *_________________________________________________________________________________
0000217C                          1682  
0000217C                          1683  *________________ PRINT TAB ______________________________________________________
0000217C                          1684          *PARAMENTER     NO PARAMETER NEEDED
0000217C                          1685          
0000217C  48E7 FFFE               1686  PRINT_TAB       MOVEM.L     ALL_REG,-(SP)
00002180  43F8 2162               1687                  LEA         TAB_TAG, A1
00002184  103C 000E               1688                  MOVE.B      #14,D0
00002188  4E4F                    1689                  TRAP        #15
0000218A  4CDF 7FFF               1690                  MOVEM.L     (SP)+,ALL_REG
0000218E  4E75                    1691                  RTS
00002190                          1692  *_________________________________________________________________________________
00002190                          1693  
00002190                          1694  
00002190                          1695  *_______________    PRINT NEWLINE   ________________________________________________
00002190                          1696          *PARAMETER NO PARAMETER NEEDED
00002190= 0D 0A 00                1697  NEWLINE_TAG         DC.B    CR,LF,0        
00002194  48E7 FFFE               1698  PRINT_NEWLINE       MOVEM.L     ALL_REG,-(SP)
00002198  43F8 2190               1699                      LEA         NEWLINE_TAG, A1
0000219C  103C 000E               1700                      MOVE.B      #14,D0
000021A0  4E4F                    1701                      TRAP        #15
000021A2  4CDF 7FFF               1702                      MOVEM.L     (SP)+,ALL_REG
000021A6  4E75                    1703                      RTS
000021A8                          1704  
000021A8                          1705  *___________________________________________________________________________________
000021A8                          1706  
000021A8                          1707  
000021A8                          1708  *_______________    PRINT HASH SIGN   ________________________________________________
000021A8                          1709          *PARAMETER NO PARAMETER NEEDED
000021A8                          1710          
000021A8  48E7 FFFE               1711  PRINT_HASH_SIGN     MOVEM.L     ALL_REG,-(SP)
000021AC  43F8 2108               1712                      LEA         HASH_SIGN_TAG, A1
000021B0  103C 000E               1713                      MOVE.B      #14,D0
000021B4  4E4F                    1714                      TRAP        #15
000021B6  4CDF 7FFF               1715                      MOVEM.L     (SP)+,ALL_REG
000021BA  4E75                    1716                      RTS
000021BC                          1717  
000021BC                          1718  *___________________________________________________________________________________
000021BC                          1719  
000021BC                          1720  
000021BC                          1721  
000021BC                          1722  *_______________    PRINT DOLLAR   ________________________________________________
000021BC                          1723          *PARAMETER NO PARAMETER NEEDED
000021BC                          1724          
000021BC  48E7 FFFE               1725  PRINT_DOLLAR        MOVEM.L     ALL_REG,-(SP)
000021C0  43F8 210A               1726                      LEA         DOLLAR_TAG, A1
000021C4  103C 000E               1727                      MOVE.B      #14,D0
000021C8  4E4F                    1728                      TRAP        #15
000021CA  4CDF 7FFF               1729                      MOVEM.L     (SP)+,ALL_REG
000021CE  4E75                    1730                      RTS
000021D0                          1731  
000021D0                          1732  *___________________________________________________________________________________
000021D0                          1733  
000021D0                          1734  
000021D0                          1735  
000021D0                          1736  *_______________    PRINT FORWARD SLASH   ________________________________________________
000021D0                          1737          *PARAMETER NO PARAMETER NEEDED
000021D0                          1738          
000021D0  48E7 FFFE               1739  PRINT_FORWARD_SLASH     MOVEM.L     ALL_REG,-(SP)
000021D4  43F8 210C               1740                          LEA         FORWARD_SLASH_TAG, A1
000021D8  103C 000E               1741                          MOVE.B      #14,D0
000021DC  4E4F                    1742                          TRAP        #15
000021DE  4CDF 7FFF               1743                          MOVEM.L     (SP)+,ALL_REG
000021E2  4E75                    1744                          RTS
000021E4                          1745  
000021E4                          1746  
000021E4                          1747     
000021E4                          1748  *********************************************************************
000021E4                          1749  *Subroutine: OUTPUT
000021E4                          1750  *What it does: Outputs parts of opword, moves to new screen if needed
000021E4                          1751  *Registers: Uses register A1, D0,
000021E4                          1752  *A1: Used to store messages and single char
000021E4                          1753  *Paramemeters: A1, A2
000021E4                          1754  *A1: Stores what should be used
000021E4                          1755  *********************************************************************  
000021E4                          1756  
000021E4                          1757       OUTPUT:
000021E4                          1758       
000021E4  0C39 0001 000025C7      1759       CMP.B  #1,(OutputType)
000021EC  6700 0026               1760       BEQ    outputOpcode
000021F0  0C39 0002 000025C7      1761       CMP.B  #2,(OutputType)
000021F8  6700 0066               1762       BEQ    OutputSize
000021FC  0C39 0003 000025C7      1763       CMP.B  #3,(OutputType)
00002204  6700 0062               1764       BEQ    OutputData
00002208  0C39 0004 000025C7      1765       CMP.B  #4,(OutputType)
00002210  6700 00AC               1766       BEQ    OutputAddress
00002214                          1767       
00002214                          1768  outputOpcode    
00002214  0C39 001E 000025C6      1769       CMP.B  #30, (LineCounter)      Console holds 32 lines total, 30 used for dissassembly data
0000221C  6C00 0010               1770       BGE    outputOpcodeNewScreen
00002220                          1771       
00002220  103C 000E               1772       MOVE.B #14,D0
00002224  4E4F                    1773       TRAP   #15
00002226                          1774       
00002226  5239 000025C6           1775       ADD.B  #1,(LineCounter)
0000222C                          1776       
0000222C  4E75                    1777       RTS
0000222E                          1778       
0000222E                          1779       
0000222E                          1780  outputOpcodeNewScreen
0000222E  2F09                    1781       MOVE.L A1,-(SP)                Storing last message to be used later
00002230                          1782       
00002230  43F9 0000259C           1783       LEA    OUTPUTNEWSCREEN,A1         
00002236  103C 000E               1784       MOVE.B #14,D0
0000223A  4E4F                    1785       TRAP   #15
0000223C                          1786       
0000223C  43F9 00008008           1787       LEA    userInputStored,A1         Pauses program to show screen full of data
00002242  103C 0002               1788       MOVE.B #2,D0
00002246  4E4F                    1789       TRAP   #15
00002248                          1790       
00002248  13FC 0000 000025C6      1791       MOVE.B #0,(LineCounter)        Sets LineCounter to 0 to reset screen
00002250                          1792       
00002250  225F                    1793       MOVE.L (SP)+,A1                Retriving message to be used
00002252                          1794       
00002252  103C 000E               1795       MOVE.B #14,D0                  Outputting decoded message
00002256  4E4F                    1796       TRAP   #15
00002258                          1797       
00002258  5239 000025C6           1798       ADD.B  #1,(LineCounter)        Add to line counter for new screen
0000225E                          1799       
0000225E  4E75                    1800       RTS
00002260                          1801       
00002260                          1802  outputSize
00002260  103C 000E               1803      MOVE.B  #14,D0
00002264  4E4F                    1804      TRAP    #15
00002266  4E75                    1805      RTS
00002268                          1806  outputData
00002268  267C 00000800           1807      MOVE.L   #$800,A3
0000226E  3692                    1808      MOVE.W  (A2),(A3)
00002270  2F06                    1809      MOVE.L  D6,-(SP)
00002272  103C 0000               1810      MOVE.B  #0,D0
00002276  43F9 00009005           1811      LEA     addressOutput,A1
0000227C                          1812  
0000227C                          1813  outputDataLoop
0000227C                          1814  *check if loop has run 4 times
0000227C  B03C 0002               1815      CMP.B   #2,D0
00002280  6700 001C               1816      BEQ     outputDataLoopEnd
00002284                          1817      *Grab byte from address, dont increment
00002284  1C13                    1818      MOVE.B  (A3),D6
00002286                          1819      *LSR to isolate left bit
00002286  E80E                    1820      LSR.B   #4,D6
00002288                          1821      *Call converthtoa
00002288  6100 008A               1822      BSR     CONVERTHTOA
0000228C  12C6                    1823      MOVE.B  D6,(A1)+   
0000228E                          1824      *Grab bye from address, increment
0000228E  1C1B                    1825      MOVE.B  (A3)+,D6
00002290                          1826      *AND Mask second digit
00002290  CC3C 000F               1827      AND.B   #$0F,D6
00002294  6100 007E               1828      BSR     CONVERTHTOA
00002298  12C6                    1829      MOVE.B  D6,(A1)+
0000229A  5200                    1830      ADD.B   #1,D0
0000229C  60DE                    1831      BRA     outputDataLoop
0000229E                          1832      
0000229E                          1833  outputDataLoopEnd
0000229E  12BC 0000               1834      MOVE.B  #$00,(A1)
000022A2  2C1F                    1835      MOVE.L  (SP)+,D6
000022A4  43F9 00009005           1836      LEA     addressOutput,A1
000022AA  103C 000E               1837      MOVE.B  #14,D0
000022AE  4E4F                    1838      TRAP    #15
000022B0                          1839      
000022B0  43F9 000025BF           1840      LEA     NEWLINE,A1
000022B6  103C 000E               1841      MOVE.B  #14,D0
000022BA  4E4F                    1842      TRAP    #15
000022BC                          1843  
000022BC  4E75                    1844      RTS
000022BE                          1845   
000022BE                          1846      
000022BE                          1847  outputAddress
000022BE  267C 00000800           1848      MOVE.L  #$800,A3
000022C4  268A                    1849      MOVE.L  A2,(A3)
000022C6  2F06                    1850      MOVE.L  D6,-(SP)
000022C8  103C 0000               1851      MOVE.B  #0,D0
000022CC  43F9 00009005           1852      LEA     addressOutput,A1
000022D2                          1853  outputAddressLoop
000022D2                          1854      *check if loop has run 4 times
000022D2  B03C 0004               1855      CMP.B   #4,D0
000022D6  6700 001C               1856      BEQ     outputAddressLoopEnd
000022DA                          1857      *Grab byte from address, dont increment
000022DA  1C13                    1858      MOVE.B  (A3),D6
000022DC                          1859      *LSR to isolate left bit
000022DC  E80E                    1860      LSR.B   #4,D6
000022DE                          1861      *Call converthtoa
000022DE  6100 0034               1862      BSR     CONVERTHTOA
000022E2  12C6                    1863      MOVE.B  D6,(A1)+   
000022E4                          1864      *Grab bye from address, increment
000022E4  1C1B                    1865      MOVE.B  (A3)+,D6
000022E6                          1866      *AND Mask second digit
000022E6  CC3C 000F               1867      AND.B   #$0F,D6
000022EA  6100 0028               1868      BSR     CONVERTHTOA
000022EE  12C6                    1869      MOVE.B  D6,(A1)+
000022F0  5200                    1870      ADD.B   #1,D0
000022F2  60DE                    1871      BRA     outputAddressLoop
000022F4                          1872      
000022F4                          1873      
000022F4                          1874  outputAddressLoopEnd
000022F4  12BC 0000               1875      MOVE.B  #$00,(A1)
000022F8  2C1F                    1876      MOVE.L  (SP)+,D6
000022FA  43F9 00009005           1877      LEA     addressOutput,A1
00002300                          1878      
00002300  103C 000E               1879      MOVE.B  #14,D0
00002304  4E4F                    1880      TRAP    #15
00002306                          1881      
00002306  43F9 000025C2           1882      LEA     spaces,A1
0000230C  103C 000E               1883      MOVE.B  #14,D0
00002310  4E4F                    1884      TRAP    #15
00002312                          1885  
00002312                          1886  
00002312  4E75                    1887      RTS
00002314                          1888  
00002314                          1889  *********************************************************************
00002314                          1890  *Subroutine: CONVERTHTOA
00002314                          1891  *What it does: Converts HEX to ASCII
00002314                          1892  *Registers: Uses register D6,D0
00002314                          1893  *D6: Stores hex character to be converted
00002314                          1894  *Paramemeters: D6
00002314                          1895  *D6: Stores hex characcter to be converted
00002314                          1896  *********************************************************************
00002314                          1897      CONVERTHTOA:
00002314                          1898      
00002314  BC3C 0009               1899      CMP.B   #9,D6
00002318  6F00 0006               1900      BLE     zerotonine
0000231C  6000 000A               1901      BRA     AtoF
00002320                          1902      
00002320                          1903  zerotonine    
00002320  0686 00000030           1904      ADD.L   #$30,D6
00002326  4E75                    1905      RTS
00002328                          1906  AtoF
00002328  0686 00000037           1907      ADD.L   #$37,D6
0000232E  4E75                    1908      RTS
00002330                          1909      
00002330                          1910  END_SIMULATION:
00002330                          1911          
00002330  103C 0009               1912      MOVE.B  #9,D0
00002334  4E4F                    1913      TRAP    #15
00002336                          1914  
00002336  FFFF FFFF               1915      SIMHALT             ; halt simulator
0000233A                          1916  
0000233A                          1917  * Put variables and constants here
0000233A= 57 65 6C 63 6F 6D ...   1918  STARTMESSAGE    DC.B    'Welcome to the CSS 422 dissasembler!',CR,LF
00002360= 53 6F 6D 65 20 71 ...   1919                  DC.B    'Some quick rules:',CR,LF
00002373= 31 29 20 4F 6E 6C ...   1920                  DC.B    '1) Only the last 6 characters will be saved as the address',CR,LF
000023AF= 32 29 20 54 68 65 ...   1921                  DC.B    '2) The input only accepts hexadecimal input, both in upper and lower case',CR,LF
000023FA= 33 29 20 41 6E 79 ...   1922                  DC.B    '3) Any part of the input that is not within the hexadecimal range ',CR,LF
0000243E= 20 20 20 77 69 6C ...   1923                  DC.B    '   will be rejected',CR,LF
00002453= 34 29 20 54 68 65 ...   1924                  DC.B    '4) The first input must be smaller than the second, otherwise it ',CR,LF
00002496= 20 20 20 77 69 6C ...   1925                  DC.B    '   will be rejected',CR,LF,0      
000024AC= 50 6C 65 61 73 65 ...   1926  INPUT1MESSAGE   DC.B    'Please input the lower address edge',CR,LF,0
000024D2= 50 6C 65 61 73 65 ...   1927  INPUT2MESSAGE   DC.B    'Please input the upper address edge',CR,LF,0
000024F8                          1928  
000024F8= 0D 0A 54 68 69 73 ...   1929  INPUTERRORBADCHAR   DC.B    CR,LF,'This value is not valid',CR,LF,CR,LF,0
00002516= 0D 0A 49 6E 70 75 ...   1930  INPUTERROR2SMALLER  DC.B    CR,LF,'Input 2 is smaller than input 1. Input a larger value',CR,LF,CR,LF,0
00002552                          1931  
00002552= 54 6F 20 72 65 70 ...   1932  INPUTREPEAT     DC.B    'To repeat the program, press enter. Otherwise, press any button to quit',CR,LF,0
0000259C                          1933  
0000259C= 50 6C 65 61 73 65 ...   1934  OUTPUTNEWSCREEN     DC.B    'Please press enter for more code',CR,LF,0
000025BF                          1935  
000025BF= 0D 0A 00                1936  NEWLINE     DC.B    CR,LF,0
000025C2= 20 20 00                1937  SPACES      DC.B    '  ',0
000025C5                          1938  
000025C5= 01                      1939  InputQuality    DC.B    1       Set to 1 for default good
000025C6= 00                      1940  LineCounter     DC.B    0      Counts the number of lines used per screen (max of 31)
000025C7= 00                      1941  OutputType      DC.B    0      To track what type is being output
000025C8= 00                      1942  RepeatFlag      DC.B    0
000025C9                          1943  
000025C9= 4E 4F 50 0D 0A 00       1944  nopout  DC.B    'NOP',CR,LF,0
000025CF= 4D 4F 56 45 00          1945  moveout  DC.B    'MOVE',0
000025D4= 4D 4F 56 45 41 00       1946  moveaout DC.B      'MOVEA',0
000025DA= 4D 4F 56 45 51 00       1947  moveqout DC.B   'MOVEQ',0
000025E0= 4D 4F 56 45 4D 00       1948  movemout DC.B   'MOVEM',0
000025E6                          1949  
000025E6= 53 55 42 00             1950  subout    DC.B  'SUB',0
000025EA= 41 44 44 00             1951  addout    DC.B 'ADD',0
000025EE= 41 44 44 41 00          1952  addaout    DC.B 'ADDA',0
000025F3= 41 44 44 51 00          1953  addqout    DC.B 'ADDQ',0
000025F8                          1954  
000025F8= 4C 45 41 20 20 20 ...   1955  leaout    DC.B  'LEA    ',0
00002600                          1956  
00002600= 4E 4F 54 00             1957  notout    DC.B  'NOT',0
00002604= 4F 52 00                1958  orout DC.B     'OR',0
00002607= 41 4E 44 00             1959  andout DC.B     'AND',0
0000260B                          1960  
0000260B                          1961  
0000260B= 4C 53 4C 00             1962  lslout    DC.B  'LSL',0
0000260F= 4C 53 52 00             1963  lsrout    DC.B  'LSR',0
00002613= 41 53 4C 00             1964  aslout    DC.B  'ASL',0
00002617= 41 53 52 00             1965  asrout    DC.B  'ASR',0
0000261B                          1966  
0000261B= 52 4F 4C 00             1967  rolout    DC.B  'ROL',0
0000261F= 52 4F 52 00             1968  rorout    DC.B  'ROR',0
00002623                          1969  
00002623= 42 47 54 00             1970  bgtout DC.B     'BGT',0
00002627= 42 4C 45 00             1971  bleout DC.B     'BLE',0
0000262B= 42 45 51 00             1972  beqout DC.B     'BEQ',0
0000262F                          1973  
0000262F= 4A 53 52 00             1974  jsrout DC.B     'JSR',0
00002633= 52 54 53 0D 0A 00       1975  rtsout DC.B     'RTS',CR,LF,0
00002639= 42 52 41 00             1976  braout DC.B     'BRA',0
0000263D                          1977  
0000263D= 44 41 54 41 20 20 ...   1978  dataout DC.B    'DATA   ',0
00002645                          1979  
00002645                          1980  
00002645                          1981  
00002645= 2E 42 20 20 20 20 00    1982  byteout  DC.B    '.B    ',0
0000264C= 2E 57 20 20 20 20 00    1983  wordout  DC.B    '.W    ',0
00002653= 2E 4C 20 20 20 20 00    1984  longout  DC.B    '.L    ',0
0000265A= 20 20 20 20 20 20 ...   1985  nosizeout DC.B   '       ',0
00002662                          1986  
00002662= 0D 0A 00                1987  empty    DC.B    '',CR,LF,0
00002665                          1988  
00002665  =0000000D               1989  CR  EQU $0D
00002665  =0000000A               1990  LF  EQU $0A
00002665                          1991  
00002665                          1992  
00002665                          1993      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 14B6
ADDA                1502
ADDAOUT             25EE
ADDOUT              25EA
ADDQ                146A
ADDQOUT             25F3
ADDQ_EA             1C96
ADDRESSOUTPUT       9005
ALL_REG             7FFF
AND                 1814
ANDOUT              2607
ASL                 1672
ASLOUT              2613
ASR                 16BE
ASROUT              2617
ATOF                2328
ATOH                1AC6
A_REG               1DE6
BCC                 1860
BEQ                 18DA
BEQOUT              262B
BGT                 188E
BGTOUT              2623
BITS0TO5_MASK       3F
BITS7TO8_MASK       C0
BITS9TO11_MASK      E00
BLE                 18B4
BLEOUT              2627
BRA                 1900
BRAOUT              2639
BYTE                12BE
BYTEOUT             2645
CHECK_EA_AB_L       1FD0
CHECK_EA_AB_W       1FB0
CHECK_EA_AR         1F18
CHECK_EA_IMM        1FEE
CHECK_EA_INDIRECT   1F32
CHECK_EA_POST       1F58
CHECK_EA_PRE        1F84
CHECK_VALID_EA      1E48
CLOSED_PAR_TAG      2106
COMMA_TAG           2166
CONVERTATOH         1AC6
CONVERTHTOA         2314
CR                  D
DATA                1926
DATAOUT             263D
DOLLAR_TAG          210A
D_REG               1DD6
EA1_END             1BEA
EA1_MODE_ONE        1BDE
EA1_MODE_ZERO       1BE6
EA2_END             1C2A
EA2_IMMEDIATE       1C22
EA2_REGISTER        1C1A
EA_GROUP1           1BBE
EA_GROUP2           1C04
EA_GROUP3           1C46
EA_GROUP4           1C5E
EMPTY               2662
END_SIMULATION      2330
FINISH              1B1A
FIRSTINPUT          199C
FLIP_CLR            1D8E
FLIP_DIRECTION      1D7A
FLIP_LOOP_INCR      1D96
FLIP_SET            1D94
FORMAT_IMMEDIATE_DATA  1B26
FORWARD_SLASH_TAG   210C
HASH_SIGN_TAG       2108
HERE                1026
HEX_TO_ASCII        209E
HEX_TO_ASCII_RETURN  20AE
IMMEDIATE0          1B36
IMMEDIATE_END       1B38
INPUT1              8000
INPUT1MESSAGE       24AC
INPUT2              8004
INPUT2MESSAGE       24D2
INPUTERROR          1B1C
INPUTERROR2SMALLER  2516
INPUTERRORBADCHAR   24F8
INPUTQUALITY        25C5
INPUTREPEAT         2552
INPUT_BUFFER        2042
INVALID_EA          1E82
IPUT_BUFFER_EX      203A
JSR                 1568
JSROUT              262F
LEA                 17A2
LEAOUT              25F8
LETSGO              105E
LETTERS             20FE
LF                  A
LINECOUNTER         25C6
LONG                12EA
LONGOUT             2653
LONG_DISPLACEMENT   1EFC
LOWERCASE           1B02
LSL                 15DA
LSLOUT              260B
LSR                 1626
LSROUT              260F
MEMORY_TO_REGISTER  1CFA
MEM_TO_REG          1D9C
MINUS_TAG           2138
MODE_010            1E0E
MODE_01_0           1E40
MOVE                1320
MOVEA               1372
MOVEAOUT            25D4
MOVEM               13D4
MOVEMOUT            25E0
MOVEM_EA            1CEE
MOVEOUT             25CF
MOVEQ               13AE
MOVEQOUT            25DA
MOVEQ_EA            1CC2
MOVE_MOVEA_EA       1B3A
NEWLINE             25BF
NEWLINE_TAG         2190
NOP                 1300
NOPOUT              25C9
NOSIZEOUT           265A
NOT                 158E
NOTOUT              2600
NUMBER_TO_ASCII     20B4
ODDNUMBER1          1A9C
ODDNUMBER2          1ABC
ODDNUMBERCHECKER1   1A80
ODDNUMBERCHECKER2   1AA4
OP1                 136A
OP10                166A
OP11                16B6
OP12                1702
OP13                174E
OP14                179A
OP15                180C
OP16                1858
OP2                 13A6
OP3                 1410
OP4                 1462
OP5                 14AE
OP6                 14FA
OP7                 153E
OP8                 15D2
OP9                 161E
OPCODE              11B8
OPEN_PAR_TAG        2104
OR                  17C8
OROUT               2604
OUTPUT              21E4
OUTPUTADDRESS       22BE
OUTPUTADDRESSLOOP   22D2
OUTPUTADDRESSLOOPEND  22F4
OUTPUTDATA          2268
OUTPUTDATALOOP      227C
OUTPUTDATALOOPEND   229E
OUTPUTNEWSCREEN     259C
OUTPUTOPCODE        2214
OUTPUTOPCODENEWSCREEN  222E
OUTPUTSIZE          2260
OUTPUTTYPE          25C7
PLUS_TAG            2136
POPULATE_BUFFER     2074
PRINT_BRA           1EBE
PRINT_BRA_RETURN    1EFE
PRINT_BUFFER        2030
PRINT_CLOSED_PARENTHESIS  2122
PRINT_COMMA         2168
PRINT_DOLLAR        21BC
PRINT_EA            1E8C
PRINT_EA1           1B76
PRINT_EA2           1B9C
PRINT_EA_RETURN     202A
PRINT_FORWARD_SLASH  21D0
PRINT_HASH_SIGN     21A8
PRINT_HEX           2052
PRINT_HEX_RETURN    2068
PRINT_INSTRUCTION_RETURN  1EB4
PRINT_MASK          1D66
PRINT_MASK_LOOP     1DBC
PRINT_MASK_LOOP_INCR  1E02
PRINT_MASK_LOOP_START  1DB8
PRINT_MASK_RETURN   1E08
PRINT_MINUS         214E
PRINT_MOVEM         1D28
PRINT_MOVEM_MASK    1D40
PRINT_NEWLINE       2194
PRINT_OPEN_PARENTHESIS  210E
PRINT_PLUS          213A
PRINT_REGISTOR      20BA
PRINT_REGISTOR_RETURN  20EA
PRINT_SLASH         1DF2
PRINT_TAB           217C
READ_WORD_IMM       2012
REGISTER_TO_MEMORY  1E1C
REG_COUNT           1DA4
REG_COUNT_INCR      1DB4
REG_TO_MEM          1D78
REG_TO_MEMO_OK      1D9A
REPEATFLAG          25C8
RETURN              12BC
ROL                 170A
ROLOUT              261B
ROR                 1756
ROROUT              261F
RTS                 1546
RTSOUT              2633
SECONDINPUT         1A00
SET_MASK            1DCE
SPACES              25C2
SPACE_TAG           2164
START               1000
STARTMESSAGE        233A
SUB                 141E
SUBOUT              25E6
TAB_TAG             2162
THERE               118C
THROWINPUT1CHARERROR  19E2
THROWINPUT2CHARERROR  1A50
THROWINPUT2LOWERERROR  1A6C
TO_STRING           20F0
UPPERCASE           1AEA
USERINPUT           1954
USERINPUTREPEAT     118E
USERINPUTSTART      1008
USERINPUTSTORED     8008
VALID_EA_PC         1E6A
WELCOMEEXPLANATION  1982
WORD                12D4
WORDOUT             264C
WORD_DISPLACEMENT   1EE8
WRONG_INSTRUCTION   1D1E
ZEROTONINE          2320
