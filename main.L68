00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/11/2022 6:28:58 PM

00000000  =00009005                  1  addressOutput EQU   $9005
00000000  =00008000                  2  input1      EQU     $8000           where input 1 is stored (can be changed if needed)
00000000  =00008004                  3  input2      EQU     $8004          where input 2 is stored (can be changed if needed)
00000000  =00008008                  4  userInputStored    EQU     $8008   
00000000                             5  
00000000                             6  
00000000                             7  
00000000                             8  
00000000                             9  
00001000                            10      ORG    $1000
00001000                            11  START:                           *Main
00001000                            12  
00001000  13FC 0000 000025FA        13      MOVE.B  #0,(LineCounter)
00001008                            14  userInputStart
00001008  6100 0972                 15      BSR     USERINPUT
0000100C  2479 00008000             16      MOVE.L    input1,A2
00001012                            17  memoryLoop
00001012                            18      
00001012  6100 01BA                 19      BSR     OPCODE
00001016                            20  Loopreturn
00001016  548A                      21      ADD.L   #2,A2
00001018  260A                      22      MOVE.L A2,D3 * current
0000101A  2C39 00008004             23      MOVE.L (input2),D6 * the upper bound
00001020  B686                      24      CMP.L   D6,D3
00001022  6C00 0180                 25      BGE     userInputRepeat
00001026  60EA                      26      BRA     memoryLoop
00001028                            27  
00001028                            28      
00001028                            29  *testing purposes----------------------------------------------------
00001028  1C3C 0004                 30      MOVE.B #$04, D6
0000102C  347C 1004                 31      MOVE.W #$1004, A2
00001030  7C0A                      32      MOVEQ #10, D6
00001032  264A                      33      MOVEA.L A2, A3
00001034  B641                      34      CMP D1,D3
00001036  9C82                      35      SUB.L D2, D6
00001038                            36  
00001038  6000 0002                 37      BRA here
0000103C                            38  here
0000103C  4EB9 000011A2             39      JSR there
00001042  4693                      40      NOT.L (A3)
00001044  47D1                      41      LEA (A1),A3
00001046  8AB9 00008000             42      OR.L input1, D5
0000104C  48E7 FFFE                 43      MOVEM.L D0-D7/A0-A6,-(SP) 
00001050  CC01                      44      AND.B D1,D6
00001052  D803                      45      ADD.B D3,D4
00001054  D4C9                      46      ADDA.W A1,A2
00001056  5E81                      47      ADDQ.L #7,D1
00001058  E709                      48      LSL.B #3,D1
0000105A  E449                      49      lSR.W #2,D1
0000105C  ED02                      50      ASL.B #6,D2
0000105E  EA42                      51      ASR.W #5,D2
00001060  EB1B                      52      ROL.B #5,D3
00001062  E85B                      53      ROR.W #4,D3
00001064  6E00 000E                 54      BGT letsgo
00001068  B67C 0004                 55      CMP #4,D3 
0000106C  6700 0006                 56      BEQ letsgo
00001070  6F00 0002                 57      BLE letsgo
00001074                            58     
00001074                            59  letsgo
00001074                            60      
00001074                            61  * calls-------------------------------------------------------
00001074  347C 1012                 62      MOVE.W #$1012, A2
00001078  6100 0154                 63      BSR     OPCODE * test MOVE.B
0000107C                            64  
0000107C  347C 1016                 65      MOVE.W #$1016, A2
00001080  6100 014C                 66      BSR     OPCODE * test MOVEA.W
00001084                            67      
00001084  347C 101A                 68      MOVE.W #$101A, A2
00001088  6100 0144                 69      BSR     OPCODE * test MOVEQ
0000108C                            70     
0000108C  347C 101C                 71      MOVE.W #$101C, A2
00001090  6100 013C                 72      BSR     OPCODE *test MOVEA.L
00001094                            73      
00001094  347C 101E                 74      MOVE.W #$101E, A2
00001098  6100 0134                 75      BSR     OPCODE *test DATA
0000109C                            76      
0000109C                            77      
0000109C  347C 1020                 78      MOVE.W #$1020, A2
000010A0  6100 012C                 79      BSR     OPCODE *test SUB.L
000010A4                            80      
000010A4  347C 1022                 81      MOVE.W #$1022, A2
000010A8  6100 0124                 82      BSR     OPCODE *test BRA
000010AC                            83      
000010AC  347C 1026                 84      MOVE.W #$1026, A2
000010B0  6100 011C                 85      BSR     OPCODE *test JSR
000010B4                            86      
000010B4                            87      
000010B4  43F9 000026B0             88      LEA empty,A1
000010BA  13FC 0001 000025FB        89      MOVE.B  #1,(OutputType)       
000010C2  6100 115E                 90      BSR    OUTPUT
000010C6                            91  
000010C6                            92      
000010C6  347C 102C                 93      MOVE.W #$102C, A2
000010CA  6100 0102                 94      BSR     OPCODE *test NOT
000010CE                            95      
000010CE  347C 102E                 96      MOVE.W #$102E, A2
000010D2  6100 00FA                 97      BSR     OPCODE *test LEA
000010D6                            98      
000010D6  347C 1030                 99      MOVE.W #$1030, A2
000010DA  6100 00F2                100      BSR     OPCODE *test OR
000010DE                           101      
000010DE  43F9 000026B0            102       LEA empty,A1
000010E4  13FC 0001 000025FB       103      MOVE.B  #1,(OutputType)       
000010EC  6100 1134                104      BSR    OUTPUT
000010F0                           105  
000010F0                           106      
000010F0  347C 1036                107      MOVE.W #$1036, A2
000010F4  6100 00D8                108      BSR     OPCODE *test MOVEM
000010F8                           109  
000010F8  347C 103A                110      MOVE.W #$103A, A2
000010FC  6100 00D0                111      BSR     OPCODE *test AND
00001100                           112      
00001100  347C 103C                113      MOVE.W #$103C, A2
00001104  6100 00C8                114      BSR     OPCODE *test ADD
00001108                           115      
00001108  43F9 000026B0            116      LEA empty,A1
0000110E  13FC 0001 000025FB       117      MOVE.B  #1,(OutputType) * new line  
00001116  6100 110A                118      BSR    OUTPUT
0000111A                           119  
0000111A  347C 103E                120      MOVE.W #$103E, A2
0000111E  6100 00AE                121      BSR     OPCODE *test ADDA
00001122                           122      
00001122  347C 1040                123      MOVE.W #$1040, A2
00001126  6100 00A6                124      BSR     OPCODE *test ADDQ
0000112A                           125      
0000112A  347C 1042                126      MOVE.W #$1042, A2
0000112E  6100 009E                127      BSR     OPCODE *test LSL
00001132                           128  
00001132  347C 1044                129      MOVE.W #$1044, A2
00001136  6100 0096                130      BSR     OPCODE *test LSR
0000113A                           131      
0000113A  347C 1046                132      MOVE.W #$1046, A2
0000113E  6100 008E                133      BSR     OPCODE *test ASL
00001142                           134      
00001142  43F9 000026B0            135      LEA empty,A1
00001148  13FC 0001 000025FB       136      MOVE.B  #1,(OutputType) * new line  
00001150  6100 10D0                137      BSR    OUTPUT
00001154                           138  
00001154                           139  
00001154  347C 1048                140      MOVE.W #$1048, A2
00001158  6100 0074                141      BSR     OPCODE *test ASR
0000115C                           142      
0000115C                           143      
0000115C  347C 104A                144      MOVE.W #$104A, A2
00001160  6100 006C                145      BSR     OPCODE *test ROL
00001164                           146  
00001164  347C 104C                147      MOVE.W #$104C, A2
00001168  6100 0064                148      BSR     OPCODE *test ROR
0000116C                           149      
0000116C  43F9 000026B0            150      LEA empty,A1
00001172  13FC 0001 000025FB       151      MOVE.B  #1,(OutputType) * new line  
0000117A  6100 10A6                152      BSR    OUTPUT
0000117E                           153  
0000117E  347C 104E                154      MOVE.W #$104E, A2
00001182  6100 004A                155      BSR     OPCODE *test BGT
00001186                           156  
00001186  347C 1056                157      MOVE.W #$1056, A2
0000118A  6100 0042                158      BSR     OPCODE *test BEQ
0000118E                           159      
0000118E  347C 105A                160      MOVE.W #$105A, A2
00001192  6100 003A                161      BSR     OPCODE *test BLE
00001196                           162      
00001196                           163  
00001196                           164    
00001196  347C 118C                165      MOVE.W #$118C, A2
0000119A  6100 0032                166      BSR     OPCODE *test RTS
0000119E                           167  
0000119E                           168  
0000119E                           169  * calls---------------------------------------------------------    
0000119E  6000 0004                170      BRA userInputRepeat
000011A2                           171  there    
000011A2  4E75                     172      RTS
000011A4                           173  * end testing--------------------------------------------------------------
000011A4                           174   
000011A4                           175  
000011A4                           176       
000011A4                           177    
000011A4                           178  
000011A4                           179      
000011A4                           180  userInputRepeat
000011A4  43F9 00002586            181      LEA     INPUTREPEAT,A1
000011AA  103C 000E                182      MOVE.B  #14,D0
000011AE  4E4F                     183      TRAP    #15
000011B0  5239 000025FA            184      ADD.B   #1,(LineCounter)
000011B6                           185      
000011B6  43F9 00008008            186      LEA     userInputStored,A1
000011BC  103C 0005                187      MOVE.B  #5,D0
000011C0  4E4F                     188      TRAP    #15
000011C2                           189      
000011C2  B23C 000D                190      CMP.B   #$0D,D1
000011C6  6700 FE40                191      BEQ     userInputStart
000011CA                           192   
000011CA  FFFF FFFF                193      SIMHALT
000011CE                           194  
000011CE                           195  **********************************************************
000011CE                           196  *Subroutine: OPCODE
000011CE                           197  *What it does: Looks at the word pointed to by A2 and determines opcode
000011CE                           198  *Registers: 
000011CE                           199  *A1: printing
000011CE                           200  *A2: parameter with instruction address
000011CE                           201  *D0: printing
000011CE                           202  *D3: used for determing the instruction, mostly shifts
000011CE                           203  *D2: used for determing the size
000011CE                           204  *D4: used for passing size to SIZE
000011CE                           205  *Paramemeters: A2 the memory address to decode from
000011CE                           206  **********************************************************
000011CE                           207  OPCODE:
000011CE  4243                     208      CLR D3
000011D0                           209      
000011D0                           210      
000011D0  0C52 4E75                211      CMP #$4E75, (A2) * RTS compare, this has to be done before JSR, LEA, and NOT
000011D4  6700 0398                212      BEQ rts
000011D8                           213      
000011D8  0C52 4E71                214      CMP #$4E71, (A2) *NOP compare
000011DC  6700 0148                215      BEQ nop
000011E0                           216      
000011E0  3612                     217      Move.W (A2), D3 
000011E2  E04B                     218      LSR #8,D3 * make D3 only contain the first 4 bits of the instruction as its LSig word
000011E4  E84B                     219      LSR #4,D3
000011E6                           220      
000011E6                           221      
000011E6  B67C 000F                222      CMP #%1111, D3 * none of the instructions we are processing have these
000011EA  6700 0762                223      BEQ data
000011EE  B67C 0000                224      CMP #%0000, D3 * 
000011F2  6700 075A                225      BEQ data
000011F6                           226  
000011F6                           227  
000011F6                           228      
000011F6  B67C 0008                229      CMP #%1000, D3 * OR compare
000011FA  6700 05F4                230      BEQ or
000011FE                           231      
000011FE                           232      
000011FE  B67C 0003                233      CMP #%0011, D3 *MOVE and MOVEA compare
00001202  6F00 0142                234      BLE move
00001206                           235      
00001206  B67C 0007                236      CMP #%0111, D3 *MOVEQ compare
0000120A  6700 01C8                237      BEQ moveq
0000120E                           238      
0000120E  B67C 0009                239      CMP #%1001, D3 *SUB compare
00001212  6700 0230                240      BEQ sub
00001216                           241      
00001216  B67C 000C                242      CMP #%1100, D3 *AND compare
0000121A  6700 0620                243      BEQ and
0000121E                           244      
0000121E  B67C 0005                245      CMP #%0101, D3 *ADDQ compare
00001222  6700 026C                246      BEQ addq
00001226                           247      
00001226  B67C 0006                248      CMP #%0110, D3 *BCC compare, BGT, BLE, and BEQ are branched from internally
0000122A  6700 065C                249      BEQ bcc
0000122E                           250      
0000122E                           251  
0000122E  3612                     252      Move.W (A2), D3 * reset D3
00001230  0243 F118                253      ANDI.W #%1111000100011000,D3  * the bits relevant to LSL
00001234  B67C E108                254      CMP #%1110000100001000,D3 * LSL compare
00001238  6700 03C8                255      BEQ lsl
0000123C                           256  
0000123C  3612                     257      Move.W (A2), D3 * reset D3
0000123E  0243 F118                258      ANDI.W #%1111000100011000,D3  * the bits relevant to LSR
00001242  B67C E008                259      CMP #%1110000000001000,D3 * LSR compare
00001246  6700 0406                260      BEQ lsr
0000124A                           261      
0000124A                           262      
0000124A  3612                     263      Move.W (A2), D3 * reset D3
0000124C  0243 F118                264      ANDI.W #%1111000100011000,D3  * the bits relevant to ASL
00001250  B67C E100                265      CMP #%1110000100000000,D3 * ASL compare
00001254  6700 0444                266      BEQ asl
00001258                           267  
00001258  3612                     268      Move.W (A2), D3 * reset D3
0000125A  0243 F118                269      ANDI.W #%1111000100011000,D3  * the bits relevant to ASR
0000125E  B67C E000                270      CMP #%1110000000000000,D3 * ASR compare
00001262  6700 0482                271      BEQ asr
00001266                           272  
00001266  3612                     273      Move.W (A2), D3 * reset D3
00001268  0243 F118                274      ANDI.W #%1111000100011000,D3  * the bits relevant to ASL
0000126C  B67C E118                275      CMP #%1110000100011000,D3 * ROL compare
00001270  6700 04C0                276      BEQ rol
00001274                           277  
00001274  3612                     278      Move.W (A2), D3 * reset D3
00001276  0243 F118                279      ANDI.W #%1111000100011000,D3  * the bits relevant to ASR
0000127A  B67C E018                280      CMP #%1110000000011000,D3 * ROR compare
0000127E  6700 04FE                281      BEQ ror
00001282                           282  
00001282                           283      
00001282                           284      
00001282  3612                     285      Move.W (A2), D3 * reset D3
00001284  0243 F0C0                286      ANDI.W #%1111000011000000,D3  * the bits relevant to ADDA
00001288  B67C D0C0                287      CMP #%1101000011000000,D3 * ADDA compare, must be done before add
0000128C  6700 029C                288      BEQ adda
00001290                           289      
00001290  3612                     290      Move.W (A2), D3 
00001292  E04B                     291      LSR #8,D3 * make D3 only contain the first 4 bits of the instruction as its LSig word
00001294  E84B                     292      LSR #4,D3
00001296  B67C 000D                293      CMP #%1101, D3 *ADD compare
0000129A  6700 0240                294      BEQ add
0000129E                           295  
0000129E                           296    
0000129E  3612                     297      Move.W (A2), D3 * reset D3
000012A0  0243 FB80                298      ANDI.W #%1111101110000000,D3  * the bits relevant to MOVEM
000012A4  B67C 4880                299      CMP #%0100100010000000,D3 * MOVEM compare
000012A8  6700 0150                300      BEQ movem
000012AC                           301  
000012AC                           302      
000012AC                           303      
000012AC  3612                     304      Move.W (A2), D3 * reset D3
000012AE  EC4B                     305      LSR #6,D3 * make D3 only contain the first 10 bits of the instruction
000012B0  B67C 013A                306      CMP #%0000000100111010, D3 * JSR compare, this has to be done before NOT and LEA
000012B4  6700 02DA                307      BEQ jsr
000012B8                           308  
000012B8  3612                     309      Move.W (A2), D3 * reset D3
000012BA  E04B                     310      LSR #8,D3 * make D3 only contain the first 8 bits
000012BC  B67C 0046                311      CMP #%01000110,D3 * NOT compare, this has to be done before LEA
000012C0  6700 02F4                312      BEQ not
000012C4                           313      
000012C4  3612                     314      Move.W (A2), D3 * reset D3
000012C6  0243 F1C0                315      ANDI.W #%1111000111000000,D3 * the bits relevant to LEA
000012CA  B67C 41C0                316      CMP #%0100000111000000,D3 *LEA compare
000012CE  6700 04FA                317      BEQ lea
000012D2                           318      
000012D2                           319      
000012D2                           320      
000012D2                           321      
000012D2                           322      
000012D2                           323  
000012D2                           324  
000012D2                           325     
000012D2  3612                     326      Move.W (A2), D3 * reset D3
000012D4  E04B                     327      LSR #8,D3 * make D3 only contain the first 8 bits of the instruction
000012D6  B67C 0060                328      CMP #%01100000, D3 *BRA compare
000012DA  6700 064C                329      BEQ bra
000012DE                           330      
000012DE                           331      
000012DE  6000 066E                332      BRA data
000012E2                           333      
000012E2                           334  return
000012E2  4E75                     335      RTS
000012E4                           336      
000012E4                           337  
000012E4                           338  
000012E4                           339      
000012E4                           340  byte
000012E4  43F9 00002693            341      LEA    byteout,A1        
000012EA  13FC 0002 000025FB       342      MOVE.B  #2,(OutputType)
000012F2  6100 0F2E                343      BSR     OUTPUT 
000012F6  2257                     344      MOVE.L (SP),A1 
000012F8  4ED1                     345      JMP (A1)
000012FA                           346  
000012FA                           347  word
000012FA  43F9 0000269A            348      LEA    wordout,A1        
00001300  13FC 0002 000025FB       349      MOVE.B  #2,(OutputType)
00001308  6100 0F18                350      BSR     OUTPUT
0000130C  2257                     351      MOVE.L (SP),A1 
0000130E  4ED1                     352      JMP (A1)
00001310                           353  
00001310                           354  long
00001310  43F9 000026A1            355      LEA    longout,A1        
00001316  13FC 0002 000025FB       356      MOVE.B  #2,(OutputType)
0000131E  6100 0F02                357      BSR     OUTPUT
00001322  2257                     358      MOVE.L (SP),A1 
00001324  4ED1                     359      JMP (A1)
00001326                           360      
00001326                           361       
00001326                           362      
00001326                           363  nop 
00001326  13FC 0004 000025FB       364      MOVE.B  #4,(OutputType)
0000132E  6100 0EF2                365      BSR     OUTPUT
00001332  43F9 000025FD            366      LEA    nopout,A1        
00001338  13FC 0001 000025FB       367      MOVE.B  #1,(OutputType)
00001340  6100 0EE0                368      BSR     OUTPUT
00001344  609C                     369      BRA return
00001346                           370      
00001346                           371  move
00001346                           372      * put the size of the instruction into D2 to use later
00001346                           373      * since the first two bits of D3 are 00 for move moving the entire word works
00001346  3403                     374      Move.W D3, D2
00001348                           375  
00001348                           376  
00001348                           377      * determine if MOVE or MOVEA
00001348                           378      * if bits 8,7,6 = 001 its MOVEA
00001348  3612                     379      MOVE.W (A2),D3
0000134A  0243 01C0                380      ANDI.W #%0000000111000000, D3 *extract only bits 8,7,6
0000134E                           381      
0000134E  B67C 0040                382      CMP #%0000000001000000,D3 * if only the sixth bit is set then instruction is MOVEA
00001352  6700 0044                383      BEQ movea
00001356                           384      
00001356  13FC 0004 000025FB       385      MOVE.B  #4,(OutputType)
0000135E  6100 0EC2                386      BSR     OUTPUT
00001362                           387  
00001362  43F9 00002603            388      LEA    moveout,A1     *print the type
00001368  13FC 0001 000025FB       389      MOVE.B  #1,(OutputType)   
00001370  6100 0EB0                390      BSR    OUTPUT
00001374                           391      
00001374                           392      *now to print size  
00001374  4879 00001390            393      PEA op1
0000137A                           394      
0000137A  B47C 0002                395      cmp #2,D2 *if the size is 2 branch to long
0000137E  6790                     396      BEQ long
00001380  B47C 0003                397      cmp #3,D2 *if the size is 3 branch to word
00001384  6700 FF74                398      BEQ word
00001388  B47C 0001                399      cmp #1,D2 * if the size is 1 branch to byte
0000138C  6700 FF56                400      BEQ byte   
00001390                           401  op1
00001390  6100 07D0                402      BSR MOVE_MOVEA_EA
00001394  6000 FF4C                403      BRA return
00001398                           404      
00001398                           405  movea
00001398  13FC 0004 000025FB       406      MOVE.B  #4,(OutputType)
000013A0  6100 0E80                407      BSR     OUTPUT
000013A4                           408  
000013A4  43F9 00002608            409      LEA    moveaout,A1
000013AA  13FC 0001 000025FB       410      MOVE.B  #1,(OutputType)       
000013B2  6100 0E6E                411      BSR    OUTPUT
000013B6                           412      
000013B6                           413      *now to print size  
000013B6  4879 000013CC            414      PEA op2
000013BC                           415  
000013BC  B47C 0002                416      cmp #2,D2 *if the size is 2 branch to long
000013C0  6700 FF4E                417      BEQ long
000013C4  B47C 0003                418      cmp #3,D2 *if the size is 3 branch to word
000013C8  6700 FF30                419      BEQ word
000013CC                           420  op2
000013CC  6100 0794                421      BSR MOVE_MOVEA_EA
000013D0  6000 FF10                422      BRA return
000013D4                           423      
000013D4                           424  moveq
000013D4  13FC 0004 000025FB       425      MOVE.B  #4,(OutputType)
000013DC  6100 0E44                426      BSR     OUTPUT
000013E0                           427  
000013E0  43F9 0000260E            428      LEA    moveqout,A1
000013E6  13FC 0001 000025FB       429      MOVE.B  #1,(OutputType)       
000013EE  6100 0E32                430      BSR    OUTPUT
000013F2  6100 0900                431      BSR MOVEQ_EA
000013F6  6000 FEEA                432      BRA return
000013FA                           433  
000013FA                           434      
000013FA                           435  movem
000013FA  13FC 0004 000025FB       436      MOVE.B  #4,(OutputType)
00001402  6100 0E1E                437      BSR     OUTPUT
00001406                           438      
00001406  43F9 00002616            439      LEA    movemout,A1
0000140C  13FC 0001 000025FB       440      MOVE.B  #1,(OutputType)       
00001414  6100 0E0C                441      BSR    OUTPUT
00001418                           442      
00001418  4879 00001436            443      PEA op3
0000141E  3412                     444      MOVE.W (A2),D2
00001420  0242 0040                445      ANDI.W #%0000000001000000, D2 * set to only the size bits
00001424  EC4A                     446      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001426  B47C 0001                447      CMP #1, D2 * if the size is 1 branch to long
0000142A  6700 FEE4                448      BEQ long
0000142E  B47C 0000                449      CMP #0, D2 * if the size is 0 branch to long
00001432  6700 FEC6                450      BEQ word
00001436                           451  op3
00001436  6100 08EA                452      BSR MOVEM_EA
0000143A  4EB9 00001D5E            453      JSR PRINT_MOVEM
00001440  6000 FEA0                454      BRA return
00001444                           455      
00001444                           456      
00001444                           457  sub 
00001444  13FC 0004 000025FB       458      MOVE.B  #4,(OutputType)
0000144C  6100 0DD4                459      BSR     OUTPUT
00001450                           460     
00001450  43F9 0000261C            461      LEA    subout,A1
00001456  13FC 0001 000025FB       462      MOVE.B  #1,(OutputType)       
0000145E  6100 0DC2                463      BSR    OUTPUT
00001462                           464      
00001462  3412                     465      MOVE.W (A2),D2
00001464  0242 00C0                466      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001468  EC4A                     467      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000146A                           468  
0000146A                           469  
0000146A                           470      
0000146A                           471      *now to print size  
0000146A  4879 00001488            472      PEA op4
00001470  B47C 0002                473      cmp #2,D2 *if the size is 2 branch to long
00001474  6700 FE9A                474      BEQ long
00001478  B47C 0001                475      cmp #1,D2 *if the size is 1 branch to word
0000147C  6700 FE7C                476      BEQ word
00001480  B47C 0000                477      cmp #0,D2 *if the size is 0 branch to byte
00001484  6700 FE5E                478      BEQ byte 
00001488                           479  op4
00001488  6100 075C                480      BSR EA_GROUP1
0000148C  6000 FE54                481      BRA return
00001490                           482      
00001490                           483  addq 
00001490  13FC 0004 000025FB       484      MOVE.B  #4,(OutputType)
00001498  6100 0D88                485      BSR     OUTPUT
0000149C                           486     
0000149C  43F9 00002629            487      LEA    addqout,A1
000014A2  13FC 0001 000025FB       488      MOVE.B  #1,(OutputType)       
000014AA  6100 0D76                489      BSR    OUTPUT
000014AE                           490      
000014AE  3412                     491      MOVE.W (A2),D2
000014B0  0242 00C0                492      ANDI.W #%0000000011000000, D2 * set to only the size bits
000014B4  EC4A                     493      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000014B6                           494  
000014B6                           495  
000014B6                           496      
000014B6                           497      *now to print size  
000014B6  4879 000014D4            498      PEA op5
000014BC  B47C 0002                499      cmp #2,D2 *if the size is 2 branch to long
000014C0  6700 FE4E                500      BEQ long
000014C4  B47C 0001                501      cmp #1,D2 *if the size is 1 branch to word
000014C8  6700 FE30                502      BEQ word
000014CC  B47C 0000                503      cmp #0,D2 *if the size is 0 branch to byte
000014D0  6700 FE12                504      BEQ byte *otherwise branch to byte
000014D4                           505  op5    
000014D4  6100 07F0                506      BSR ADDQ_EA
000014D8  6000 FE08                507      BRA return    
000014DC                           508      
000014DC                           509      
000014DC                           510  add
000014DC  13FC 0004 000025FB       511      MOVE.B  #4,(OutputType)
000014E4  6100 0D3C                512      BSR     OUTPUT
000014E8                           513  
000014E8  43F9 00002620            514      LEA    addout,A1
000014EE  13FC 0001 000025FB       515      MOVE.B  #1,(OutputType)       
000014F6  6100 0D2A                516      BSR    OUTPUT
000014FA                           517      
000014FA  3412                     518      MOVE.W (A2),D2
000014FC  0242 00C0                519      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001500  EC4A                     520      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001502                           521  
00001502                           522  
00001502                           523      
00001502                           524      *now to print size  
00001502  4879 00001522            525      PEA op6
00001508  B47C 0002                526      cmp #2,D2 *if the size is 2 branch to long
0000150C  6700 FE02                527      BEQ long
00001510  B47C 0001                528      cmp #1,D2 *if the size is 1 branch to word
00001514  6700 FDE4                529      BEQ word
00001518  B47C 0000                530      cmp #0,D2 *if the size is 0 branch to byte
0000151C  6700 FDDC                531      BEQ word
00001520  4E75                     532      RTS
00001522                           533  op6
00001522  6100 06C2                534      BSR EA_GROUP1
00001526  6000 FDBA                535      BRA return
0000152A                           536  
0000152A                           537  adda
0000152A                           538  
0000152A  13FC 0004 000025FB       539      MOVE.B  #4,(OutputType)
00001532  6100 0CEE                540      BSR     OUTPUT
00001536                           541  
00001536  43F9 00002624            542      LEA    addaout,A1
0000153C  13FC 0001 000025FB       543      MOVE.B  #1,(OutputType)       
00001544  6100 0CDC                544      BSR    OUTPUT
00001548                           545      
00001548  3412                     546      MOVE.W (A2),D2
0000154A  0242 0100                547      ANDI.W #%0000000100000000, D2 * set to only the size bit
0000154E  E04A                     548      LSR #8,D2 * make the size bits the first two bits in D2 LSig word
00001550                           549  
00001550                           550  
00001550                           551      
00001550                           552      *now to print size  
00001550  4879 00001566            553      PEA op7
00001556  B47C 0001                554      cmp #1,D2 *if the size is 1 branch to long
0000155A  6700 FDB4                555      BEQ long
0000155E  B47C 0000                556      cmp #0,D2 *if the size is 0 branch to word
00001562  6700 FD96                557      BEQ word
00001566                           558  op7
00001566  6100 0724                559      BSR EA_GROUP4
0000156A  6000 FD76                560      BRA return
0000156E                           561  
0000156E                           562      
0000156E                           563  rts
0000156E  13FC 0004 000025FB       564      MOVE.B  #4,(OutputType)
00001576  6100 0CAA                565      BSR     OUTPUT
0000157A                           566  
0000157A  43F9 00002679            567      LEA    rtsout,A1
00001580  13FC 0001 000025FB       568      MOVE.B  #1,(OutputType)       
00001588  6100 0C98                569      BSR    OUTPUT
0000158C                           570      
0000158C  6000 FD54                571      BRA return
00001590                           572      
00001590                           573      
00001590                           574  jsr 
00001590  13FC 0004 000025FB       575      MOVE.B  #4,(OutputType)
00001598  6100 0C88                576      BSR     OUTPUT
0000159C                           577     
0000159C  43F9 00002671            578      LEA    jsrout,A1
000015A2  13FC 0001 000025FB       579      MOVE.B  #1,(OutputType)       
000015AA  6100 0C76                580      BSR    OUTPUT
000015AE                           581      
000015AE  6100 094C                582      BSR PRINT_BRA
000015B2  6000 FD2E                583      BRA return
000015B6                           584      
000015B6                           585      
000015B6                           586  not 
000015B6  13FC 0004 000025FB       587      MOVE.B  #4,(OutputType)
000015BE  6100 0C62                588      BSR     OUTPUT
000015C2                           589    
000015C2  43F9 00002636            590      LEA    notout,A1
000015C8  13FC 0001 000025FB       591      MOVE.B  #1,(OutputType)       
000015D0  6100 0C50                592      BSR    OUTPUT
000015D4                           593      
000015D4  3412                     594      MOVE.W (A2),D2
000015D6  0242 00C0                595      ANDI.W #%0000000011000000, D2 * set to only the size bits
000015DA  EC4A                     596      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000015DC                           597  
000015DC                           598      *now to print size  
000015DC  4879 000015FA            599      PEA op8
000015E2  B47C 0002                600      cmp #2,D2 *if the size is 2 branch to long
000015E6  6700 FD28                601      BEQ long
000015EA  B47C 0001                602      cmp #1,D2 *if the size is 1 branch to word
000015EE  6700 FD0A                603      BEQ word
000015F2  B47C 0000                604      cmp #0,D2 *if the size is 0 branch to byte
000015F6  6700 FCEC                605      BEQ byte
000015FA                           606  
000015FA                           607      
000015FA                           608  op8    
000015FA  6100 0676                609      BSR EA_GROUP3
000015FE                           610      
000015FE  6000 FCE2                611      BRA return
00001602                           612  
00001602                           613  lsl
00001602  13FC 0004 000025FB       614      MOVE.B  #4,(OutputType)
0000160A  6100 0C16                615      BSR     OUTPUT
0000160E                           616  
0000160E  43F9 00002641            617      LEA    lslout,A1
00001614  13FC 0001 000025FB       618      MOVE.B  #1,(OutputType)       
0000161C  6100 0C04                619      BSR    OUTPUT
00001620                           620      
00001620  3412                     621      MOVE.W (A2),D2
00001622  0242 00C0                622      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001626  EC4A                     623      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001628                           624  
00001628                           625  
00001628                           626      
00001628                           627      *now to print size 
00001628  4879 00001646            628      PEA op9 
0000162E  B47C 0002                629      cmp #2,D2 *if the size is 2 branch to long
00001632  6700 FCDC                630      BEQ long
00001636  B47C 0001                631      cmp #1,D2 *if the size is 1 branch to word
0000163A  6700 FCBE                632      BEQ word
0000163E  B47C 0000                633      cmp #0,D2 *if the size is 0 branch to byte
00001642  6700 FCA0                634      BEQ byte
00001646                           635  op9
00001646  6100 05E6                636      BSR EA_GROUP2
0000164A  6000 FC96                637      BRA return
0000164E                           638  
0000164E                           639  lsr
0000164E  13FC 0004 000025FB       640      MOVE.B  #4,(OutputType)
00001656  6100 0BCA                641      BSR     OUTPUT
0000165A                           642  
0000165A  43F9 00002645            643      LEA    lsrout,A1
00001660  13FC 0001 000025FB       644      MOVE.B  #1,(OutputType)       
00001668  6100 0BB8                645      BSR    OUTPUT
0000166C                           646      
0000166C  3412                     647      MOVE.W (A2),D2
0000166E  0242 00C0                648      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001672  EC4A                     649      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001674                           650  
00001674                           651  
00001674                           652      
00001674                           653      *now to print size 
00001674  4879 00001692            654      PEA op10 
0000167A  B47C 0002                655      cmp #2,D2 *if the size is 2 branch to long
0000167E  6700 FC90                656      BEQ long
00001682  B47C 0001                657      cmp #1,D2 *if the size is 1 branch to word
00001686  6700 FC72                658      BEQ word
0000168A  B47C 0000                659      cmp #0,D2 *if the size is 0 branch to byte
0000168E  6700 FC54                660      BEQ byte
00001692                           661  op10
00001692  6100 059A                662      BSR EA_GROUP2
00001696  6000 FC4A                663      BRA return
0000169A                           664  asl
0000169A  13FC 0004 000025FB       665      MOVE.B  #4,(OutputType)
000016A2  6100 0B7E                666      BSR     OUTPUT
000016A6                           667  
000016A6  43F9 00002649            668      LEA    aslout,A1
000016AC  13FC 0001 000025FB       669      MOVE.B  #1,(OutputType)       
000016B4  6100 0B6C                670      BSR    OUTPUT
000016B8                           671      
000016B8  3412                     672      MOVE.W (A2),D2
000016BA  0242 00C0                673      ANDI.W #%0000000011000000, D2 * set to only the size bits
000016BE  EC4A                     674      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000016C0                           675  
000016C0                           676  
000016C0                           677      
000016C0                           678      *now to print size 
000016C0  4879 000016DE            679      PEA op11 
000016C6  B47C 0002                680      cmp #2,D2 *if the size is 2 branch to long
000016CA  6700 FC44                681      BEQ long
000016CE  B47C 0001                682      cmp #1,D2 *if the size is 1 branch to word
000016D2  6700 FC26                683      BEQ word
000016D6  B47C 0000                684      cmp #0,D2 *if the size is 0 branch to byte
000016DA  6700 FC08                685      BEQ byte
000016DE                           686  op11
000016DE  6100 054E                687      BSR EA_GROUP2
000016E2  6000 FBFE                688      BRA return
000016E6                           689  
000016E6                           690  asr
000016E6  13FC 0004 000025FB       691      MOVE.B  #4,(OutputType)
000016EE  6100 0B32                692      BSR     OUTPUT
000016F2                           693  
000016F2  43F9 0000264D            694      LEA    asrout,A1
000016F8  13FC 0001 000025FB       695      MOVE.B  #1,(OutputType)       
00001700  6100 0B20                696      BSR    OUTPUT
00001704                           697      
00001704  3412                     698      MOVE.W (A2),D2
00001706  0242 00C0                699      ANDI.W #%0000000011000000, D2 * set to only the size bits
0000170A  EC4A                     700      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000170C                           701  
0000170C                           702  
0000170C                           703      
0000170C                           704       *now to print size 
0000170C  4879 0000172A            705      PEA op12 
00001712  B47C 0002                706      cmp #2,D2 *if the size is 2 branch to long
00001716  6700 FBF8                707      BEQ long
0000171A  B47C 0001                708      cmp #1,D2 *if the size is 1 branch to word
0000171E  6700 FBDA                709      BEQ word
00001722  B47C 0000                710      cmp #0,D2 *if the size is 0 branch to byte
00001726  6700 FBBC                711      BEQ byte
0000172A                           712  op12
0000172A  6100 0502                713      BSR EA_GROUP2
0000172E  6000 FBB2                714      BRA return
00001732                           715      
00001732                           716  rol
00001732  13FC 0004 000025FB       717      MOVE.B  #4,(OutputType)
0000173A  6100 0AE6                718      BSR     OUTPUT
0000173E                           719  
0000173E  43F9 00002651            720      LEA    rolout,A1
00001744  13FC 0001 000025FB       721      MOVE.B  #1,(OutputType)       
0000174C  6100 0AD4                722      BSR    OUTPUT
00001750                           723      
00001750  3412                     724      MOVE.W (A2),D2
00001752  0242 00C0                725      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001756  EC4A                     726      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001758                           727  
00001758                           728  
00001758                           729      
00001758                           730     *now to print size 
00001758  4879 00001776            731      PEA op13 
0000175E  B47C 0002                732      cmp #2,D2 *if the size is 2 branch to long
00001762  6700 FBAC                733      BEQ long
00001766  B47C 0001                734      cmp #1,D2 *if the size is 1 branch to word
0000176A  6700 FB8E                735      BEQ word
0000176E  B47C 0000                736      cmp #0,D2 *if the size is 0 branch to byte
00001772  6700 FB70                737      BEQ byte
00001776                           738  op13
00001776  6100 04B6                739      BSR EA_GROUP2
0000177A  6000 FB66                740      BRA return
0000177E                           741  
0000177E                           742  ror
0000177E  13FC 0004 000025FB       743      MOVE.B  #4,(OutputType)
00001786  6100 0A9A                744      BSR     OUTPUT
0000178A                           745  
0000178A  43F9 00002655            746      LEA    rorout,A1
00001790  13FC 0001 000025FB       747      MOVE.B  #1,(OutputType)       
00001798  6100 0A88                748      BSR    OUTPUT
0000179C                           749      
0000179C  3412                     750      MOVE.W (A2),D2
0000179E  0242 00C0                751      ANDI.W #%0000000011000000, D2 * set to only the size bits
000017A2  EC4A                     752      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000017A4                           753  
000017A4                           754  
000017A4                           755     *now to print size 
000017A4  4879 000017C2            756      PEA op14 
000017AA  B47C 0002                757      cmp #2,D2 *if the size is 2 branch to long
000017AE  6700 FB60                758      BEQ long
000017B2  B47C 0001                759      cmp #1,D2 *if the size is 1 branch to word
000017B6  6700 FB42                760      BEQ word
000017BA  B47C 0000                761      cmp #0,D2 *if the size is 0 branch to byte
000017BE  6700 FB24                762      BEQ byte
000017C2                           763  op14
000017C2  6100 046A                764      BSR EA_GROUP2
000017C6  6000 FB1A                765      BRA return
000017CA                           766      
000017CA                           767      
000017CA                           768  
000017CA                           769  lea
000017CA  13FC 0004 000025FB       770      MOVE.B  #4,(OutputType)
000017D2  6100 0A4E                771      BSR     OUTPUT
000017D6                           772  
000017D6  43F9 0000262E            773      LEA    leaout,A1
000017DC  13FC 0001 000025FB       774      MOVE.B  #1,(OutputType)       
000017E4  6100 0A3C                775      BSR    OUTPUT
000017E8  6100 04A2                776      BSR EA_GROUP4
000017EC  6000 FAF4                777      BRA return
000017F0                           778      
000017F0                           779  or
000017F0  13FC 0004 000025FB       780      MOVE.B  #4,(OutputType)
000017F8  6100 0A28                781      BSR     OUTPUT
000017FC                           782  
000017FC  43F9 0000263A            783      LEA    orout,A1
00001802  13FC 0001 000025FB       784      MOVE.B  #1,(OutputType)       
0000180A  6100 0A16                785      BSR    OUTPUT
0000180E                           786      
0000180E                           787          
0000180E  3412                     788      MOVE.W (A2),D2
00001810  0242 00C0                789      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001814  EC4A                     790      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001816                           791  
00001816                           792        *now to print size 
00001816  4879 00001834            793      PEA op15 
0000181C  B47C 0002                794      cmp #2,D2 *if the size is 2 branch to long
00001820  6700 FAEE                795      BEQ long
00001824  B47C 0001                796      cmp #1,D2 *if the size is 1 branch to word
00001828  6700 FAD0                797      BEQ word
0000182C  B47C 0000                798      cmp #0,D2 *if the size is 0 branch to byte
00001830  6700 FAB2                799      BEQ byte
00001834                           800  op15    
00001834  6100 03B0                801      BSR EA_GROUP1
00001838  6000 FAA8                802      BRA return
0000183C                           803      
0000183C                           804  and
0000183C  13FC 0004 000025FB       805      MOVE.B  #4,(OutputType)
00001844  6100 09DC                806      BSR     OUTPUT
00001848                           807  
00001848  43F9 0000263D            808      LEA    andout,A1
0000184E  13FC 0001 000025FB       809      MOVE.B  #1,(OutputType)       
00001856  6100 09CA                810      BSR    OUTPUT
0000185A                           811      
0000185A                           812          
0000185A  3412                     813      MOVE.W (A2),D2
0000185C  0242 00C0                814      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001860  EC4A                     815      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001862                           816  
00001862                           817      *now to print size 
00001862  4879 00001880            818      PEA op16 
00001868  B47C 0002                819      cmp #2,D2 *if the size is 2 branch to long
0000186C  6700 FAA2                820      BEQ long
00001870  B47C 0001                821      cmp #1,D2 *if the size is 1 branch to word
00001874  6700 FA84                822      BEQ word
00001878  B47C 0000                823      cmp #0,D2 *if the size is 0 branch to byte
0000187C  6700 FA66                824      BEQ byte
00001880                           825  op16
00001880  6100 0364                826      BSR EA_GROUP1
00001884  6000 FA5C                827      BRA return    
00001888                           828  
00001888                           829  bcc
00001888  4243                     830      CLR D3
0000188A  3612                     831      MOVE.W (A2), D3
0000188C                           832  
0000188C  0243 0F00                833      ANDI.W #%0000111100000000,D3 * bits [11-8]
00001890  E04B                     834      LSR.W #8,D3
00001892  B67C 000E                835      CMP #%1110, D3 * BGT compare
00001896  6700 001E                836      BEQ bgt
0000189A  B67C 000F                837      CMP #%1111, D3 * BLE compare
0000189E  6700 003C                838      BEQ ble
000018A2  B67C 0007                839      CMP #%0111, D3 * BEQ compare
000018A6  6700 005A                840      BEQ beq
000018AA  B67C 0000                841      CMP #%0000, D3 * BRA compare, *doesn't really go here but it works
000018AE  6700 0078                842      BEQ bra
000018B2                           843  
000018B2  6000 009A                844      BRA data * goto data if doesn't work
000018B6                           845      
000018B6                           846  
000018B6                           847  bgt
000018B6  13FC 0004 000025FB       848      MOVE.B  #4,(OutputType)
000018BE  6100 0962                849      BSR     OUTPUT
000018C2                           850  
000018C2  43F9 00002659            851      LEA    bgtout,A1
000018C8  13FC 0001 000025FB       852      MOVE.B  #1,(OutputType)       
000018D0  6100 0950                853      BSR    OUTPUT
000018D4  6100 0626                854      BSR PRINT_BRA
000018D8  6000 FA08                855      BRA return
000018DC                           856  
000018DC                           857  ble
000018DC  13FC 0004 000025FB       858      MOVE.B  #4,(OutputType)
000018E4  6100 093C                859      BSR     OUTPUT
000018E8                           860  
000018E8  43F9 00002661            861      LEA    bleout,A1
000018EE  13FC 0001 000025FB       862      MOVE.B  #1,(OutputType)       
000018F6  6100 092A                863      BSR    OUTPUT
000018FA  6100 0600                864      BSR PRINT_BRA
000018FE  6000 F9E2                865      BRA return
00001902                           866  beq
00001902  13FC 0004 000025FB       867      MOVE.B  #4,(OutputType)
0000190A  6100 0916                868      BSR     OUTPUT
0000190E                           869  
0000190E  43F9 00002669            870      LEA    beqout,A1
00001914  13FC 0001 000025FB       871      MOVE.B  #1,(OutputType)       
0000191C  6100 0904                872      BSR    OUTPUT
00001920  6100 05DA                873      BSR PRINT_BRA
00001924  6000 F9BC                874      BRA return
00001928                           875  
00001928                           876  bra
00001928  13FC 0004 000025FB       877      MOVE.B  #4,(OutputType)
00001930  6100 08F0                878      BSR     OUTPUT
00001934                           879  
00001934  43F9 00002683            880      LEA    braout,A1
0000193A  13FC 0001 000025FB       881      MOVE.B  #1,(OutputType)       
00001942  6100 08DE                882      BSR    OUTPUT
00001946  6100 05B4                883      BSR PRINT_BRA
0000194A  6000 F996                884      BRA return
0000194E                           885  
0000194E                           886  data
0000194E  13FC 0004 000025FB       887      MOVE.B  #4,(OutputType)
00001956  6100 08CA                888      BSR     OUTPUT
0000195A                           889  
0000195A  43F9 0000268B            890      LEA    dataout,A1
00001960  13FC 0001 000025FB       891      MOVE.B  #1,(OutputType)       
00001968  6100 08B8                892      BSR    OUTPUT
0000196C                           893      
0000196C  13FC 0003 000025FB       894      MOVE.B  #3,(OutputType)       
00001974  6100 08AC                895      BSR    OUTPUT     
00001978  6000 F968                896      BRA return
0000197C                           897  
0000197C                           898  
0000197C                           899  **********************************************************
0000197C                           900  *Subroutine: USERINPUT
0000197C                           901  *What it does: Takes in user input, rejects bad input
0000197C                           902  *Registers: Uses register A1, D0, D5
0000197C                           903  *A1: Stores messages and user input
0000197C                           904  *D0: Used for TRAP #15
0000197C                           905  *D5: Temporaraly stores user input to be masked then transfered
0000197C                           906  *Paramemeters: No parameters
0000197C                           907  **********************************************************
0000197C                           908  USERINPUT:
0000197C  4281                     909      CLR.L   D1
0000197E  4282                     910      CLR.L   D2
00001980  4283                     911      CLR.L   D3
00001982  4284                     912      CLR.L   D4
00001984  4285                     913      CLR.L   D5
00001986  0C39 0000 000025FC       914      CMP.B   #0,(RepeatFlag)
0000198E  6700 001A                915      BEQ     welcomeExplanation
00001992  6000 0030                916      BRA     firstInput
00001996  02B9 00000000 00008000   917      AND.L   #$00000000,(Input1)
000019A0  02B9 00000000 00008004   918      AND.L   #$00000000,(Input2)
000019AA                           919      
000019AA                           920  welcomeExplanation
000019AA  43F9 0000236E            921      LEA     STARTMESSAGE,A1         
000019B0  103C 000E                922      MOVE.B  #14,D0
000019B4  4E4F                     923      TRAP    #15
000019B6                           924      
000019B6  5039 000025FA            925      ADD.B   #8,(LineCounter)
000019BC  13FC 0001 000025FC       926      MOVE.B  #1,(RepeatFlag)
000019C4                           927  
000019C4                           928  firstInput
000019C4  43F9 000024E0            929      LEA     INPUT1MESSAGE,A1        
000019CA  103C 000E                930      MOVE.B  #14,D0                  
000019CE  4E4F                     931      TRAP    #15                     Asks user for first input
000019D0  5239 000025FA            932      ADD.B   #1,(LineCounter)        Adds 1 to line counter
000019D6                           933      
000019D6  43F9 00008008            934      LEA     userInputStored,A1
000019DC  103C 0002                935      MOVE.B  #2,D0                   
000019E0  4E4F                     936      TRAP    #15                     User can input string for address
000019E2  5239 000025FA            937      ADD.B   #1,(LineCounter)        Adds 1 to line counter
000019E8                           938  
000019E8                           939      
000019E8  6100 0104                940      BSR     CONVERTATOH                 String converted to hex address
000019EC                           941      
000019EC  0C39 0000 000025F9       942      CMP.B   #0,(InputQuality)       Checks if bad input flag set
000019F4  6700 0014                943      BEQ     throwInput1CharError
000019F8                           944  
000019F8                           945      
000019F8  CABC 00FFFFFF            946      AND.L   #$00FFFFFF,D5           
000019FE  23C5 00008000            947      MOVE.L  D5,input1               Moves result into input 1 memory location
00001A04  4285                     948      CLR.L   D5                      Clears D5 for future use
00001A06  6000 0020                949      BRA     secondInput
00001A0A                           950      
00001A0A                           951      
00001A0A                           952  throwInput1CharError
00001A0A  43F9 0000252C            953      LEA     INPUTERRORBADCHAR,A1
00001A10  103C 000E                954      MOVE.B  #14,D0
00001A14  4E4F                     955      TRAP    #15                     Outputs bad character error message
00001A16  5639 000025FA            956      ADD.B   #3,(LineCounter)        Adds 2 to line counter
00001A1C                           957      
00001A1C  13FC 0001 000025F9       958      MOVE.B  #1,(InputQuality)       Resets quality flag to default (good)
00001A24  4285                     959      CLR.L   D5                      Clears D5 for future use
00001A26                           960      
00001A26                           961      
00001A26                           962      
00001A26  609C                     963      BRA     firstInput              Tries again for input1
00001A28                           964  
00001A28                           965      
00001A28                           966  secondInput
00001A28  43F9 00002506            967      LEA     INPUT2MESSAGE,A1        
00001A2E  103C 000E                968      MOVE.B  #14,D0                  
00001A32  4E4F                     969      TRAP    #15                     Asks user for second input
00001A34  5239 000025FA            970      ADD.B   #1,(LineCounter)
00001A3A                           971      
00001A3A  43F9 00008008            972      LEA     userInputStored,A1
00001A40  103C 0002                973      MOVE.B  #2,D0                   
00001A44  4E4F                     974      TRAP    #15                     User can input string for address
00001A46  5239 000025FA            975      ADD.B   #1,(LineCounter)
00001A4C                           976  
00001A4C                           977      
00001A4C  6100 00A0                978      BSR     CONVERTATOH                 String converted to hex address
00001A50                           979  
00001A50  0C39 0000 000025F9       980      CMP.B   #0,(InputQuality)       
00001A58  6700 001E                981      BEQ     throwInput2CharError    Checks if bad input flag set
00001A5C                           982      
00001A5C  CABC 00FFFFFF            983      AND.L   #$00FFFFFF,D5
00001A62  BAB9 00008000            984      CMP.L   (input1),D5
00001A68  6D00 002A                985      BLT     throwInput2LowerError
00001A6C  23C5 00008004            986      MOVE.L  D5,input2               Moves result into input 2 memory location
00001A72  4285                     987      CLR.L   D5                      Clears D5 for future use
00001A74  6000 0032                988      BRA     oddnumberchecker1
00001A78                           989  
00001A78                           990  
00001A78                           991      
00001A78                           992  throwInput2CharError
00001A78  43F9 0000252C            993      LEA     INPUTERRORBADCHAR,A1    
00001A7E  103C 000E                994      MOVE.B  #14,D0
00001A82  4E4F                     995      TRAP    #15                     Outputs bad character error message
00001A84                           996      
00001A84  5639 000025F9            997      ADD.B  #3,(InputQuality)        Resets quality flag to default (good)
00001A8A  4285                     998      CLR.L   D5                      Clears D5 for future use
00001A8C                           999      
00001A8C  5639 000025FA           1000      ADD.B   #3,(LineCounter)
00001A92                          1001      
00001A92  6094                    1002      BRA     secondInput             Tries again for input2
00001A94                          1003      
00001A94                          1004  throwInput2LowerError
00001A94  43F9 0000254A           1005      LEA     INPUTERROR2SMALLER,A1
00001A9A  103C 000E               1006      MOVE.B  #14,D0
00001A9E  4E4F                    1007      TRAP    #15
00001AA0                          1008      
00001AA0  5639 000025FA           1009      ADD.B   #3,(LineCounter)
00001AA6                          1010      
00001AA6  6080                    1011      BRA     secondInput
00001AA8                          1012      
00001AA8                          1013  oddnumberchecker1
00001AA8                          1014  
00001AA8  2C39 00008000           1015      MOVE.L  (input1),D6
00001AAE  CCBC 0000000F           1016      AND.L   #$0000000F,D6
00001AB4  CC3C 0001               1017      AND.B   #%0001,D6
00001AB8  BC3C 0001               1018      CMP.B   #%0001,D6
00001ABC  6700 0006               1019      BEQ     oddnumber1
00001AC0  6000 000A               1020      BRA     oddnumberchecker2
00001AC4                          1021      
00001AC4                          1022  oddnumber1    
00001AC4  52B9 00008000           1023      ADD.L   #1,(input1)  
00001ACA  4285                    1024      CLR.L   D5
00001ACC                          1025  
00001ACC                          1026  oddnumberchecker2
00001ACC  2C39 00008004           1027      MOVE.L  (input2),D6
00001AD2  CCBC 0000000F           1028      AND.L   #$0000000F,D6
00001AD8  CC3C 0001               1029      AND.B   #%0001,D6
00001ADC  BC3C 0001               1030      CMP.B   #%0001,D6
00001AE0  6700 0002               1031      BEQ     oddnumber2 
00001AE4                          1032  
00001AE4                          1033  oddnumber2
00001AE4  52B9 00008004           1034      ADD.L   #1,(input2)
00001AEA  4285                    1035      CLR.L   D5
00001AEC  4E75                    1036      RTS
00001AEE                          1037    
00001AEE                          1038         
00001AEE                          1039  
00001AEE                          1040  
00001AEE                          1041  
00001AEE                          1042  **********************************************************
00001AEE                          1043  *Subroutine: CONVERTATOH
00001AEE                          1044  *What it does: Converts user input to hex code
00001AEE                          1045  *Registers: Uses register A1, D2, D5
00001AEE                          1046  *Paramemeters: User input stored in (A1)
00001AEE                          1047  ********************************************************** 
00001AEE                          1048  CONVERTATOH:
00001AEE                          1049      
00001AEE                          1050  AtoH
00001AEE  1419                    1051      MOVE.B  (A1)+,D2                Takes first bit (letter), moves to D2 for testing
00001AF0                          1052      
00001AF0  B43C 0000               1053      CMP.B   #$00,D2                 Compares to 00, since 00 is null (enter)
00001AF4  6700 004C               1054      BEQ     Finish                  Moves to finish if they are equal (no more input)
00001AF8                          1055      
00001AF8  E985                    1056      ASL.L   #4,D5
00001AFA                          1057      
00001AFA  B43C 0030               1058      CMP.B   #$30,D2
00001AFE  6D00 0044               1059      BLT     inputError
00001B02                          1060      
00001B02  B43C 0039               1061      CMP.B   #$39,D2                 Compares to 39, because 39 in ASCII is 9, which is largest number
00001B06  6E00 000A               1062      BGT     upperCase               Branches if greater, may or may not be a letter in hex
00001B0A                          1063      
00001B0A  0402 0030               1064      SUBI.B  #$30,D2                 Subtracts 30 to turn it into it's hex format
00001B0E  DA02                    1065      ADD.B   D2,D5
00001B10                          1066      
00001B10  60DC                    1067      BRA     AtoH
00001B12                          1068  
00001B12                          1069          
00001B12                          1070  upperCase   
00001B12  B43C 0041               1071      CMP.B   #$41,D2
00001B16  6D00 002C               1072      BLT     InputError              Greater than 39 and less than 41 is not part of hex code
00001B1A                          1073      
00001B1A  B43C 0046               1074      CMP.B   #$46,D2                 
00001B1E  6E00 000A               1075      BGT     lowerCase               Greater than 46 may be hex code in lowercase
00001B22                          1076      
00001B22  0402 0037               1077      SUBI.B  #$37,D2                 Subtracts 37 to turn it into hex format
00001B26  DA02                    1078      ADD.B   D2,D5
00001B28  60C4                    1079      BRA     AtoH
00001B2A                          1080  
00001B2A                          1081  lowerCase
00001B2A  B43C 0061               1082      CMP.B   #$61,D2
00001B2E  6D00 0014               1083      BLT     InputError              Greater than 46 and less than 61 is not part of hex code
00001B32                          1084      
00001B32  B43C 0066               1085      CMP.B   #$66,D2
00001B36  6E00 000C               1086      BGT     InputError              Greater than 66 is not part of hex code
00001B3A                          1087      
00001B3A  0402 0057               1088      SUBI.B  #$57,D2
00001B3E  DA02                    1089      ADD.B   D2,D5
00001B40  60AC                    1090      BRA     AtoH
00001B42                          1091          
00001B42                          1092  Finish
00001B42  4E75                    1093      RTS                             Return from CONVERT
00001B44                          1094      
00001B44                          1095  inputError
00001B44  13FC 0000 000025F9      1096      MOVE.B  #0,(InputQuality)
00001B4C  4E75                    1097      RTS
00001B4E                          1098  
00001B4E                          1099  *********************************************************************
00001B4E                          1100  *Subroutine: EA
00001B4E                          1101  *What it does: outputs the ea for a given opword
00001B4E                          1102  *Registers: Uses register A1, D4 , d5 , d6
00001B4E                          1103  *A1: used to store opcode
00001B4E                          1104  *Paramemeters: A1
00001B4E                          1105  *A1: Stores what should be used--++
00001B4E                          1106  *********************************************************************  
00001B4E  =0000003F               1107  BITS0TO5_MASK   EQU %00111111
00001B4E  =000000C0               1108  BITS7TO8_MASK   EQU %11000000
00001B4E  =00000E00               1109  BITS9TO11_MASK  EQU %00000111000000000
00001B4E                          1110  
00001B4E  1E3C 000A               1111  FORMAT_IMMEDIATE_DATA   MOVE.B  #10,D7
00001B52  BC7C 0000               1112                          CMP     #0,D6
00001B56  6700 0006               1113                          BEQ     IMMEDIATE0
00001B5A  6000 0004               1114                          BRA     IMMEDIATE_END
00001B5E  7C08                    1115  IMMEDIATE0              MOVEQ   #8,D6
00001B60                          1116  
00001B60  4E75                    1117  IMMEDIATE_END           RTS
00001B62                          1118  
00001B62  3212                    1119  MOVE_MOVEA_EA   MOVE.W  (A2),D1
00001B64  0201 003F               1120                  ANDI.B  #BITS0TO5_MASK,D1           * Isolate the source EA bits
00001B68  0001 00C0               1121                  ORI.B   #BITS7TO8_MASK,D1           * Populate the S and D bits
00001B6C  1C01                    1122                  MOVE.B  D1,D6                   * Pass source EA to print subroutine
00001B6E  3212                    1123                  MOVE.W  (A2),D1         
00001B70  3412                    1124                  MOVE.W  (A2),D2 
00001B72  0241 0E00               1125                  ANDI.W  #BITS9TO11_MASK,D1   * Isolate the destination register number
00001B76  163C 0009               1126                  MOVE.B  #9,D3                   * Prepare shift count
00001B7A  E669                    1127                  LSR.W   D3,D1                   * Move destination register bits right
00001B7C  0242 01C0               1128                  ANDI.W  #%0000000111000000,D2   * Isolate the destination mode
00001B80  E64A                    1129                  LSR.W   #3,D2                  * Move destination mode bits right
00001B82  8242                    1130                  OR.W    D2,D1
00001B84  1A01                    1131                  MOVE.B  D1,D5                   * Pass destination EA to print subroutine
00001B86  1206                    1132                  MOVE.B  D6,D1               * Pass source into subroutine
00001B88  4EB9 00001E88           1133                  JSR     CHECK_VALID_EA
00001B8E  1205                    1134                  MOVE.B  D5,D1               * Pass destination into subroutine
00001B90  4EB9 00001E88           1135                  JSR     CHECK_VALID_EA
00001B96  6100 0006               1136                  bsr     PRINT_EA1
00001B9A                          1137                  
00001B9A  6000 F47A               1138                  bra     loopreturn
00001B9E                          1139                  
00001B9E                          1140  PRINT_EA1
00001B9E  1806                    1141                  MOVE.B  D6,D4
00001BA0  4EB9 00001ECC           1142                  JSR     PRINT_EA                    * PRINT SOURCE EA
00001BA6                          1143                          
00001BA6  0806 0006               1144                  BTST    #6,D6                       * CHECKING IF HAS DEST. EA
00001BAA  6700 0348               1145                  BEQ     PRINT_INSTRUCTION_RETURN    * ONLY ONE EA
00001BAE                          1146                          
00001BAE  4EB9 000021A6           1147                  JSR     PRINT_COMMA
00001BB4  1805                    1148                  MOVE.B  D5,D4
00001BB6  4EB9 00001ECC           1149                  JSR     PRINT_EA                    * PRINT DEST. EA
00001BBC  4EB9 000021D2           1150                  JSR     PRINT_NEWLINE
00001BC2  4E75                    1151                  RTS
00001BC4                          1152  PRINT_EA2
00001BC4  4EB9 000021E6           1153       JSR         PRINT_HASH_SIGN         * #
00001BCA  1206                    1154       MOVE.B      D6,D1                   * PRINT DECIMAL
00001BCC  7003                    1155       MOVE.L      #3,D0
00001BCE  4E4F                    1156       TRAP        #15
00001BD0  4EB9 000021A6           1157       JSR         PRINT_COMMA             * ,
00001BD6                          1158                          
00001BD6  1805                    1159       MOVE.B      D5,D4
00001BD8  4EB9 00001ECC           1160       JSR         PRINT_EA                * PRINT THE REGISTER
00001BDE  4EB9 000021D2           1161       JSR         PRINT_NEWLINE
00001BE4  4E75                    1162       RTS                
00001BE6                          1163  
00001BE6                          1164  *should be for the following opcodes- MOVEA, ADD, SUB, AND, OR 
00001BE6  3212                    1165  EA_GROUP1     MOVE.W  (A2),D1                 * Prepare to capture register field
00001BE8  3412                    1166          MOVE.W  (A2),D2                 * Prepare to capture EA field
00001BEA  0201 003F               1167          ANDI.B  #BITS0TO5_MASK,D1       * Isolate the source EA bits
00001BEE                          1168          
00001BEE  0242 0E00               1169          ANDI.W  #BITS9TO11_MASK,D2      * Isolate the source EA bits
00001BF2  163C 0009               1170          MOVE.B  #9,D3                   * Prepare shift count
00001BF6  E66A                    1171          LSR.W   D3,D2                   * Move register bits right
00001BF8  0202 00C7               1172          ANDI.B  #%11000111,D2           * Set EA mode
00001BFC  3612                    1173          MOVE.W  (A2),D3
00001BFE  0803 0008               1174          BTST    #8,D3                   * Check opmode
00001C02  6700 000A               1175          BEQ     EA1_MODE_ZERO           * Check opmode
00001C06                          1176          
00001C06  3A01                    1177  EA1_MODE_ONE    MOVE.W  D1,D5           * Set EA as destination
00001C08  3C02                    1178                  MOVE.W  D2,D6           * Set register as source
00001C0A  6000 0006               1179                  BRA EA1_END             * Complete subroutine
00001C0E                          1180          
00001C0E  3C01                    1181  EA1_MODE_ZERO   MOVE.W  D1,D6           * Set EA as source
00001C10  3A02                    1182                  MOVE.W  D2,D5           * Set register as destination
00001C12                          1183  
00001C12  0006 00C0               1184  EA1_END         ORI.B   #BITS7TO8_MASK,D6       * Populate the S and D bits
00001C16  1206                    1185                  MOVE.B  D6,D1               * Pass source into subroutine
00001C18  4EB9 00001E88           1186                  JSR     CHECK_VALID_EA
00001C1E  1205                    1187                  MOVE.B  D5,D1               * Pass destination into subroutine
00001C20  4EB9 00001E88           1188                  JSR     CHECK_VALID_EA
00001C26  4EB8 1B9E               1189                  JSR     PRINT_EA1
00001C2A                          1190  
00001C2A  6000 F3EA               1191                  bra loopreturn
00001C2E                          1192  *should be for opcode LSL LSR ASL ASR ROL ROR but for register shifts
00001C2E  3C12                    1193  EA_GROUP2             MOVE.W  (A2),D6         * Prepare to capture source EA
00001C30  0246 0E00               1194                  ANDI.W  #BITS9TO11_MASK,D6      * Isolate the source EA bits
00001C34  163C 0009               1195                  MOVE.B  #9,D3                   * Prepare shift count
00001C38  E66E                    1196                  LSR.W   D3,D6                   * Move register bits right
00001C3A  3612                    1197                  MOVE.W  (A2),D3
00001C3C  0803 0005               1198                  BTST    #5,D3           * Check whether shift count is immediate
00001C40  6700 000A               1199                  BEQ     EA2_IMMEDIATE
00001C44                          1200   
00001C44  0006 00C0               1201  EA2_REGISTER    ORI.B   #%11000000,D6   * Set S and D bits
00001C48  6000 000A               1202                  BRA     EA2_END         * Complete subroutine
00001C4C                          1203                  
00001C4C  1E3C 000A               1204  EA2_IMMEDIATE   MOVE.B  #10,D7          * Prepare to pass immediate data to print subroutine
00001C50  4EB8 1B4E               1205                  JSR     FORMAT_IMMEDIATE_DATA
00001C54                          1206                  
00001C54  3A12                    1207  EA2_END         MOVE.W  (A2),D5         * Prepare to capture destination EA
00001C56  CA3C 0007               1208                  AND.B   #%00000111,D5
00001C5A  1206                    1209                  MOVE.B  D6,D1               * Pass source into subroutine
00001C5C  4EB9 00001E88           1210                  JSR     CHECK_VALID_EA
00001C62  1205                    1211                  MOVE.B  D5,D1               * Pass destination into subroutine
00001C64  4EB9 00001E88           1212                  JSR     CHECK_VALID_EA
00001C6A  4EB8 1BC4               1213                  JSR     PRINT_EA2
00001C6E  6000 F3A6               1214                  bra loopreturn   
00001C72                          1215  
00001C72                          1216  
00001C72                          1217  *should be for opcode LSL LSR ASL ASR ROL ROR but for register shifts
00001C72  3C12                    1218  EA_GROUP3     MOVE.W  (A2),D6
00001C74  0206 003F               1219          ANDI.B  #BITS0TO5_MASK,D6       * Isolate the source EA bits
00001C78  0006 0080               1220          ORI.B   #%10000000,D6
00001C7C  1206                    1221          MOVE.B  D6,D1               * Pass source into subroutine
00001C7E  4EB9 00001E88           1222          JSR     CHECK_VALID_EA
00001C84  4EB8 1BC4               1223          JSR     PRINT_EA2
00001C88  6000 F38C               1224          bra loopreturn
00001C8C                          1225  
00001C8C                          1226  *should be for LEA and ADDA(SHOULD WORK BETTER THEN EA GROUP 1)
00001C8C  3212                    1227  EA_GROUP4     MOVE.W  (A2),D1         
00001C8E  0201 003F               1228          ANDI.B  #BITS0TO5_MASK,D1       * Isolate the source EA bits
00001C92  0001 00C0               1229          ORI.B   #BITS7TO8_MASK,D1       * Populate the S and D bits
00001C96  1C01                    1230          MOVE.B  D1,D6                   * Pass source EA to print subroutine
00001C98  3212                    1231          MOVE.W  (A2),D1         
00001C9A                          1232          
00001C9A  0241 0E00               1233          ANDI.W  #BITS9TO11_MASK,D1   * Isolate the destination register number
00001C9E  143C 0009               1234          MOVE.B  #9,D2                   * Prepare shift count
00001CA2  E469                    1235          LSR.W   D2,D1                   * Move register bits right
00001CA4  0201 00CF               1236          ANDI.B  #%11001111,D1           * Set destination mode
00001CA8  0001 0008               1237          ORI.B   #%00001000,D1           * Set destination mode
00001CAC  1A01                    1238          MOVE.B  D1,D5                   * Pass destination EA to print subroutine
00001CAE  1206                    1239          MOVE.B  D6,D1               * Pass source into subroutine
00001CB0  4EB9 00001E88           1240          JSR     CHECK_VALID_EA
00001CB6  1205                    1241          MOVE.B  D5,D1               * Pass destination into subroutine
00001CB8  4EB9 00001E88           1242          JSR     CHECK_VALID_EA
00001CBE  4EB8 1BC4               1243          JSR     PRINT_EA2
00001CC2  6000 F352               1244          bra loopreturn
00001CC6                          1245          
00001CC6  3C12                    1246  ADDQ_EA MOVE.W  (A2),D6                 * Prepare source data bits
00001CC8  0246 0E00               1247          ANDI.W  #BITS9TO11_MASK,D6      * Isolate source data bits
00001CCC  163C 0009               1248          MOVE.B  #9,D3                   * Prepare shift count
00001CD0  E66E                    1249          LSR.W   D3,D6                  * Move source data bits right            !---
00001CD2  3A12                    1250          MOVE.W  (A2),D5                 * Prepare destination bits
00001CD4  0205 003F               1251          ANDI.B  #BITS0TO5_MASK,D5       * Isolate destination bits
00001CD8  4EB8 1B4E               1252          JSR     FORMAT_IMMEDIATE_DATA
00001CDC  1206                    1253          MOVE.B  D6,D1               * Pass source into subroutine
00001CDE  4EB9 00001E88           1254          JSR     CHECK_VALID_EA
00001CE4  1205                    1255          MOVE.B  D5,D1               * Pass destination into subroutine
00001CE6  4EB9 00001E88           1256          JSR     CHECK_VALID_EA
00001CEC  4EB8 1BC4               1257          JSR     PRINT_EA2
00001CF0  6000 F324               1258          bra loopreturn !---
00001CF4                          1259          
00001CF4  3C12                    1260  MOVEQ_EA    MOVE.W  (A2),D6                 * Prepare source data bits          !---
00001CF6  CC7C 00FF               1261              AND.W   #$00FF,D6                                                   !---
00001CFA  3A12                    1262              MOVE.W  (A2),D5                 * Prepare destination regiter bits
00001CFC  0245 0E00               1263              ANDI.W  #BITS9TO11_MASK,D5      * Isolate destination register bits
00001D00  163C 0009               1264              MOVE.B  #9,D3                   * Prepare shift count
00001D04  E66D                    1265              LSR.W   D3,D5                   * Move destination register bits right
00001D06  1E3C 000A               1266              MOVE.B  #10,D7
00001D0A  1206                    1267              MOVE.B  D6,D1               * Pass source into subroutine
00001D0C  4EB9 00001E88           1268              JSR     CHECK_VALID_EA
00001D12  1205                    1269              MOVE.B  D5,D1               * Pass destination into subroutine
00001D14  4EB9 00001E88           1270              JSR     CHECK_VALID_EA
00001D1A  4EB8 1BC4               1271              JSR     PRINT_EA2
00001D1E  6000 F2F6               1272              bra loopreturn                                 !---
00001D22                          1273  
00001D22                          1274  
00001D22                          1275  
00001D22                          1276  
00001D22  3412                    1277  MOVEM_EA   MOVE.W (A2),D2
00001D24  0802 000A               1278             BTST    #10, D2
00001D28  6700 0132               1279             BEQ     Register_to_memory *IF THE DIRCTION BIT IS 0,
00001D2C                          1280             
00001D2C  6000 F2E8               1281             bra loopreturn 
00001D30                          1282            
00001D30                          1283             
00001D30                          1284                  
00001D30                          1285  *ELSE IT IS  memory-to-register transfers
00001D30                          1286  
00001D30                          1287  
00001D30                          1288  
00001D30                          1289  
00001D30                          1290     
00001D30  E68A                    1291  Memory_to_Register LSR.L #3, D2
00001D32  C43C 0007               1292                     AND.B #$07, D2
00001D36  B43C 0002               1293                     CMP.B #$2,D2
00001D3A  6700 0112               1294                     BEQ   MODE_010
00001D3E  B43C 0003               1295                     CMP.B #$03, D2
00001D42  6700 010A               1296                     BEQ   MODE_010  
00001D46  B43C 0007               1297                     CMP.B #$07,D2
00001D4A  6700 0102               1298                     BEQ   MODE_010  
00001D4E  4EF9 00001D54           1299                     JMP   WRONG_INSTRUCTION    
00001D54                          1300     
00001D54  1E3C 0005               1301  WRONG_INSTRUCTION            MOVE.B   #5, D7 ; A WRONG INSTRUCTION 'KEY'
00001D58  2C4A                    1302                               MOVEA.L  A2, A6 ;MOVING THE MEMORY ADDRESS INTO A6 WHEN INSTRUCTION IS WRONG 
00001D5A  3C12                    1303                               MOVE.W  (A2),D6 ;MOVE MEMORY ADDRESS INTO D6, AND INCREMENT A2 BY WORD
00001D5C  4E75                    1304                               RTS 
00001D5E                          1305  PRINT_MOVEM         
00001D5E                          1306                      
00001D5E  0806 0007               1307                      BTST    #7,D6
00001D62  6700 0014               1308                      BEQ     PRINT_MOVEM_MASK            * PRINT THE REGSTER/S FIRST
00001D66                          1309                      
00001D66  1806                    1310                      MOVE.B  D6,D4
00001D68  4EB9 00001ECC           1311                      JSR     PRINT_EA
00001D6E  4EB9 000021A6           1312                      JSR     PRINT_COMMA
00001D74  6000 F2A0               1313                      bra loopreturn
00001D78                          1314  ALL_REG     REG     D0-D7/A0-A6         ; all registers                     
00001D78  3802                    1315  PRINT_MOVEM_MASK        MOVE.W  D2,D4
00001D7A  4EB9 00001DA0           1316                          JSR     PRINT_MASK
00001D80  0806 0007               1317                          BTST    #7,D6                       * CHECK DIRCTION
00001D84  6600 016E               1318                          BNE     PRINT_INSTRUCTION_RETURN
00001D88                          1319                          
00001D88  4EB9 000021A6           1320                          JSR     PRINT_COMMA
00001D8E  1806                    1321                          MOVE.B  D6,D4
00001D90  4EB9 00001ECC           1322                          JSR     PRINT_EA
00001D96  4EF9 000021D2           1323                          JMP     PRINT_NEWLINE
00001D9C  6000 F278               1324                          bra loopreturn
00001DA0                          1325                          
00001DA0                          1326  *________________PRINTS THE MASK
00001DA0                          1327  *   PARAMETER   D4      THE MASK (WORD)
00001DA0                          1328  *               D6      THE DIRECTION (BIT#7)
00001DA0                          1329                          
00001DA0  48E7 FFFE               1330  PRINT_MASK      MOVEM.L     ALL_REG,-(SP)
00001DA4  1406                    1331                  MOVE.B      D6,D2                   * CHECKING IF IT IS PRE DECREMENT
00001DA6  C43C 0038               1332                  AND.B       #$38,D2
00001DAA  B43C 0020               1333                  CMP.B       #$20,D2
00001DAE  6600 0026               1334                  BNE         MEM_TO_REG
00001DB2                          1335  
00001DB2  720F                    1336  REG_TO_MEM          MOVE.L      #15,D1              * START OF FLIPPING THE MASK
00001DB4                          1337                      
00001DB4  B23C 0000               1338  FLIP_DIRECTION      CMP.B       #0,D1
00001DB8  6D00 001A               1339                      BLT         REG_TO_MEMO_OK
00001DBC  103C 001F               1340                      MOVE.B      #31,D0
00001DC0  9001                    1341                      SUB.B       D1,D0
00001DC2  0304                    1342                      BTST        D1,D4
00001DC4  6600 0008               1343                      BNE         FLIP_SET
00001DC8  0184                    1344  FLIP_CLR            BCLR        D0,D4
00001DCA  6000 0004               1345                      BRA         FLIP_LOOP_INCR
00001DCE  01C4                    1346  FLIP_SET            BSET        D0,D4                    
00001DD0  5301                    1347  FLIP_LOOP_INCR      SUB.B   #1,D1
00001DD2  60E0                    1348                      BRA     FLIP_DIRECTION 
00001DD4  4844                    1349  REG_TO_MEMO_OK      SWAP    D4
00001DD6                          1350  
00001DD6  163C 0000               1351  MEM_TO_REG          MOVE.B  #0,D3
00001DDA  367C 0000               1352                      MOVE.W  #0,A3
00001DDE  B63C 0010               1353  REG_COUNT           CMP.B   #16,D3
00001DE2  6700 000E               1354                      BEQ     PRINT_MASK_LOOP_START
00001DE6  0704                    1355                      BTST    D3,D4
00001DE8  6700 0004               1356                      BEQ     REG_COUNT_INCR
00001DEC  524B                    1357                      ADD.W   #1,A3
00001DEE  5203                    1358  REG_COUNT_INCR      ADD.B   #1,D3
00001DF0  60EC                    1359                      BRA     REG_COUNT
00001DF2                          1360                      
00001DF2  163C 0000               1361  PRINT_MASK_LOOP_START   MOVE.B      #0,D3
00001DF6                          1362  
00001DF6  B63C 0010               1363  PRINT_MASK_LOOP     CMP.B   #16, D3
00001DFA  6700 0046               1364                      BEQ     PRINT_MASK_RETURN
00001DFE  0704                    1365                      BTST    D3,D4
00001E00  6600 0006               1366                      BNE     SET_MASK
00001E04  6000 0036               1367                      BRA     PRINT_MASK_LOOP_INCR
00001E08  B63C 0007               1368  SET_MASK        CMP.B   #7,D3
00001E0C  6E00 0012               1369                  BGT     A_REG
00001E10  123C 00D0               1370  D_REG           MOVE.B  #$D0, D1
00001E14  D203                    1371                  ADD.B   D3,D1
00001E16  4EB9 000020F8           1372                  JSR     PRINT_REGISTOR
00001E1C  6000 000E               1373                  BRA     PRINT_SLASH
00001E20  123C 0098               1374  A_REG               MOVE.B  #$98,D1
00001E24  D203                    1375                      ADD.B   D3,D1
00001E26  4EB9 000020F8           1376                      JSR     PRINT_REGISTOR
00001E2C  B6FC 0001               1377  PRINT_SLASH             CMP.W   #1,A3
00001E30  6700 000A               1378                          BEQ     PRINT_MASK_LOOP_INCR
00001E34  4EB9 0000220E           1379                          JSR     PRINT_FORWARD_SLASH
00001E3A  534B                    1380                          SUB.W   #1,A3
00001E3C  5203                    1381  PRINT_MASK_LOOP_INCR    ADD.B   #1,D3
00001E3E  5301                    1382                          SUB.B   #1,D1
00001E40  60B4                    1383                          BRA     PRINT_MASK_LOOP
00001E42  4CDF 7FFF               1384  PRINT_MASK_RETURN       MOVEM.L     (SP)+, ALL_REG
00001E46  6100 038A               1385                          BSR print_newline
00001E4A  6000 F1CA               1386                          bra loopreturn
00001E4E                          1387             
00001E4E  3412                    1388  MODE_010  MOVE.W    (A2),D2
00001E50  C43C 003F               1389            AND.B     #$3F,D2
00001E54  08C2 0007               1390            BSET      #7,D2 *SET THE DESTINATION INDICATOR
00001E58  1C02                    1391            MOVE.B    D2,D6
00001E5A  4E75                    1392            RTS
00001E5C                          1393  
00001E5C  3412                    1394  Register_to_memory MOVE.W (A2),D2
00001E5E  E68A                    1395                     LSR.L #3, D2
00001E60  C43C 0007               1396                     AND.B #$07, D2
00001E64  B43C 0002               1397                     CMP.B #$2,D2
00001E68  6700 0016               1398                     BEQ   MODE_01_0
00001E6C  B43C 0004               1399                     CMP.B #$04, D2
00001E70  6700 000E               1400                     BEQ   MODE_01_0 
00001E74  B43C 0007               1401                     CMP.B #$07,D2
00001E78  6700 0006               1402                     BEQ   MODE_01_0 
00001E7C  4EF8 1D54               1403                     JMP   WRONG_INSTRUCTION
00001E80                          1404                     
00001E80                          1405  
00001E80  3C12                    1406  MODE_01_0       MOVE.W  (A2),D6
00001E82  0206 003F               1407                  ANDI.B  #$3F,D6
00001E86  4E75                    1408                  RTS
00001E88                          1409           
00001E88  1001                    1410  CHECK_VALID_EA  MOVE.B  D1,D0
00001E8A  0200 0038               1411                  ANDI.B  #%111000,D0
00001E8E  E648                    1412                  LSR     #3,D0
00001E90  B03C 0005               1413                  CMP.B   #%00000101,D0
00001E94  6700 002C               1414                  BEQ     INVALID_EA
00001E98  B03C 0006               1415                  CMP.B   #%00000110,D0
00001E9C  6700 0024               1416                  BEQ     INVALID_EA
00001EA0  B03C 0007               1417                  CMP.B   #%00000111,D0
00001EA4  6700 0004               1418                  BEQ     VALID_EA_PC
00001EA8  4E75                    1419                  RTS
00001EAA                          1420                  
00001EAA                          1421                  
00001EAA  1001                    1422  VALID_EA_PC     MOVE.B  D1,D0
00001EAC  0200 0007               1423                  ANDI.B  #%000111,D0
00001EB0  B03C 0010               1424                  CMP.B   #%00010000,D0
00001EB4  6700 000C               1425                  BEQ     INVALID_EA
00001EB8  B03C 0018               1426                  CMP.B   #%00011000,D0
00001EBC  6700 0004               1427                  BEQ     INVALID_EA
00001EC0  4E75                    1428                  RTS
00001EC2                          1429                  
00001EC2  4EB8 1D54               1430  INVALID_EA      JSR     WRONG_INSTRUCTION
00001EC6  3A7C 0005               1431                  MOVE.W  #5, A5
00001ECA  4E75                    1432                  RTS
00001ECC                          1433                  
00001ECC  48E7 FFDE               1434  PRINT_EA        MOVEM.L A0-A1/A3-A6/D0-D7,-(SP)
00001ED0  163C 0038               1435                  MOVE.B  #$38,D3
00001ED4  C604                    1436                  AND.B   D4,D3
00001ED6  C83C 0007               1437                  AND.B   #$7, D4
00001EDA                          1438                  
00001EDA  B63C 0000               1439                  CMP.B   #$0, D3
00001EDE  6600 0076               1440                  BNE     CHECK_EA_AR
00001EE2  0604 00D0               1441                  ADD.B   #$D0, D4
00001EE6  4281                    1442                  CLR.L   D1
00001EE8  1204                    1443                  MOVE.B  D4, D1
00001EEA  4EB9 000020F8           1444                  JSR     PRINT_REGISTOR              * DATA REG
00001EF0  6000 0176               1445                  BRA     PRINT_EA_RETURN
00001EF4  4EB9 000021D2           1446  PRINT_INSTRUCTION_RETURN    JSR         PRINT_NEWLINE
00001EFA  4E75                    1447                              rts
00001EFC                          1448   
00001EFC                          1449  PRINT_BRA                           
00001EFC                          1450  
00001EFC  3C12                    1451                  move.W      (A2),D6
00001EFE                          1452                  
00001EFE                          1453                                 
00001EFE  240A                    1454                  MOVE.L      A2,D2           * MOVING THE ADDRESS
00001F00  4281                    1455                  CLR.L       D1
00001F02                          1456                  
00001F02  BC3C 0000               1457                  CMP.B       #$00,D6                 * WORD DISPLACEMENT
00001F06  6700 001E               1458                  BEQ         WORD_DISPLACEMENT
00001F0A  BC3C 00FF               1459                  CMP.B       #$FF,D6                 * LONG DISPLACEMENT
00001F0E  6700 002A               1460                  BEQ         LONG_DISPLACEMENT
00001F12                          1461                  
00001F12  1206                    1462                  MOVE.B      D6,D1                   * BYTE DISPLACEMENT
00001F14  0801 0007               1463                  BTST        #7,D1                
00001F18  6700 0022               1464                  BEQ         PRINT_BRA_RETURN        * POSITIVE DISPLACEMENT
00001F1C                          1465                  
00001F1C  4601                    1466                  NOT.B       D1                      * 1'S COMPLEMENT    (ON BYTE)
00001F1E  5241                    1467                  ADD.W       #$1,D1                   * -> 2'S COMPLEMENT
00001F20  4481                    1468                  NEG.L       D1
00001F22  6000 0018               1469                  BRA         PRINT_BRA_RETURN
00001F26                          1470  
00001F26  321A                    1471  WORD_DISPLACEMENT       MOVE.W      (A2)+,D1         * READ THE DISPLACEMENT (WORD)
00001F28                          1472              
00001F28  0801 000F               1473                          BTST    #15,D1
00001F2C  6700 000E               1474                          BEQ         PRINT_BRA_RETURN        * POSITIVE DISPLACEMENT
00001F30                          1475                          
00001F30  4641                    1476                          NOT.W       D1                      * 1'S COMPLEMENT    (ON WORD)
00001F32  5281                    1477                          ADD.L       #$1,D1                   * -> 2'S COMPLEMENT
00001F34  4481                    1478                          NEG.L       D1
00001F36  6000 0004               1479                          BRA         PRINT_BRA_RETURN
00001F3A                          1480  
00001F3A  221A                    1481  LONG_DISPLACEMENT           MOVE.L      (A2)+,D1         * READ THE DISPLACEMENT (LONG)
00001F3C                          1482      
00001F3C  4EB9 000021FA           1483  PRINT_BRA_RETURN    JSR     PRINT_DOLLAR
00001F42  D282                    1484                      ADD.L   D2,D1
00001F44  2A01                    1485                      MOVE.L  D1,D5
00001F46  7604                    1486                      MOVE.L  #4,D3
00001F48  4EB9 00002090           1487                      JSR     PRINT_HEX
00001F4E  4EB9 000021D2           1488                      JSR     PRINT_NEWLINE                            
00001F54  4E75                    1489                      RTS                         * RETURN TO THE CALLER
00001F56                          1490  
00001F56  B63C 0008               1491  CHECK_EA_AR         CMP.B   #$8, D3
00001F5A  6600 0014               1492                      BNE     CHECK_EA_INDIRECT
00001F5E  0604 00A0               1493                      ADD.B   #$A0, D4
00001F62  4281                    1494                      CLR.L   D1
00001F64  1204                    1495                      MOVE.B  D4, D1
00001F66  4EB9 000020F8           1496                      JSR     PRINT_REGISTOR          * ADDRESS REG
00001F6C  6000 00FA               1497                      BRA     PRINT_EA_RETURN
00001F70                          1498                      
00001F70  B63C 0010               1499  CHECK_EA_INDIRECT       CMP.B   #$10, D3
00001F74  6600 0020               1500                          BNE     CHECK_EA_POST
00001F78  4EB9 0000214C           1501                          JSR     PRINT_OPEN_PARENTHESIS      * (
00001F7E  0604 00A0               1502                          ADD.B   #$A0, D4
00001F82  4281                    1503                          CLR.L   D1
00001F84  1204                    1504                          MOVE.B  D4, D1
00001F86  4EB9 000020F8           1505                          JSR     PRINT_REGISTOR              * ADDRESS REG
00001F8C  4EB9 00002160           1506                          JSR     PRINT_CLOSED_PARENTHESIS    * )
00001F92  6000 00D4               1507                          BRA     PRINT_EA_RETURN
00001F96                          1508                          
00001F96  B63C 0018               1509  CHECK_EA_POST   CMP.B   #$18,D3
00001F9A  6600 0026               1510                  BNE     CHECK_EA_PRE
00001F9E  4EB9 0000214C           1511                  JSR     PRINT_OPEN_PARENTHESIS      * (
00001FA4  0604 00A0               1512                  ADD.B   #$A0, D4
00001FA8  4281                    1513                  CLR.L   D1
00001FAA  1204                    1514                  MOVE.B  D4, D1
00001FAC  4EB9 000020F8           1515                  JSR     PRINT_REGISTOR              * ADDRESS REG
00001FB2  4EB9 00002160           1516                  JSR     PRINT_CLOSED_PARENTHESIS    * )
00001FB8  4EB9 00002178           1517                  JSR     PRINT_PLUS                  * +
00001FBE  6000 00A8               1518                  BRA     PRINT_EA_RETURN
00001FC2                          1519  
00001FC2  B63C 0020               1520  CHECK_EA_PRE        CMP.B   #$20,D3
00001FC6  6600 0026               1521                      BNE     CHECK_EA_AB_W
00001FCA  4EB9 0000218C           1522                      JSR     PRINT_MINUS                 * -
00001FD0  4EB9 0000214C           1523                      JSR     PRINT_OPEN_PARENTHESIS      * (
00001FD6  0604 00A0               1524                      ADD.B   #$A0, D4
00001FDA  4281                    1525                      CLR.L   D1
00001FDC  1204                    1526                      MOVE.B  D4, D1
00001FDE  4EB9 000020F8           1527                      JSR     PRINT_REGISTOR              * ADDRESS REG
00001FE4  4EB9 00002160           1528                      JSR     PRINT_CLOSED_PARENTHESIS    * )
00001FEA  6000 007C               1529                      BRA     PRINT_EA_RETURN
00001FEE                          1530  
00001FEE  D604                    1531  CHECK_EA_AB_W           ADD.B   D4,D3
00001FF0  B63C 0038               1532                          CMP.B   #$38,D3     
00001FF4  6600 0018               1533                          BNE     CHECK_EA_AB_L
00001FF8  4EB9 000021FA           1534                          JSR     PRINT_DOLLAR        * $
00001FFE  3A1A                    1535                          MOVE.W  (A2)+,D5            * PRINTING WORD ABSOLUTE
00002000  163C 0002               1536                          MOVE.B  #2,D3
00002004  4EB9 00002090           1537                          JSR     PRINT_HEX
0000200A  6000 005C               1538                          BRA     PRINT_EA_RETURN
0000200E                          1539                          
0000200E  B63C 0039               1540  CHECK_EA_AB_L       CMP.B   #$39, D3
00002012  6600 0018               1541                      BNE     CHECK_EA_IMM
00002016  4EB9 000021FA           1542                      JSR     PRINT_DOLLAR        * $
0000201C  2A1A                    1543                      MOVE.L  (A2)+,D5            * PRINTING LONG ABSOLUTE
0000201E  163C 0004               1544                      MOVE.B  #4,D3
00002022  4EB9 00002090           1545                      JSR     PRINT_HEX
00002028  6000 003E               1546                      BRA     PRINT_EA_RETURN
0000202C                          1547                      
0000202C  BE3C 0004               1548  CHECK_EA_IMM        CMP.B   #4,D7
00002030  6600 001E               1549                      BNE     READ_WORD_IMM
00002034  4EB9 000021E6           1550                      JSR     PRINT_HASH_SIGN     * #
0000203A  4EB9 000021FA           1551                      JSR     PRINT_DOLLAR        * $
00002040  2A1A                    1552                      MOVE.L  (A2)+,D5            * PRINTING LONG IMMIDIATE
00002042  163C 0004               1553                      MOVE.B  #4,D3
00002046  4EB9 00002090           1554                      JSR     PRINT_HEX
0000204C  6000 001A               1555                      BRA     PRINT_EA_RETURN
00002050                          1556                      
00002050  4EB9 000021E6           1557  READ_WORD_IMM       JSR     PRINT_HASH_SIGN     * #
00002056  4EB9 000021FA           1558                      JSR     PRINT_DOLLAR        * $
0000205C  3A1A                    1559                      MOVE.W  (A2)+,D5            * PRINTING WORD/BYTE IMMIDIATE        
0000205E  163C 0002               1560                      MOVE.B  #2,D3
00002062  4EB9 00002090           1561                      JSR     PRINT_HEX
00002068                          1562  
00002068  4CDF 7BFF               1563  PRINT_EA_RETURN     MOVEM.L     (SP)+,A0-A1/A3-A6/D0-D7   * THE RETURN FOR THE EA PRINTER
0000206C  4E75                    1564                      RTS
0000206E                          1565  ALL_REG     REG     D0-D7/A0-A6         ; all registers
0000206E                          1566  PRINT_BUFFER    DS.B    10
00002078= 30 30 30 30 30 30 ...   1567  IPUT_BUFFER_EX  DC.B    '00000000'
00002080                          1568  INPUT_BUFFER    DS.B    15                    
00002090  48E7 FFFE               1569  PRINT_HEX       MOVEM.L     ALL_REG,-(SP)
00002094  43F8 206E               1570                  LEA         PRINT_BUFFER, A1        *SETTING UP PRINT BUFFER
00002098  D3FC 0000000A           1571                  ADD.L       #10,A1
0000209E  133C 0000               1572                  MOVE.B      #0,-(A1)                *NULL FOR PRINTER TO STOP
000020A2  6000 000E               1573                  BRA         POPULATE_BUFFER
000020A6                          1574                  
000020A6  103C 000E               1575  PRINT_HEX_RETURN    MOVE.B      #14,D0
000020AA  4E4F                    1576                      TRAP        #15
000020AC  4CDF 7FFF               1577                      MOVEM.L     (SP)+,ALL_REG
000020B0  4E75                    1578                      RTS
000020B2                          1579                 
000020B2  B63C 0000               1580  POPULATE_BUFFER     CMP.B       #0,D3
000020B6  67EE                    1581                      BEQ         PRINT_HEX_RETURN
000020B8  183C 000F               1582                      MOVE.B      #$0F,D4
000020BC  C805                    1583                      AND.B       D5,D4
000020BE  E81D                    1584                      ROR.B       #4,D5
000020C0  4EB9 000020DC           1585                      JSR         HEX_TO_ASCII
000020C6  1304                    1586                      MOVE.B      D4,-(A1)
000020C8  1805                    1587                      MOVE.B      D5,D4
000020CA  C83C 000F               1588                      AND.B       #$0F,D4
000020CE  4EB9 000020DC           1589                      JSR         HEX_TO_ASCII
000020D4  1304                    1590                      MOVE.B      D4,-(A1)
000020D6  E08D                    1591                      LSR.L       #8,D5
000020D8  5303                    1592                      SUB.B       #1,D3
000020DA  60D6                    1593                      BRA         POPULATE_BUFFER
000020DC                          1594  
000020DC  48E7 E7FE               1595  HEX_TO_ASCII            MOVEM.L     A0-A6/D0-D2/D5-D7,-(SP)
000020E0  B83C 0009               1596                          CMP.B       #9,D4
000020E4  6F00 000C               1597                          BLE         NUMBER_TO_ASCII
000020E8  0604 0037               1598                          ADD.B       #$37,D4
000020EC  4CDF 7FE7               1599  HEX_TO_ASCII_RETURN     MOVEM.L   (SP)+,A0-A6/D0-D2/D5-D7
000020F0  4E75                    1600                          RTS
000020F2                          1601                  
000020F2  0604 0030               1602  NUMBER_TO_ASCII     ADD.B   #$30,D4
000020F6  60F4                    1603                      BRA     HEX_TO_ASCII_RETURN                    
000020F8                          1604                      
000020F8  48E7 FFFE               1605  PRINT_REGISTOR      MOVEM.L     ALL_REG,-(SP)       * keeping old value
000020FC  3F3C 0000               1606                      MOVE.W      #00,-(SP)           *for printing purpose
00002100  343C 00F0               1607                      MOVE.W      #$f0,D2             *manipulating each digit
00002104  C441                    1608                      AND.W       D1,D2
00002106  E842                    1609                      ASR.W       #4,D2
00002108  4EB9 0000212E           1610                      JSR         TO_STRING           * converts to the string ASCII val
0000210E  E142                    1611                      ASL.W       #8,D2
00002110                          1612                      
00002110  C27C 000F               1613                      AND.W       #$F,D1              * the last digit
00002114  1401                    1614                      MOVE.B      D1,D2               
00002116  4EB9 0000212E           1615                      JSR         TO_STRING
0000211C  3F02                    1616                      MOVE.W      D2,-(SP)            * puting on the stack to print
0000211E                          1617                      
0000211E  224F                    1618                      MOVE.L      SP,A1               * printing
00002120  103C 000E               1619                      MOVE.B      #14,D0
00002124  4E4F                    1620                      TRAP        #15
00002126  2A1F                    1621                      MOVE.L      (SP)+, D5           * Adjesting the sp
00002128                          1622  
00002128  4CDF 7FFF               1623  PRINT_REGISTOR_RETURN           MOVEM.L     (SP)+,ALL_REG   *returning the original val
0000212C  4E75                    1624                                  RTS
0000212E                          1625                                  
0000212E  B43C 0009               1626  TO_STRING   CMP.B   #9,D2               * check if digit or leter
00002132  6E00 0008               1627              BGT     LETTERS     
00002136  0602 0030               1628              ADD.B   #$30,D2             * offseting digit
0000213A  4E75                    1629              RTS
0000213C  0602 0037               1630  LETTERS     ADD.B   #$37,D2             * offseting leter
00002140  4E75                    1631              RTS   
00002142                          1632  
00002142                          1633  *________________________________________________________________________________________
00002142                          1634  
00002142                          1635  
00002142                          1636  *________________ PRINT OPEN PARENTHESIS ________________________________________
00002142                          1637          *PARAMENTER     NO PARAMETER NEEDED
00002142= 28 00                   1638  OPEN_PAR_TAG        DC.B    '(',0  
00002144= 29 00                   1639  CLOSED_PAR_TAG      DC.B    ')',0
00002146= 23 00                   1640  HASH_SIGN_TAG       DC.B    '#',0
00002148= 24 00                   1641  DOLLAR_TAG          DC.B    '$',0
0000214A= 2F 00                   1642  FORWARD_SLASH_TAG   DC.B    '/',0      
0000214C  48E7 FFFE               1643  PRINT_OPEN_PARENTHESIS  MOVEM.L     ALL_REG, -(SP)
00002150  43F8 2142               1644                          LEA         OPEN_PAR_TAG, A1
00002154  103C 000E               1645                          MOVE.B      #14,D0
00002158  4E4F                    1646                          TRAP        #15
0000215A  4CDF 7FFF               1647                          MOVEM.L     (SP)+,ALL_REG
0000215E  4E75                    1648                          RTS
00002160                          1649  *_________________________________________________________________________________
00002160                          1650  
00002160                          1651  *________________ PRINT CLOSED PARENTHESIS ________________________________________
00002160                          1652          *PARAMENTER     NO PARAMETER NEEDED
00002160                          1653          
00002160  48E7 FFFE               1654  PRINT_CLOSED_PARENTHESIS    MOVEM.L     ALL_REG, -(SP)
00002164  43F8 2144               1655                              LEA         CLOSED_PAR_TAG, A1
00002168  103C 000E               1656                              MOVE.B      #14,D0
0000216C  4E4F                    1657                              TRAP        #15
0000216E  4CDF 7FFF               1658                              MOVEM.L     (SP)+,ALL_REG
00002172  4E75                    1659                              RTS
00002174                          1660  *__________________________________________________________________________________
00002174                          1661  
00002174                          1662  *________________ PRINT PLUS SIGN _________________________________________________
00002174                          1663          *PARAMENTER     NO PARAMETER NEEDED
00002174= 2B 00                   1664  PLUS_TAG            DC.B    '+',0
00002176= 2D 00                   1665  MINUS_TAG           DC.B    '-',0        
00002178  48E7 FFFE               1666  PRINT_PLUS      MOVEM.L     ALL_REG, -(SP)
0000217C  43F8 2174               1667                  LEA         PLUS_TAG, A1
00002180  103C 000E               1668                  MOVE.B      #14,D0
00002184  4E4F                    1669                  TRAP        #15
00002186  4CDF 7FFF               1670                  MOVEM.L     (SP)+,ALL_REG
0000218A  4E75                    1671                  RTS
0000218C                          1672  *_________________________________________________________________________________
0000218C                          1673  
0000218C                          1674  *________________ PRINT MINUS SIGN _______________________________________________
0000218C                          1675          *PARAMENTER     NO PARAMETER NEEDED
0000218C                          1676          
0000218C  48E7 FFFE               1677  PRINT_MINUS         MOVEM.L     ALL_REG, -(SP)
00002190  43F8 2176               1678                      LEA         MINUS_TAG, A1
00002194  103C 000E               1679                      MOVE.B      #14,D0
00002198  4E4F                    1680                      TRAP        #15
0000219A  4CDF 7FFF               1681                      MOVEM.L     (SP)+,ALL_REG
0000219E  4E75                    1682                      RTS
000021A0                          1683  *_________________________________________________________________________________
000021A0                          1684  
000021A0                          1685  *________________ PRINT COMMA ____________________________________________________
000021A0                          1686          *PARAMENTER     NO PARAMETER NEEDED
000021A0= 09 00                   1687  TAB_TAG         DC.B    $9,0
000021A2= 20 00                   1688  SPACE_TAG       DC.B    ' ',0
000021A4= 2C 00                   1689  COMMA_TAG       DC.B    ',',0        
000021A6  48E7 FFFE               1690  PRINT_COMMA         MOVEM.L     ALL_REG,-(SP)
000021AA  43F8 21A4               1691                      LEA         COMMA_TAG, A1
000021AE  103C 000E               1692                      MOVE.B      #14,D0
000021B2  4E4F                    1693                      TRAP        #15
000021B4  4CDF 7FFF               1694                      MOVEM.L     (SP)+,ALL_REG
000021B8  4E75                    1695                      RTS
000021BA                          1696  *_________________________________________________________________________________
000021BA                          1697  
000021BA                          1698  *________________ PRINT TAB ______________________________________________________
000021BA                          1699          *PARAMENTER     NO PARAMETER NEEDED
000021BA                          1700          
000021BA  48E7 FFFE               1701  PRINT_TAB       MOVEM.L     ALL_REG,-(SP)
000021BE  43F8 21A0               1702                  LEA         TAB_TAG, A1
000021C2  103C 000E               1703                  MOVE.B      #14,D0
000021C6  4E4F                    1704                  TRAP        #15
000021C8  4CDF 7FFF               1705                  MOVEM.L     (SP)+,ALL_REG
000021CC  4E75                    1706                  RTS
000021CE                          1707  *_________________________________________________________________________________
000021CE                          1708  
000021CE                          1709  
000021CE                          1710  *_______________    PRINT NEWLINE   ________________________________________________
000021CE                          1711          *PARAMETER NO PARAMETER NEEDED
000021CE= 0D 0A 00                1712  NEWLINE_TAG         DC.B    CR,LF,0        
000021D2  48E7 FFFE               1713  PRINT_NEWLINE       MOVEM.L     ALL_REG,-(SP)
000021D6  43F8 21CE               1714                      LEA         NEWLINE_TAG, A1
000021DA  103C 000E               1715                      MOVE.B      #14,D0
000021DE  4E4F                    1716                      TRAP        #15
000021E0  4CDF 7FFF               1717                      MOVEM.L     (SP)+,ALL_REG
000021E4  4E75                    1718                      RTS
000021E6                          1719  
000021E6                          1720  *___________________________________________________________________________________
000021E6                          1721  
000021E6                          1722  
000021E6                          1723  *_______________    PRINT HASH SIGN   ________________________________________________
000021E6                          1724          *PARAMETER NO PARAMETER NEEDED
000021E6                          1725          
000021E6  48E7 FFFE               1726  PRINT_HASH_SIGN     MOVEM.L     ALL_REG,-(SP)
000021EA  43F8 2146               1727                      LEA         HASH_SIGN_TAG, A1
000021EE  103C 000E               1728                      MOVE.B      #14,D0
000021F2  4E4F                    1729                      TRAP        #15
000021F4  4CDF 7FFF               1730                      MOVEM.L     (SP)+,ALL_REG
000021F8  4E75                    1731                      RTS
000021FA                          1732  
000021FA                          1733  *___________________________________________________________________________________
000021FA                          1734  
000021FA                          1735  
000021FA                          1736  
000021FA                          1737  *_______________    PRINT DOLLAR   ________________________________________________
000021FA                          1738          *PARAMETER NO PARAMETER NEEDED
000021FA                          1739          
000021FA  48E7 FFFE               1740  PRINT_DOLLAR        MOVEM.L     ALL_REG,-(SP)
000021FE  43F8 2148               1741                      LEA         DOLLAR_TAG, A1
00002202  103C 000E               1742                      MOVE.B      #14,D0
00002206  4E4F                    1743                      TRAP        #15
00002208  4CDF 7FFF               1744                      MOVEM.L     (SP)+,ALL_REG
0000220C  4E75                    1745                      RTS
0000220E                          1746  
0000220E                          1747  *___________________________________________________________________________________
0000220E                          1748  
0000220E                          1749  
0000220E                          1750  
0000220E                          1751  *_______________    PRINT FORWARD SLASH   ________________________________________________
0000220E                          1752          *PARAMETER NO PARAMETER NEEDED
0000220E                          1753          
0000220E  48E7 FFFE               1754  PRINT_FORWARD_SLASH     MOVEM.L     ALL_REG,-(SP)
00002212  43F8 214A               1755                          LEA         FORWARD_SLASH_TAG, A1
00002216  103C 000E               1756                          MOVE.B      #14,D0
0000221A  4E4F                    1757                          TRAP        #15
0000221C  4CDF 7FFF               1758                          MOVEM.L     (SP)+,ALL_REG
00002220  4E75                    1759                          RTS
00002222                          1760  
00002222                          1761  
00002222                          1762     
00002222                          1763  *********************************************************************
00002222                          1764  *Subroutine: OUTPUT
00002222                          1765  *What it does: Outputs parts of opword, moves to new screen if needed
00002222                          1766  *Registers: Uses register A1, D0,
00002222                          1767  *A1: Used to store messages and single char
00002222                          1768  *Paramemeters: A1, A2
00002222                          1769  *A1: Stores what should be used
00002222                          1770  *********************************************************************  
00002222                          1771  
00002222                          1772       OUTPUT:
00002222                          1773       
00002222                          1774      
00002222                          1775       
00002222  0C39 0001 000025FB      1776       CMP.B  #1,(OutputType)
0000222A  6700 0026               1777       BEQ    outputOpcode
0000222E  0C39 0002 000025FB      1778       CMP.B  #2,(OutputType)
00002236  6700 0050               1779       BEQ    OutputSize
0000223A  0C39 0003 000025FB      1780       CMP.B  #3,(OutputType)
00002242  6700 004C               1781       BEQ    OutputData
00002246  0C39 0004 000025FB      1782       CMP.B  #4,(OutputType)
0000224E  6700 0096               1783       BEQ    OutputAddress
00002252                          1784       
00002252                          1785  outputOpcode    
00002252                          1786           
00002252  103C 000E               1787       MOVE.B #14,D0
00002256  4E4F                    1788       TRAP   #15
00002258                          1789       
00002258  5239 000025FA           1790       ADD.B  #1,(LineCounter)
0000225E                          1791       
0000225E  4E75                    1792       RTS
00002260                          1793       
00002260                          1794       
00002260                          1795  outputOpcodeNewScreen
00002260  2F09                    1796       MOVE.L A1,-(SP)                Storing last message to be used later
00002262                          1797       
00002262  43F9 000025D0           1798       LEA    OUTPUTNEWSCREEN,A1         
00002268  103C 000E               1799       MOVE.B #14,D0
0000226C  4E4F                    1800       TRAP   #15
0000226E                          1801       
0000226E  43F9 00008008           1802       LEA    userInputStored,A1         Pauses program to show screen full of data
00002274  103C 0002               1803       MOVE.B #2,D0
00002278  4E4F                    1804       TRAP   #15
0000227A                          1805       
0000227A  13FC 0000 000025FA      1806       MOVE.B #0,(LineCounter)        Sets LineCounter to 0 to reset screen
00002282                          1807       
00002282  225F                    1808       MOVE.L (SP)+,A1                Retriving message to be used     
00002284  6000 00A2               1809       BRA    outputAddressLoopEndContinue
00002288                          1810       
00002288                          1811  outputSize
00002288  103C 000E               1812      MOVE.B  #14,D0
0000228C  4E4F                    1813      TRAP    #15
0000228E  4E75                    1814      RTS
00002290                          1815  outputData
00002290  267C 00000800           1816      MOVE.L   #$800,A3
00002296  3692                    1817      MOVE.W  (A2),(A3)
00002298  2F06                    1818      MOVE.L  D6,-(SP)
0000229A  103C 0000               1819      MOVE.B  #0,D0
0000229E  43F9 00009005           1820      LEA     addressOutput,A1
000022A4                          1821  
000022A4                          1822  outputDataLoop
000022A4                          1823  *check if loop has run 4 times
000022A4  B03C 0002               1824      CMP.B   #2,D0
000022A8  6700 001C               1825      BEQ     outputDataLoopEnd
000022AC                          1826      *Grab byte from address, dont increment
000022AC  1C13                    1827      MOVE.B  (A3),D6
000022AE                          1828      *LSR to isolate left bit
000022AE  E80E                    1829      LSR.B   #4,D6
000022B0                          1830      *Call converthtoa
000022B0  6100 0096               1831      BSR     CONVERTHTOA
000022B4  12C6                    1832      MOVE.B  D6,(A1)+   
000022B6                          1833      *Grab bye from address, increment
000022B6  1C1B                    1834      MOVE.B  (A3)+,D6
000022B8                          1835      *AND Mask second digit
000022B8  CC3C 000F               1836      AND.B   #$0F,D6
000022BC  6100 008A               1837      BSR     CONVERTHTOA
000022C0  12C6                    1838      MOVE.B  D6,(A1)+
000022C2  5200                    1839      ADD.B   #1,D0
000022C4  60DE                    1840      BRA     outputDataLoop
000022C6                          1841      
000022C6                          1842  outputDataLoopEnd
000022C6  12BC 0000               1843      MOVE.B  #$00,(A1)
000022CA  2C1F                    1844      MOVE.L  (SP)+,D6
000022CC  43F9 00009005           1845      LEA     addressOutput,A1
000022D2  103C 000E               1846      MOVE.B  #14,D0
000022D6  4E4F                    1847      TRAP    #15
000022D8                          1848      
000022D8  43F9 000025F3           1849      LEA     NEWLINE,A1
000022DE  103C 000E               1850      MOVE.B  #14,D0
000022E2  4E4F                    1851      TRAP    #15
000022E4                          1852  
000022E4  4E75                    1853      RTS
000022E6                          1854   
000022E6                          1855      
000022E6                          1856  outputAddress
000022E6  267C 00000800           1857      MOVE.L  #$800,A3
000022EC  268A                    1858      MOVE.L  A2,(A3)
000022EE  2F06                    1859      MOVE.L  D6,-(SP)
000022F0  103C 0000               1860      MOVE.B  #0,D0
000022F4  43F9 00009005           1861      LEA     addressOutput,A1
000022FA                          1862  outputAddressLoop
000022FA                          1863      *check if loop has run 4 times
000022FA  B03C 0004               1864      CMP.B   #4,D0
000022FE  6700 001C               1865      BEQ     outputAddressLoopEnd
00002302                          1866      *Grab byte from address, dont increment
00002302  1C13                    1867      MOVE.B  (A3),D6
00002304                          1868      *LSR to isolate left bit
00002304  E80E                    1869      LSR.B   #4,D6
00002306                          1870      *Call converthtoa
00002306  6100 0040               1871      BSR     CONVERTHTOA
0000230A  12C6                    1872      MOVE.B  D6,(A1)+   
0000230C                          1873      *Grab bye from address, increment
0000230C  1C1B                    1874      MOVE.B  (A3)+,D6
0000230E                          1875      *AND Mask second digit
0000230E  CC3C 000F               1876      AND.B   #$0F,D6
00002312  6100 0034               1877      BSR     CONVERTHTOA
00002316  12C6                    1878      MOVE.B  D6,(A1)+
00002318  5200                    1879      ADD.B   #1,D0
0000231A  60DE                    1880      BRA     outputAddressLoop
0000231C                          1881      
0000231C                          1882      
0000231C                          1883  outputAddressLoopEnd
0000231C  0C39 001E 000025FA      1884      CMP.B  #30, (LineCounter)      Console holds 32 lines total, 30 used for dissassembly data
00002324  6C00 FF3A               1885      BGE    outputOpcodeNewScreen
00002328                          1886  outputAddressLoopEndContinue
00002328  12BC 0000               1887      MOVE.B  #$00,(A1)
0000232C  2C1F                    1888      MOVE.L  (SP)+,D6
0000232E  43F9 00009005           1889      LEA     addressOutput,A1
00002334                          1890      
00002334  103C 000E               1891      MOVE.B  #14,D0
00002338  4E4F                    1892      TRAP    #15
0000233A                          1893      
0000233A  43F9 000025F6           1894      LEA     spaces,A1
00002340  103C 000E               1895      MOVE.B  #14,D0
00002344  4E4F                    1896      TRAP    #15
00002346                          1897  
00002346                          1898  
00002346  4E75                    1899      RTS
00002348                          1900  
00002348                          1901  
00002348                          1902  *********************************************************************
00002348                          1903  *Subroutine: CONVERTHTOA
00002348                          1904  *What it does: Converts HEX to ASCII
00002348                          1905  *Registers: Uses register D6,D0
00002348                          1906  *D6: Stores hex character to be converted
00002348                          1907  *Paramemeters: D6
00002348                          1908  *D6: Stores hex characcter to be converted
00002348                          1909  *********************************************************************
00002348                          1910      CONVERTHTOA:
00002348                          1911      
00002348  BC3C 0009               1912      CMP.B   #9,D6
0000234C  6F00 0006               1913      BLE     zerotonine
00002350  6000 000A               1914      BRA     AtoF
00002354                          1915      
00002354                          1916  zerotonine    
00002354  0686 00000030           1917      ADD.L   #$30,D6
0000235A  4E75                    1918      RTS
0000235C                          1919  AtoF
0000235C  0686 00000037           1920      ADD.L   #$37,D6
00002362  4E75                    1921      RTS
00002364                          1922      
00002364                          1923  END_SIMULATION:
00002364                          1924          
00002364  103C 0009               1925      MOVE.B  #9,D0
00002368  4E4F                    1926      TRAP    #15
0000236A                          1927  
0000236A  FFFF FFFF               1928      SIMHALT             ; halt simulator
0000236E                          1929  
0000236E                          1930  * Put variables and constants here
0000236E= 57 65 6C 63 6F 6D ...   1931  STARTMESSAGE    DC.B    'Welcome to the CSS 422 dissasembler!',CR,LF
00002394= 53 6F 6D 65 20 71 ...   1932                  DC.B    'Some quick rules:',CR,LF
000023A7= 31 29 20 4F 6E 6C ...   1933                  DC.B    '1) Only the last 6 characters will be saved as the address',CR,LF
000023E3= 32 29 20 54 68 65 ...   1934                  DC.B    '2) The input only accepts hexadecimal input, both in upper and lower case',CR,LF
0000242E= 33 29 20 41 6E 79 ...   1935                  DC.B    '3) Any part of the input that is not within the hexadecimal range ',CR,LF
00002472= 20 20 20 77 69 6C ...   1936                  DC.B    '   will be rejected',CR,LF
00002487= 34 29 20 54 68 65 ...   1937                  DC.B    '4) The first input must be smaller than the second, otherwise it ',CR,LF
000024CA= 20 20 20 77 69 6C ...   1938                  DC.B    '   will be rejected',CR,LF,0      
000024E0= 50 6C 65 61 73 65 ...   1939  INPUT1MESSAGE   DC.B    'Please input the lower address edge',CR,LF,0
00002506= 50 6C 65 61 73 65 ...   1940  INPUT2MESSAGE   DC.B    'Please input the upper address edge',CR,LF,0
0000252C                          1941  
0000252C= 0D 0A 54 68 69 73 ...   1942  INPUTERRORBADCHAR   DC.B    CR,LF,'This value is not valid',CR,LF,CR,LF,0
0000254A= 0D 0A 49 6E 70 75 ...   1943  INPUTERROR2SMALLER  DC.B    CR,LF,'Input 2 is smaller than input 1. Input a larger value',CR,LF,CR,LF,0
00002586                          1944  
00002586= 54 6F 20 72 65 70 ...   1945  INPUTREPEAT     DC.B    'To repeat the program, press enter. Otherwise, press any button to quit',CR,LF,0
000025D0                          1946  
000025D0= 50 6C 65 61 73 65 ...   1947  OUTPUTNEWSCREEN     DC.B    'Please press enter for more code',CR,LF,0
000025F3                          1948  
000025F3= 0D 0A 00                1949  NEWLINE     DC.B    CR,LF,0
000025F6= 20 20 00                1950  SPACES      DC.B    '  ',0
000025F9                          1951  
000025F9= 01                      1952  InputQuality    DC.B    1       Set to 1 for default good
000025FA= 00                      1953  LineCounter     DC.B    0      Counts the number of lines used per screen (max of 31)
000025FB= 00                      1954  OutputType      DC.B    0      To track what type is being output
000025FC= 00                      1955  RepeatFlag      DC.B    0
000025FD                          1956  
000025FD= 4E 4F 50 0D 0A 00       1957  nopout  DC.B    'NOP',CR,LF,0
00002603= 4D 4F 56 45 00          1958  moveout  DC.B    'MOVE',0
00002608= 4D 4F 56 45 41 00       1959  moveaout DC.B      'MOVEA',0
0000260E= 4D 4F 56 45 51 20 ...   1960  moveqout DC.B   'MOVEQ  ',0
00002616= 4D 4F 56 45 4D 00       1961  movemout DC.B   'MOVEM',0
0000261C                          1962  
0000261C= 53 55 42 00             1963  subout    DC.B  'SUB',0
00002620= 41 44 44 00             1964  addout    DC.B 'ADD',0
00002624= 41 44 44 41 00          1965  addaout    DC.B 'ADDA',0
00002629= 41 44 44 51 00          1966  addqout    DC.B 'ADDQ',0
0000262E                          1967  
0000262E= 4C 45 41 20 20 20 ...   1968  leaout    DC.B  'LEA    ',0
00002636                          1969  
00002636= 4E 4F 54 00             1970  notout    DC.B  'NOT',0
0000263A= 4F 52 00                1971  orout DC.B     'OR',0
0000263D= 41 4E 44 00             1972  andout DC.B     'AND',0
00002641                          1973  
00002641                          1974  
00002641= 4C 53 4C 00             1975  lslout    DC.B  'LSL',0
00002645= 4C 53 52 00             1976  lsrout    DC.B  'LSR',0
00002649= 41 53 4C 00             1977  aslout    DC.B  'ASL',0
0000264D= 41 53 52 00             1978  asrout    DC.B  'ASR',0
00002651                          1979  
00002651= 52 4F 4C 00             1980  rolout    DC.B  'ROL',0
00002655= 52 4F 52 00             1981  rorout    DC.B  'ROR',0
00002659                          1982  
00002659= 42 47 54 20 20 20 ...   1983  bgtout DC.B     'BGT    ',0
00002661= 42 4C 45 20 20 20 ...   1984  bleout DC.B     'BLE    ',0
00002669= 42 45 51 20 20 20 ...   1985  beqout DC.B     'BEQ    ',0
00002671                          1986  
00002671= 4A 53 52 20 20 20 ...   1987  jsrout DC.B     'JSR    ',0
00002679= 52 54 53 20 20 20 ...   1988  rtsout DC.B     'RTS    ',CR,LF,0
00002683= 42 52 41 20 20 20 ...   1989  braout DC.B     'BRA    ',0
0000268B                          1990  
0000268B= 44 41 54 41 20 20 ...   1991  dataout DC.B    'DATA   ',0
00002693                          1992  
00002693                          1993  
00002693                          1994  
00002693= 2E 42 20 20 20 20 00    1995  byteout  DC.B    '.B    ',0
0000269A= 2E 57 20 20 20 20 00    1996  wordout  DC.B    '.W    ',0
000026A1= 2E 4C 20 20 20 20 00    1997  longout  DC.B    '.L    ',0
000026A8= 20 20 20 20 20 20 ...   1998  nosizeout DC.B   '       ',0
000026B0                          1999  
000026B0= 0D 0A 00                2000  empty    DC.B    '',CR,LF,0
000026B3                          2001  
000026B3  =0000000D               2002  CR  EQU $0D
000026B3  =0000000A               2003  LF  EQU $0A
000026B3                          2004  
000026B3                          2005  
000026B3                          2006      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 14DC
ADDA                152A
ADDAOUT             2624
ADDOUT              2620
ADDQ                1490
ADDQOUT             2629
ADDQ_EA             1CC6
ADDRESSOUTPUT       9005
ALL_REG             7FFF
AND                 183C
ANDOUT              263D
ASL                 169A
ASLOUT              2649
ASR                 16E6
ASROUT              264D
ATOF                235C
ATOH                1AEE
A_REG               1E20
BCC                 1888
BEQ                 1902
BEQOUT              2669
BGT                 18B6
BGTOUT              2659
BITS0TO5_MASK       3F
BITS7TO8_MASK       C0
BITS9TO11_MASK      E00
BLE                 18DC
BLEOUT              2661
BRA                 1928
BRAOUT              2683
BYTE                12E4
BYTEOUT             2693
CHECK_EA_AB_L       200E
CHECK_EA_AB_W       1FEE
CHECK_EA_AR         1F56
CHECK_EA_IMM        202C
CHECK_EA_INDIRECT   1F70
CHECK_EA_POST       1F96
CHECK_EA_PRE        1FC2
CHECK_VALID_EA      1E88
CLOSED_PAR_TAG      2144
COMMA_TAG           21A4
CONVERTATOH         1AEE
CONVERTHTOA         2348
CR                  D
DATA                194E
DATAOUT             268B
DOLLAR_TAG          2148
D_REG               1E10
EA1_END             1C12
EA1_MODE_ONE        1C06
EA1_MODE_ZERO       1C0E
EA2_END             1C54
EA2_IMMEDIATE       1C4C
EA2_REGISTER        1C44
EA_GROUP1           1BE6
EA_GROUP2           1C2E
EA_GROUP3           1C72
EA_GROUP4           1C8C
EMPTY               26B0
END_SIMULATION      2364
FINISH              1B42
FIRSTINPUT          19C4
FLIP_CLR            1DC8
FLIP_DIRECTION      1DB4
FLIP_LOOP_INCR      1DD0
FLIP_SET            1DCE
FORMAT_IMMEDIATE_DATA  1B4E
FORWARD_SLASH_TAG   214A
HASH_SIGN_TAG       2146
HERE                103C
HEX_TO_ASCII        20DC
HEX_TO_ASCII_RETURN  20EC
IMMEDIATE0          1B5E
IMMEDIATE_END       1B60
INPUT1              8000
INPUT1MESSAGE       24E0
INPUT2              8004
INPUT2MESSAGE       2506
INPUTERROR          1B44
INPUTERROR2SMALLER  254A
INPUTERRORBADCHAR   252C
INPUTQUALITY        25F9
INPUTREPEAT         2586
INPUT_BUFFER        2080
INVALID_EA          1EC2
IPUT_BUFFER_EX      2078
JSR                 1590
JSROUT              2671
LEA                 17CA
LEAOUT              262E
LETSGO              1074
LETTERS             213C
LF                  A
LINECOUNTER         25FA
LONG                1310
LONGOUT             26A1
LONG_DISPLACEMENT   1F3A
LOOPRETURN          1016
LOWERCASE           1B2A
LSL                 1602
LSLOUT              2641
LSR                 164E
LSROUT              2645
MEMORYLOOP          1012
MEMORY_TO_REGISTER  1D30
MEM_TO_REG          1DD6
MINUS_TAG           2176
MODE_010            1E4E
MODE_01_0           1E80
MOVE                1346
MOVEA               1398
MOVEAOUT            2608
MOVEM               13FA
MOVEMOUT            2616
MOVEM_EA            1D22
MOVEOUT             2603
MOVEQ               13D4
MOVEQOUT            260E
MOVEQ_EA            1CF4
MOVE_MOVEA_EA       1B62
NEWLINE             25F3
NEWLINE_TAG         21CE
NOP                 1326
NOPOUT              25FD
NOSIZEOUT           26A8
NOT                 15B6
NOTOUT              2636
NUMBER_TO_ASCII     20F2
ODDNUMBER1          1AC4
ODDNUMBER2          1AE4
ODDNUMBERCHECKER1   1AA8
ODDNUMBERCHECKER2   1ACC
OP1                 1390
OP10                1692
OP11                16DE
OP12                172A
OP13                1776
OP14                17C2
OP15                1834
OP16                1880
OP2                 13CC
OP3                 1436
OP4                 1488
OP5                 14D4
OP6                 1522
OP7                 1566
OP8                 15FA
OP9                 1646
OPCODE              11CE
OPEN_PAR_TAG        2142
OR                  17F0
OROUT               263A
OUTPUT              2222
OUTPUTADDRESS       22E6
OUTPUTADDRESSLOOP   22FA
OUTPUTADDRESSLOOPEND  231C
OUTPUTADDRESSLOOPENDCONTINUE  2328
OUTPUTDATA          2290
OUTPUTDATALOOP      22A4
OUTPUTDATALOOPEND   22C6
OUTPUTNEWSCREEN     25D0
OUTPUTOPCODE        2252
OUTPUTOPCODENEWSCREEN  2260
OUTPUTSIZE          2288
OUTPUTTYPE          25FB
PLUS_TAG            2174
POPULATE_BUFFER     20B2
PRINT_BRA           1EFC
PRINT_BRA_RETURN    1F3C
PRINT_BUFFER        206E
PRINT_CLOSED_PARENTHESIS  2160
PRINT_COMMA         21A6
PRINT_DOLLAR        21FA
PRINT_EA            1ECC
PRINT_EA1           1B9E
PRINT_EA2           1BC4
PRINT_EA_RETURN     2068
PRINT_FORWARD_SLASH  220E
PRINT_HASH_SIGN     21E6
PRINT_HEX           2090
PRINT_HEX_RETURN    20A6
PRINT_INSTRUCTION_RETURN  1EF4
PRINT_MASK          1DA0
PRINT_MASK_LOOP     1DF6
PRINT_MASK_LOOP_INCR  1E3C
PRINT_MASK_LOOP_START  1DF2
PRINT_MASK_RETURN   1E42
PRINT_MINUS         218C
PRINT_MOVEM         1D5E
PRINT_MOVEM_MASK    1D78
PRINT_NEWLINE       21D2
PRINT_OPEN_PARENTHESIS  214C
PRINT_PLUS          2178
PRINT_REGISTOR      20F8
PRINT_REGISTOR_RETURN  2128
PRINT_SLASH         1E2C
PRINT_TAB           21BA
READ_WORD_IMM       2050
REGISTER_TO_MEMORY  1E5C
REG_COUNT           1DDE
REG_COUNT_INCR      1DEE
REG_TO_MEM          1DB2
REG_TO_MEMO_OK      1DD4
REPEATFLAG          25FC
RETURN              12E2
ROL                 1732
ROLOUT              2651
ROR                 177E
ROROUT              2655
RTS                 156E
RTSOUT              2679
SECONDINPUT         1A28
SET_MASK            1E08
SPACES              25F6
SPACE_TAG           21A2
START               1000
STARTMESSAGE        236E
SUB                 1444
SUBOUT              261C
TAB_TAG             21A0
THERE               11A2
THROWINPUT1CHARERROR  1A0A
THROWINPUT2CHARERROR  1A78
THROWINPUT2LOWERERROR  1A94
TO_STRING           212E
UPPERCASE           1B12
USERINPUT           197C
USERINPUTREPEAT     11A4
USERINPUTSTART      1008
USERINPUTSTORED     8008
VALID_EA_PC         1EAA
WELCOMEEXPLANATION  19AA
WORD                12FA
WORDOUT             269A
WORD_DISPLACEMENT   1F26
WRONG_INSTRUCTION   1D54
ZEROTONINE          2354
