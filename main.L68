00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/9/2022 10:24:36 PM

00000000  =00009005                  1  addressOutput EQU   $9005
00000000  =00008000                  2  input1      EQU     $8000           where input 1 is stored (can be changed if needed)
00000000  =00008004                  3  input2      EQU     $8004          where input 2 is stored (can be changed if needed)
00000000  =00008008                  4  userInputStored    EQU     $8008   
00000000                             5  
00000000                             6  
00000000                             7  
00000000                             8  
00000000                             9  
00001000                            10      ORG    $1000
00001000                            11  START:                           *Main
00001000                            12  
00001000  13FC 0000 00001CFA        13      MOVE.B  #0,(LineCounter)
00001008                            14  userInputStart
00001008  6100 03C8                 15      BSR     USERINPUT
0000100C                            16      
0000100C                            17  *testing purposes----------------------------------------------------
0000100C  1C3C 0004                 18      MOVE.B #$04, D6
00001010  347C 1004                 19      MOVE.W #$1004, A2
00001014  7C0A                      20      MOVEQ #10, D6
00001016  264A                      21      MOVEA.L A2, A3
00001018  B641                      22      CMP D1,D3
0000101A  9C82                      23      SUB.L D2, D6
0000101C                            24  
0000101C  6000 0002                 25      BRA here
00001020                            26  here
00001020  4EB9 000010B4             27      JSR there
00001026  4693                      28      NOT.L (A3)
00001028  47D1                      29      LEA (A1),A3
0000102A  8AB9 00008000             30      OR.L input1, D5
00001030  48E7 FFFE                 31      MOVEM.L D0-D7/A0-A6,-(SP) 
00001034  CC01                      32      AND.B D1,D6
00001036  D803                      33      ADD.B D3,D4
00001038                            34  * calls-------------------------------------------------------
00001038  347C 100C                 35      MOVE.W #$100C, A2
0000103C  6100 00A2                 36      BSR     OPCODE * test MOVE.B
00001040                            37  
00001040  347C 1010                 38      MOVE.W #$1010, A2
00001044  6100 009A                 39      BSR     OPCODE * test MOVEA.W
00001048                            40      
00001048  347C 1014                 41      MOVE.W #$1014, A2
0000104C  6100 0092                 42      BSR     OPCODE * test MOVEQ
00001050                            43     
00001050  347C 1016                 44      MOVE.W #$1016, A2
00001054  6100 008A                 45      BSR     OPCODE *test MOVEA.L
00001058                            46      
00001058  347C 1018                 47      MOVE.W #$1018, A2
0000105C  6100 0082                 48      BSR     OPCODE *test DATA
00001060                            49      
00001060                            50      
00001060  347C 101A                 51      MOVE.W #$101A, A2
00001064  6100 007A                 52      BSR     OPCODE *test SUB.L
00001068                            53      
00001068  347C 101C                 54      MOVE.W #$101C, A2
0000106C  6100 0072                 55      BSR     OPCODE *test BRA
00001070                            56      
00001070  347C 1020                 57      MOVE.W #$1020, A2
00001074  6100 006A                 58      BSR     OPCODE *test JSR
00001078                            59      
00001078  347C 1026                 60      MOVE.W #$1026, A2
0000107C  6100 0062                 61      BSR     OPCODE *test NOT
00001080                            62      
00001080  347C 1028                 63      MOVE.W #$1028, A2
00001084  6100 005A                 64      BSR     OPCODE *test LEA
00001088                            65      
00001088  347C 102A                 66      MOVE.W #$102A, A2
0000108C  6100 0052                 67      BSR     OPCODE *test OR
00001090                            68      
00001090  347C 1030                 69      MOVE.W #$1030, A2
00001094  6100 004A                 70      BSR     OPCODE *test OR
00001098                            71  
00001098  347C 1034                 72      MOVE.W #$1034, A2
0000109C  6100 0042                 73      BSR     OPCODE *test AND
000010A0                            74      
000010A0  347C 1036                 75      MOVE.W #$1036, A2
000010A4  6100 003A                 76      BSR     OPCODE *test ADD
000010A8                            77  
000010A8                            78  
000010A8  347C 10B4                 79      MOVE.W #$10B4, A2
000010AC  6100 0032                 80      BSR     OPCODE *test RTS
000010B0                            81  
000010B0                            82  
000010B0                            83  * calls---------------------------------------------------------    
000010B0  6000 0004                 84      BRA userInputRepeat
000010B4                            85  there    
000010B4  4E75                      86      RTS
000010B6                            87  * end testing--------------------------------------------------------------
000010B6                            88   
000010B6                            89  
000010B6                            90       
000010B6                            91    
000010B6                            92  
000010B6                            93      
000010B6                            94  userInputRepeat
000010B6  43F9 00001C86             95      LEA     INPUTREPEAT,A1
000010BC  103C 000E                 96      MOVE.B  #14,D0
000010C0  4E4F                      97      TRAP    #15
000010C2  5239 00001CFA             98      ADD.B   #1,(LineCounter)
000010C8                            99      
000010C8  43F9 00008008            100      LEA     userInputStored,A1
000010CE  103C 0005                101      MOVE.B  #5,D0
000010D2  4E4F                     102      TRAP    #15
000010D4                           103      
000010D4  0C11 0000                104      CMP.B   #$00,(A1)
000010D8  6700 FF2E                105      BEQ     userInputStart
000010DC                           106   
000010DC  FFFF FFFF                107      SIMHALT
000010E0                           108  
000010E0                           109  **********************************************************
000010E0                           110  *Subroutine: OPCODE
000010E0                           111  *What it does: Looks at the word pointed to by A2 and determines opcode
000010E0                           112  *Registers: 
000010E0                           113  *A1: printing
000010E0                           114  *A2: parameter with instruction address
000010E0                           115  *D0: printing
000010E0                           116  *D3: used for determing the instruction, mostly shifts
000010E0                           117  *D2: used for determing the size
000010E0                           118  *Paramemeters: A2 the memory address to decode from
000010E0                           119  **********************************************************
000010E0                           120  OPCODE:
000010E0  4243                     121      CLR D3
000010E2                           122      
000010E2  0C52 4E75                123      CMP #$4E75, (A2) * RTS compare, this has to be done before JSR, LEA, and NOT
000010E6  6700 01DA                124      BEQ rts
000010EA                           125      
000010EA  0C52 4E71                126      CMP #$4E71, (A2) *NOP compare
000010EE  6700 00BA                127      BEQ nop
000010F2                           128      
000010F2  3612                     129      Move.W (A2), D3 
000010F4  E04B                     130      LSR #8,D3 * make D3 only contain the first 4 bits of the instruction as its LSig word
000010F6  E84B                     131      LSR #4,D3
000010F8                           132      
000010F8                           133      
000010F8  B67C 0008                134      CMP #%1000, D3 * OR compare
000010FC  6700 0238                135      BEQ or
00001100                           136      
00001100                           137      
00001100  B67C 0003                138      CMP #%0011, D3 *MOVE and MOVEA compare
00001104  6F00 00B8                139      BLE move
00001108                           140      
00001108  B67C 0007                141      CMP #%0111, D3 *MOVEQ compare
0000110C  6700 0110                142      BEQ moveq
00001110                           143      
00001110  B67C 0009                144      CMP #%1001, D3 *SUB compare
00001114  6700 0148                145      BEQ sub
00001118                           146      
00001118  B67C 000C                147      CMP #%1100, D3 *AND compare
0000111C  6700 024A                148      BEQ and
00001120                           149      
00001120  B67C 000D                150      CMP #%1101, D3 *ADD compare
00001124  6700 016A                151      BEQ add
00001128                           152  
00001128                           153      
00001128                           154      
00001128  3612                     155      Move.W (A2), D3 * reset D3
0000112A  0243 FB80                156      ANDI.W #%1111101110000000,D3  * the bits relevant to MOVEM
0000112E  B67C 4880                157      CMP #%100100010000000,D3 *MOVEM compare
00001132  6700 0100                158      BEQ movem
00001136                           159  
00001136                           160      
00001136                           161      
00001136  3612                     162      Move.W (A2), D3 * reset D3
00001138  EC4B                     163      LSR #6,D3 * make D3 only contain the first 10 bits of the instruction
0000113A  B67C 013A                164      CMP #%0000000100111010, D3 * JSR compare, this has to be done before NOT and LEA
0000113E  6700 0198                165      BEQ jsr
00001142                           166  
00001142  3612                     167      Move.W (A2), D3 * reset D3
00001144  E04B                     168      LSR #8,D3 * make D3 only contain the first 8 bits
00001146  B67C 0046                169      CMP #%01000110,D3 * NOT compare, this has to be done before LEA
0000114A  6700 01A2                170      BEQ not
0000114E                           171      
0000114E  3612                     172      Move.W (A2), D3 * reset D3
00001150  0243 F1C0                173      ANDI.W #%1111000111000000,D3 * the bits relevant to LEA
00001154  B67C 41C0                174      CMP #%0100000111000000,D3 *LEA compare
00001158  6700 01C6                175      BEQ lea
0000115C                           176  
0000115C                           177     
0000115C  3612                     178      Move.W (A2), D3 * reset D3
0000115E  E04B                     179      LSR #8,D3 * make D3 only contain the first 8 bits of the instruction
00001160                           180   
00001160  B67C 0060                181      CMP #%01100000, D3 *BRA compare
00001164  6700 0234                182      BEQ bra
00001168                           183      
00001168                           184      
00001168  6000 0246                185      BRA data
0000116C                           186      
0000116C                           187  return
0000116C  4E75                     188      RTS
0000116E                           189  byte
0000116E  43F9 00001D66            190      LEA    byteout,A1        
00001174  13FC 0002 00001CFB       191      MOVE.B  #2,(OutputType)
0000117C  6100 079A                192      BSR     OUTPUT 
00001180  60EA                     193      BRA return
00001182                           194  word
00001182  43F9 00001D6D            195      LEA    wordout,A1        
00001188  13FC 0002 00001CFB       196      MOVE.B  #2,(OutputType)
00001190  6100 0786                197      BSR     OUTPUT
00001194  60D6                     198      BRA return
00001196                           199  long
00001196  43F9 00001D74            200      LEA    longout,A1        
0000119C  13FC 0002 00001CFB       201      MOVE.B  #2,(OutputType)
000011A4  6100 0772                202      BSR     OUTPUT 
000011A8  60C2                     203      BRA return
000011AA                           204      
000011AA                           205  nop 
000011AA  43F9 00001CFC            206      LEA    nopout,A1        
000011B0  13FC 0001 00001CFB       207      MOVE.B  #1,(OutputType)
000011B8  6100 075E                208      BSR     OUTPUT
000011BC  60AE                     209      BRA return
000011BE                           210      
000011BE                           211  move
000011BE                           212      * put the size of the instruction into D2 to use later
000011BE                           213      * since the first two bits of D3 are 00 for move moving the entire word works
000011BE  3403                     214      Move.W D3, D2
000011C0                           215  
000011C0                           216  
000011C0                           217      * determine if MOVE or MOVEA
000011C0                           218      * if bits 8,7,6 = 001 its MOVEA
000011C0  3612                     219      MOVE.W (A2),D3
000011C2  0243 01C0                220      ANDI.W #%0000000111000000, D3 *extract only bits 8,7,6
000011C6                           221      
000011C6  B67C 0040                222      CMP #%0000000001000000,D3 * if only the sixth bit is set then instruction is MOVEA
000011CA  6700 002A                223      BEQ movea
000011CE                           224      
000011CE                           225   
000011CE  43F9 00001D02            226      LEA    moveout,A1     *print the type
000011D4  13FC 0001 00001CFB       227      MOVE.B  #1,(OutputType)   
000011DC  6100 073A                228      BSR    OUTPUT
000011E0                           229      
000011E0                           230      *now to print size  
000011E0  B47C 0002                231      cmp #2,D2 *if the size is 2 branch to long
000011E4  67B0                     232      BEQ long
000011E6  B47C 0003                233      cmp #3,D2 *if the size is 3 branch to word
000011EA  6796                     234      BEQ word
000011EC  6180                     235      BSR byte *otherwise branch to byte
000011EE                           236    
000011EE  6100 034A                237      BSR MOVE_MOVEA_EA
000011F2                           238      
000011F2  6000 FF78                239      BRA return
000011F6                           240      
000011F6                           241      
000011F6                           242  movea
000011F6  43F9 00001D07            243      LEA    moveaout,A1
000011FC  13FC 0001 00001CFB       244      MOVE.B  #1,(OutputType)       
00001204  6100 0712                245      BSR    OUTPUT
00001208                           246      
00001208                           247      *now to print size  
00001208  B47C 0002                248      cmp #2,D2 *if the size is 2 branch to long
0000120C  6788                     249      BEQ long
0000120E  B47C 0003                250      cmp #3,D2 *if the size is 3 branch to word
00001212  6100 FF6E                251      BSR word
00001216                           252      
00001216  6100 0322                253      BSR MOVE_MOVEA_EA
0000121A                           254      
0000121A  6000 FF50                255      BRA return
0000121E                           256      
0000121E                           257  moveq
0000121E  43F9 00001D0D            258      LEA    moveqout,A1
00001224  13FC 0001 00001CFB       259      MOVE.B  #1,(OutputType)       
0000122C  6100 06EA                260      BSR    OUTPUT
00001230  6000 FF3A                261      BRA return
00001234                           262  
00001234                           263      
00001234                           264  movem    
00001234  43F9 00001D13            265      LEA    movemout,A1
0000123A  13FC 0001 00001CFB       266      MOVE.B  #1,(OutputType)       
00001242  6100 06D4                267      BSR    OUTPUT
00001246                           268      
00001246  3412                     269      MOVE.W (A2),D2
00001248  0242 0040                270      ANDI.W #%0000000001000000, D2 * set to only the size bits
0000124C  EC4A                     271      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
0000124E  B47C 0001                272      CMP #1, D2 * if the size is 1 branch to long
00001252  6700 FF42                273      BEQ long
00001256  6100 FF2A                274      BSR word * otherwise branch to word
0000125A                           275  
0000125A                           276      
0000125A  6000 FF10                277      BRA return
0000125E                           278  sub    
0000125E  43F9 00001D19            279      LEA    subout,A1
00001264  13FC 0001 00001CFB       280      MOVE.B  #1,(OutputType)       
0000126C  6100 06AA                281      BSR    OUTPUT
00001270                           282      
00001270  3412                     283      MOVE.W (A2),D2
00001272  0242 00C0                284      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001276  EC4A                     285      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001278                           286  
00001278                           287  
00001278                           288      
00001278                           289      *now to print size  
00001278  B47C 0002                290      cmp #2,D2 *if the size is 2 branch to long
0000127C  6700 FF18                291      BEQ long
00001280  B47C 0001                292      cmp #1,D2 *if the size is 1 branch to word
00001284  6700 FEFC                293      BEQ word
00001288  6100 FEE4                294      BSR byte *otherwise branch to byte
0000128C                           295      
0000128C  6000 FEDE                296      BRA return
00001290                           297  add
00001290  43F9 00001D1D            298      LEA    addout,A1
00001296  13FC 0001 00001CFB       299      MOVE.B  #1,(OutputType)       
0000129E  6100 0678                300      BSR    OUTPUT
000012A2                           301      
000012A2  3412                     302      MOVE.W (A2),D2
000012A4  0242 00C0                303      ANDI.W #%0000000011000000, D2 * set to only the size bits
000012A8  EC4A                     304      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
000012AA                           305  
000012AA                           306  
000012AA                           307      
000012AA                           308      *now to print size  
000012AA  B47C 0002                309      cmp #2,D2 *if the size is 2 branch to long
000012AE  6700 FEE6                310      BEQ long
000012B2  B47C 0001                311      cmp #1,D2 *if the size is 1 branch to word
000012B6  6700 FECA                312      BEQ word
000012BA  6100 FEB2                313      BSR byte *otherwise branch to byte
000012BE                           314      
000012BE  6000 FEAC                315      BRA return
000012C2                           316  
000012C2                           317      
000012C2                           318  rts
000012C2  43F9 00001D54            319      LEA    rtsout,A1
000012C8  13FC 0001 00001CFB       320      MOVE.B  #1,(OutputType)       
000012D0  6100 0646                321      BSR    OUTPUT
000012D4  6000 FE96                322      BRA return
000012D8                           323      
000012D8                           324      
000012D8                           325  jsr    
000012D8  43F9 00001D50            326      LEA    jsrout,A1
000012DE  13FC 0001 00001CFB       327      MOVE.B  #1,(OutputType)       
000012E6  6100 0630                328      BSR    OUTPUT
000012EA  6000 FE80                329      BRA return
000012EE                           330      
000012EE                           331      
000012EE                           332  not   
000012EE  43F9 00001D2D            333      LEA    notout,A1
000012F4  13FC 0001 00001CFB       334      MOVE.B  #1,(OutputType)       
000012FC  6100 061A                335      BSR    OUTPUT
00001300                           336      
00001300  3412                     337      MOVE.W (A2),D2
00001302  0242 00C0                338      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001306  EC4A                     339      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001308                           340  
00001308                           341      *now to print size  
00001308  B47C 0002                342      cmp #2,D2 *if the size is 2 branch to long
0000130C  6700 FE88                343      BEQ long
00001310  B47C 0001                344      cmp #1,D2 *if the size is 1 branch to word
00001314  6700 FE6C                345      BEQ word
00001318  6100 FE54                346      BSR byte *otherwise branch to byte
0000131C                           347      
0000131C                           348  
0000131C                           349      
0000131C  6000 FE4E                350      BRA return
00001320                           351  
00001320                           352  lea
00001320  43F9 00001D29            353      LEA    leaout,A1
00001326  13FC 0001 00001CFB       354      MOVE.B  #1,(OutputType)       
0000132E  6100 05E8                355      BSR    OUTPUT
00001332  6000 FE38                356      BRA return
00001336                           357      
00001336                           358  or
00001336  43F9 00001D31            359      LEA    orout,A1
0000133C  13FC 0001 00001CFB       360      MOVE.B  #1,(OutputType)       
00001344  6100 05D2                361      BSR    OUTPUT
00001348                           362      
00001348                           363          
00001348  3412                     364      MOVE.W (A2),D2
0000134A  0242 00C0                365      ANDI.W #%0000000011000000, D2 * set to only the size bits
0000134E  EC4A                     366      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001350                           367  
00001350                           368      *now to print size  
00001350  B47C 0002                369      cmp #2,D2 *if the size is 2 branch to long
00001354  6700 FE40                370      BEQ long
00001358  B47C 0001                371      cmp #1,D2 *if the size is 1 branch to word
0000135C  6700 FE24                372      BEQ word
00001360  6100 FE0C                373      BSR byte *otherwise branch to byte
00001364                           374      
00001364  6000 FE06                375      BRA return
00001368                           376      
00001368                           377  and
00001368  43F9 00001D34            378      LEA    andout,A1
0000136E  13FC 0001 00001CFB       379      MOVE.B  #1,(OutputType)       
00001376  6100 05A0                380      BSR    OUTPUT
0000137A                           381      
0000137A                           382          
0000137A  3412                     383      MOVE.W (A2),D2
0000137C  0242 00C0                384      ANDI.W #%0000000011000000, D2 * set to only the size bits
00001380  EC4A                     385      LSR #6,D2 * make the size bits the first two bits in D2 LSig word
00001382                           386  
00001382                           387      *now to print size  
00001382  B47C 0002                388      cmp #2,D2 *if the size is 2 branch to long
00001386  6700 FE0E                389      BEQ long
0000138A  B47C 0001                390      cmp #1,D2 *if the size is 1 branch to word
0000138E  6700 FDF2                391      BEQ word
00001392  6100 FDDA                392      BSR byte *otherwise branch to byte
00001396                           393      
00001396  6000 FDD4                394      BRA return    
0000139A                           395  
0000139A                           396  
0000139A                           397  bra
0000139A  43F9 00001D5A            398      LEA    braout,A1
000013A0  13FC 0001 00001CFB       399      MOVE.B  #1,(OutputType)       
000013A8  6100 056E                400      BSR    OUTPUT
000013AC  6000 FDBE                401      BRA return
000013B0                           402  
000013B0                           403  data
000013B0  43F9 00001D5E            404      LEA    dataout,A1
000013B6  13FC 0001 00001CFB       405      MOVE.B  #1,(OutputType)       
000013BE  6100 0558                406      BSR    OUTPUT
000013C2                           407      
000013C2  13FC 0003 00001CFB       408      MOVE.B  #3,(OutputType)       
000013CA  6100 054C                409      BSR    OUTPUT *TODO fix data output type
000013CE                           410  
000013CE  6000 FD9C                411      BRA return
000013D2                           412  
000013D2                           413  
000013D2                           414  **********************************************************
000013D2                           415  *Subroutine: USERINPUT
000013D2                           416  *What it does: Takes in user input, rejects bad input
000013D2                           417  *Registers: Uses register A1, D0, D5
000013D2                           418  *A1: Stores messages and user input
000013D2                           419  *D0: Used for TRAP #15
000013D2                           420  *D5: Temporaraly stores user input to be masked then transfered
000013D2                           421  *Paramemeters: No parameters
000013D2                           422  **********************************************************
000013D2                           423  USERINPUT:
000013D2                           424  
000013D2                           425  welcomeExplanation
000013D2  43F9 00001A6E            426      LEA     STARTMESSAGE,A1         
000013D8  103C 000E                427      MOVE.B  #14,D0
000013DC  4E4F                     428      TRAP    #15
000013DE                           429      
000013DE  5039 00001CFA            430      ADD.B   #8,(LineCounter)
000013E4                           431  
000013E4                           432  firstInput
000013E4  43F9 00001BE0            433      LEA     INPUT1MESSAGE,A1        
000013EA  103C 000E                434      MOVE.B  #14,D0                  
000013EE  4E4F                     435      TRAP    #15                     Asks user for first input
000013F0  5239 00001CFA            436      ADD.B   #1,(LineCounter)        Adds 1 to line counter
000013F6                           437      
000013F6  43F9 00008008            438      LEA     userInputStored,A1
000013FC  103C 0002                439      MOVE.B  #2,D0                   
00001400  4E4F                     440      TRAP    #15                     User can input string for address
00001402  5239 00001CFA            441      ADD.B   #1,(LineCounter)        Adds 1 to line counter
00001408                           442  
00001408                           443      
00001408  6100 00BC                444      BSR     CONVERTATOH                 String converted to hex address
0000140C                           445      
0000140C  0C39 0000 00001CF9       446      CMP.B   #0,(InputQuality)       Checks if bad input flag set
00001414  6700 0014                447      BEQ     throwInput1CharError
00001418                           448  
00001418                           449      
00001418  CABC 00FFFFFF            450      AND.L   #$00FFFFFF,D5
0000141E  23C5 00008000            451      MOVE.L  D5,input1               Moves result into input 1 memory location
00001424  4285                     452      CLR.L   D5                      Clears D5 for future use
00001426  6000 0020                453      BRA     secondInput
0000142A                           454      
0000142A                           455  throwInput1CharError
0000142A  43F9 00001C2C            456      LEA     INPUTERRORBADCHAR,A1
00001430  103C 000E                457      MOVE.B  #14,D0
00001434  4E4F                     458      TRAP    #15                     Outputs bad character error message
00001436  5639 00001CFA            459      ADD.B   #3,(LineCounter)        Adds 2 to line counter
0000143C                           460      
0000143C  13FC 0001 00001CF9       461      MOVE.B  #1,(InputQuality)       Resets quality flag to default (good)
00001444  4285                     462      CLR.L   D5                      Clears D5 for future use
00001446                           463      
00001446                           464      
00001446                           465      
00001446  609C                     466      BRA     firstInput              Tries again for input1
00001448                           467  
00001448                           468      
00001448                           469  secondInput
00001448  43F9 00001C06            470      LEA     INPUT2MESSAGE,A1        
0000144E  103C 000E                471      MOVE.B  #14,D0                  
00001452  4E4F                     472      TRAP    #15                     Asks user for second input
00001454  5239 00001CFA            473      ADD.B   #1,(LineCounter)
0000145A                           474      
0000145A  43F9 00008008            475      LEA     userInputStored,A1
00001460  103C 0002                476      MOVE.B  #2,D0                   
00001464  4E4F                     477      TRAP    #15                     User can input string for address
00001466  5239 00001CFA            478      ADD.B   #1,(LineCounter)
0000146C                           479  
0000146C                           480      
0000146C  6100 0058                481      BSR     CONVERTATOH                 String converted to hex address
00001470                           482  
00001470  0C39 0000 00001CF9       483      CMP.B   #0,(InputQuality)       
00001478  6700 001C                484      BEQ     throwInput2CharError    Checks if bad input flag set
0000147C                           485      
0000147C  CABC 00FFFFFF            486      AND.L   #$00FFFFFF,D5
00001482  BAB9 00008000            487      CMP.L   (input1),D5
00001488  6D00 0028                488      BLT     throwInput2LowerError
0000148C                           489      
0000148C                           490      
0000148C                           491      
0000148C  23C5 00008004            492      MOVE.L  D5,input2               Moves result into input 2 memory location
00001492  4285                     493      CLR.L   D5                      Clears D5 for future use
00001494  4E75                     494      RTS    
00001496                           495      
00001496                           496  throwInput2CharError
00001496  43F9 00001C2C            497      LEA     INPUTERRORBADCHAR,A1    
0000149C  103C 000E                498      MOVE.B  #14,D0
000014A0  4E4F                     499      TRAP    #15                     Outputs bad character error message
000014A2                           500      
000014A2  5639 00001CF9            501      ADD.B  #3,(InputQuality)        Resets quality flag to default (good)
000014A8  4285                     502      CLR.L   D5                      Clears D5 for future use
000014AA                           503      
000014AA  5639 00001CFA            504      ADD.B   #3,(LineCounter)
000014B0                           505      
000014B0  6096                     506      BRA     secondInput             Tries again for input2
000014B2                           507      
000014B2                           508  throwInput2LowerError
000014B2  43F9 00001C4A            509      LEA     INPUTERROR2SMALLER,A1
000014B8  103C 000E                510      MOVE.B  #14,D0
000014BC  4E4F                     511      TRAP    #15
000014BE                           512      
000014BE  5639 00001CFA            513      ADD.B   #3,(LineCounter)
000014C4                           514      
000014C4  6082                     515      BRA     secondInput
000014C6                           516  
000014C6                           517  
000014C6                           518  **********************************************************
000014C6                           519  *Subroutine: CONVERTATOH
000014C6                           520  *What it does: Converts user input to hex code
000014C6                           521  *Registers: Uses register A1, D2, D5
000014C6                           522  *Paramemeters: User input stored in (A1)
000014C6                           523  ********************************************************** 
000014C6                           524  CONVERTATOH:
000014C6                           525      
000014C6                           526  AtoH
000014C6  1419                     527      MOVE.B  (A1)+,D2                Takes first bit (letter), moves to D2 for testing
000014C8                           528      
000014C8  B43C 0000                529      CMP.B   #$00,D2                 Compares to 00, since 00 is null (enter)
000014CC  6700 004C                530      BEQ     Finish                  Moves to finish if they are equal (no more input)
000014D0                           531      
000014D0  E985                     532      ASL.L   #4,D5
000014D2                           533      
000014D2  B43C 0030                534      CMP.B   #$30,D2
000014D6  6D00 0044                535      BLT     inputError
000014DA                           536      
000014DA  B43C 0039                537      CMP.B   #$39,D2                 Compares to 39, because 39 in ASCII is 9, which is largest number
000014DE  6E00 000A                538      BGT     upperCase               Branches if greater, may or may not be a letter in hex
000014E2                           539      
000014E2  0402 0030                540      SUBI.B  #$30,D2                 Subtracts 30 to turn it into it's hex format
000014E6  DA02                     541      ADD.B   D2,D5
000014E8                           542      
000014E8  60DC                     543      BRA     AtoH
000014EA                           544  
000014EA                           545          
000014EA                           546  upperCase   
000014EA  B43C 0041                547      CMP.B   #$41,D2
000014EE  6D00 002C                548      BLT     InputError              Greater than 39 and less than 41 is not part of hex code
000014F2                           549      
000014F2  B43C 0046                550      CMP.B   #$46,D2                 
000014F6  6E00 000A                551      BGT     lowerCase               Greater than 46 may be hex code in lowercase
000014FA                           552      
000014FA  0402 0037                553      SUBI.B  #$37,D2                 Subtracts 37 to turn it into hex format
000014FE  DA02                     554      ADD.B   D2,D5
00001500  60C4                     555      BRA     AtoH
00001502                           556  
00001502                           557  lowerCase
00001502  B43C 0061                558      CMP.B   #$61,D2
00001506  6D00 0014                559      BLT     InputError              Greater than 46 and less than 61 is not part of hex code
0000150A                           560      
0000150A  B43C 0066                561      CMP.B   #$66,D2
0000150E  6E00 000C                562      BGT     InputError              Greater than 66 is not part of hex code
00001512                           563      
00001512  0402 0057                564      SUBI.B  #$57,D2
00001516  DA02                     565      ADD.B   D2,D5
00001518  60AC                     566      BRA     AtoH
0000151A                           567          
0000151A                           568  Finish
0000151A  4E75                     569      RTS                             Return from CONVERT
0000151C                           570      
0000151C                           571  inputError
0000151C  13FC 0000 00001CF9       572      MOVE.B  #0,(InputQuality)
00001524  4E75                     573      RTS
00001526                           574  
00001526                           575  *********************************************************************
00001526                           576  *Subroutine: EA
00001526                           577  *What it does: Outputs parts of opword, moves to new screen if needed
00001526                           578  *Registers: Uses register A1, D0,
00001526                           579  *A1: Used to store messages and single char
00001526                           580  *Paramemeters: A1
00001526                           581  *A1: Stores what should be used
00001526                           582  *********************************************************************  
00001526  =0000003F                583  BITS0TO5_MASK   EQU %00111111
00001526  =000000C0                584  BITS7TO8_MASK   EQU %11000000
00001526  =00000E00                585  BITS9TO11_MASK  EQU %00000111000000000
00001526                           586  
00001526  1E3C 000A                587  FORMAT_IMMEDIATE_DATA   MOVE.B  #10,D7
0000152A  BC7C 0000                588                          CMP     #0,D6
0000152E  6700 0006                589                          BEQ     IMMEDIATE0
00001532  6000 0004                590                          BRA     IMMEDIATE_END
00001536  7C08                     591  IMMEDIATE0              MOVEQ   #8,D6
00001538                           592  
00001538  4E75                     593  IMMEDIATE_END           RTS
0000153A                           594  
0000153A  3212                     595  MOVE_MOVEA_EA   MOVE.W  (A2),D1
0000153C  0201 003F                596                  ANDI.B  #BITS0TO5_MASK,D1           * Isolate the source EA bits
00001540  0001 00C0                597                  ORI.B   #BITS7TO8_MASK,D1           * Populate the S and D bits
00001544  1C01                     598                  MOVE.B  D1,D6                   * Pass source EA to print subroutine
00001546  3212                     599                  MOVE.W  (A2),D1         
00001548  3412                     600                  MOVE.W  (A2),D2 
0000154A  0241 0E00                601                  ANDI.W  #BITS9TO11_MASK,D1   * Isolate the destination register number
0000154E  163C 0009                602                  MOVE.B  #9,D3                   * Prepare shift count
00001552  E669                     603                  LSR.W   D3,D1                   * Move destination register bits right
00001554  0242 01C0                604                  ANDI.W  #%0000000111000000,D2   * Isolate the destination mode
00001558  E64A                     605                  LSR.W   #3,D2                  * Move destination mode bits right
0000155A  8242                     606                  OR.W    D2,D1
0000155C  1A01                     607                  MOVE.B  D1,D5                   * Pass destination EA to print subroutine
0000155E  1206                     608                  MOVE.B  D6,D1               * Pass source into subroutine
00001560  4EB9 000015E0            609                  JSR     CHECK_VALID_EA
00001566  1205                     610                  MOVE.B  D5,D1               * Pass destination into subroutine
00001568  4EB9 000015E0            611                  JSR     CHECK_VALID_EA
0000156E  6100 00B4                612                  BSR print_EA
00001572  6100 0354                613                  BSR print_NEWLINE
00001576                           614                  
00001576  4E75                     615                  RTS
00001578                           616  
00001578                           617     
00001578  E68A                     618  Memory_to_Register LSR.L #3, D2
0000157A  C43C 0007                619                     AND.B #$07, D2
0000157E  B43C 0002                620                     CMP.B #$2,D2
00001582  6700 0022                621                     BEQ   MODE_010
00001586  B43C 0003                622                     CMP.B #$03, D2
0000158A  6700 001A                623                     BEQ   MODE_010  
0000158E  B43C 0007                624                     CMP.B #$07,D2
00001592  6700 0012                625                     BEQ   MODE_010  
00001596  4EF9 0000159C            626                     JMP   WRONG_INSTRUCTION    
0000159C                           627     
0000159C  1E3C 0005                628  WRONG_INSTRUCTION            MOVE.B   #5, D7 ; A WRONG INSTRUCTION 'KEY'
000015A0  2C4A                     629                               MOVEA.L  A2, A6 ;MOVING THE MEMORY ADDRESS INTO A6 WHEN INSTRUCTION IS WRONG 
000015A2  3C12                     630                               MOVE.W  (A2),D6 ;MOVE MEMORY ADDRESS INTO D6, AND INCREMENT A2 BY WORD
000015A4  4E75                     631                               RTS 
000015A6                           632             
000015A6  3412                     633  MODE_010  MOVE.W    (A2),D2
000015A8  C43C 003F                634            AND.B     #$3F,D2
000015AC  08C2 0007                635            BSET      #7,D2 *SET THE DESTINATION INDICATOR
000015B0  1C02                     636            MOVE.B    D2,D6
000015B2  4E75                     637            RTS
000015B4                           638  
000015B4  3412                     639  Register_to_memory MOVE.W (A2),D2
000015B6  E68A                     640                     LSR.L #3, D2
000015B8  C43C 0007                641                     AND.B #$07, D2
000015BC  B43C 0002                642                     CMP.B #$2,D2
000015C0  6700 0016                643                     BEQ   MODE_01_0
000015C4  B43C 0004                644                     CMP.B #$04, D2
000015C8  6700 000E                645                     BEQ   MODE_01_0 
000015CC  B43C 0007                646                     CMP.B #$07,D2
000015D0  6700 0006                647                     BEQ   MODE_01_0 
000015D4  4EF8 159C                648                     JMP   WRONG_INSTRUCTION
000015D8                           649                     
000015D8                           650  
000015D8  3C12                     651  MODE_01_0       MOVE.W  (A2),D6
000015DA  0206 003F                652                  ANDI.B  #$3F,D6
000015DE  4E75                     653                  RTS
000015E0                           654           
000015E0  1001                     655  CHECK_VALID_EA  MOVE.B  D1,D0
000015E2  0200 0038                656                  ANDI.B  #%111000,D0
000015E6  E648                     657                  LSR     #3,D0
000015E8  B03C 0005                658                  CMP.B   #%00000101,D0
000015EC  6700 002C                659                  BEQ     INVALID_EA
000015F0  B03C 0006                660                  CMP.B   #%00000110,D0
000015F4  6700 0024                661                  BEQ     INVALID_EA
000015F8  B03C 0007                662                  CMP.B   #%00000111,D0
000015FC  6700 0004                663                  BEQ     VALID_EA_PC
00001600  4E75                     664                  RTS
00001602                           665                  
00001602                           666                  
00001602  1001                     667  VALID_EA_PC     MOVE.B  D1,D0
00001604  0200 0007                668                  ANDI.B  #%000111,D0
00001608  B03C 0010                669                  CMP.B   #%00010000,D0
0000160C  6700 000C                670                  BEQ     INVALID_EA
00001610  B03C 0018                671                  CMP.B   #%00011000,D0
00001614  6700 0004                672                  BEQ     INVALID_EA
00001618  4E75                     673                  RTS
0000161A                           674                  
0000161A  4EB8 159C                675  INVALID_EA      JSR     WRONG_INSTRUCTION
0000161E  3A7C 0005                676                  MOVE.W  #5, A5
00001622  4E75                     677                  RTS
00001624                           678                  
00001624  48E7 FFDE                679  PRINT_EA        MOVEM.L A0-A1/A3-A6/D0-D7,-(SP)
00001628  163C 0038                680                  MOVE.B  #$38,D3
0000162C  C604                     681                  AND.B   D4,D3
0000162E  C83C 0007                682                  AND.B   #$7, D4
00001632                           683                  
00001632  B63C 0000                684                  CMP.B   #$0, D3
00001636  6600 0014                685                  BNE     CHECK_EA_AR
0000163A  0604 00D0                686                  ADD.B   #$D0, D4
0000163E  4281                     687                  CLR.L   D1
00001640  1204                     688                  MOVE.B  D4, D1
00001642  4EB9 000017EE            689                  JSR     PRINT_REGISTOR              * DATA REG
00001648  6000 0114                690                  BRA     PRINT_EA_RETURN
0000164C                           691  
0000164C  B63C 0008                692  CHECK_EA_AR         CMP.B   #$8, D3
00001650  6600 0014                693                      BNE     CHECK_EA_INDIRECT
00001654  0604 00A0                694                      ADD.B   #$A0, D4
00001658  4281                     695                      CLR.L   D1
0000165A  1204                     696                      MOVE.B  D4, D1
0000165C  4EB9 000017EE            697                      JSR     PRINT_REGISTOR          * ADDRESS REG
00001662  6000 00FA                698                      BRA     PRINT_EA_RETURN
00001666                           699                      
00001666  B63C 0010                700  CHECK_EA_INDIRECT       CMP.B   #$10, D3
0000166A  6600 0020                701                          BNE     CHECK_EA_POST
0000166E  4EB9 00001842            702                          JSR     PRINT_OPEN_PARENTHESIS      * (
00001674  0604 00A0                703                          ADD.B   #$A0, D4
00001678  4281                     704                          CLR.L   D1
0000167A  1204                     705                          MOVE.B  D4, D1
0000167C  4EB9 000017EE            706                          JSR     PRINT_REGISTOR              * ADDRESS REG
00001682  4EB9 00001856            707                          JSR     PRINT_CLOSED_PARENTHESIS    * )
00001688  6000 00D4                708                          BRA     PRINT_EA_RETURN
0000168C                           709                          
0000168C  B63C 0018                710  CHECK_EA_POST   CMP.B   #$18,D3
00001690  6600 0026                711                  BNE     CHECK_EA_PRE
00001694  4EB9 00001842            712                  JSR     PRINT_OPEN_PARENTHESIS      * (
0000169A  0604 00A0                713                  ADD.B   #$A0, D4
0000169E  4281                     714                  CLR.L   D1
000016A0  1204                     715                  MOVE.B  D4, D1
000016A2  4EB9 000017EE            716                  JSR     PRINT_REGISTOR              * ADDRESS REG
000016A8  4EB9 00001856            717                  JSR     PRINT_CLOSED_PARENTHESIS    * )
000016AE  4EB9 0000186E            718                  JSR     PRINT_PLUS                  * +
000016B4  6000 00A8                719                  BRA     PRINT_EA_RETURN
000016B8                           720  
000016B8  B63C 0020                721  CHECK_EA_PRE        CMP.B   #$20,D3
000016BC  6600 0026                722                      BNE     CHECK_EA_AB_W
000016C0  4EB9 00001882            723                      JSR     PRINT_MINUS                 * -
000016C6  4EB9 00001842            724                      JSR     PRINT_OPEN_PARENTHESIS      * (
000016CC  0604 00A0                725                      ADD.B   #$A0, D4
000016D0  4281                     726                      CLR.L   D1
000016D2  1204                     727                      MOVE.B  D4, D1
000016D4  4EB9 000017EE            728                      JSR     PRINT_REGISTOR              * ADDRESS REG
000016DA  4EB9 00001856            729                      JSR     PRINT_CLOSED_PARENTHESIS    * )
000016E0  6000 007C                730                      BRA     PRINT_EA_RETURN
000016E4                           731  
000016E4  D604                     732  CHECK_EA_AB_W           ADD.B   D4,D3
000016E6  B63C 0038                733                          CMP.B   #$38,D3     
000016EA  6600 0018                734                          BNE     CHECK_EA_AB_L
000016EE  4EB9 000018F0            735                          JSR     PRINT_DOLLAR        * $
000016F4  3A1A                     736                          MOVE.W  (A2)+,D5            * PRINTING WORD ABSOLUTE
000016F6  163C 0002                737                          MOVE.B  #2,D3
000016FA  4EB9 00001786            738                          JSR     PRINT_HEX
00001700  6000 005C                739                          BRA     PRINT_EA_RETURN
00001704                           740                          
00001704  B63C 0039                741  CHECK_EA_AB_L       CMP.B   #$39, D3
00001708  6600 0018                742                      BNE     CHECK_EA_IMM
0000170C  4EB9 000018F0            743                      JSR     PRINT_DOLLAR        * $
00001712  2A1A                     744                      MOVE.L  (A2)+,D5            * PRINTING LONG ABSOLUTE
00001714  163C 0004                745                      MOVE.B  #4,D3
00001718  4EB9 00001786            746                      JSR     PRINT_HEX
0000171E  6000 003E                747                      BRA     PRINT_EA_RETURN
00001722                           748                      
00001722  BE3C 0004                749  CHECK_EA_IMM        CMP.B   #4,D7
00001726  6600 001E                750                      BNE     READ_WORD_IMM
0000172A  4EB9 000018DC            751                      JSR     PRINT_HASH_SIGN     * #
00001730  4EB9 000018F0            752                      JSR     PRINT_DOLLAR        * $
00001736  2A1A                     753                      MOVE.L  (A2)+,D5            * PRINTING LONG IMMIDIATE
00001738  163C 0004                754                      MOVE.B  #4,D3
0000173C  4EB9 00001786            755                      JSR     PRINT_HEX
00001742  6000 001A                756                      BRA     PRINT_EA_RETURN
00001746                           757                      
00001746  4EB9 000018DC            758  READ_WORD_IMM       JSR     PRINT_HASH_SIGN     * #
0000174C  4EB9 000018F0            759                      JSR     PRINT_DOLLAR        * $
00001752  3A1A                     760                      MOVE.W  (A2)+,D5            * PRINTING WORD/BYTE IMMIDIATE        
00001754  163C 0002                761                      MOVE.B  #2,D3
00001758  4EB9 00001786            762                      JSR     PRINT_HEX
0000175E                           763  
0000175E  4CDF 7BFF                764  PRINT_EA_RETURN     MOVEM.L     (SP)+,A0-A1/A3-A6/D0-D7   * THE RETURN FOR THE EA PRINTER
00001762  4E75                     765                      RTS
00001764                           766  ALL_REG     REG     D0-D7/A0-A6         ; all registers
00001764                           767  PRINT_BUFFER    DS.B    10
0000176E= 30 30 30 30 30 30 ...    768  IPUT_BUFFER_EX  DC.B    '00000000'
00001776                           769  INPUT_BUFFER    DS.B    15                    
00001786  48E7 FFFE                770  PRINT_HEX       MOVEM.L     ALL_REG,-(SP)
0000178A  43F8 1764                771                  LEA         PRINT_BUFFER, A1        *SETTING UP PRINT BUFFER
0000178E  D3FC 0000000A            772                  ADD.L       #10,A1
00001794  133C 0000                773                  MOVE.B      #0,-(A1)                *NULL FOR PRINTER TO STOP
00001798  6000 000E                774                  BRA         POPULATE_BUFFER
0000179C                           775                  
0000179C  103C 000E                776  PRINT_HEX_RETURN    MOVE.B      #14,D0
000017A0  4E4F                     777                      TRAP        #15
000017A2  4CDF 7FFF                778                      MOVEM.L     (SP)+,ALL_REG
000017A6  4E75                     779                      RTS
000017A8                           780                 
000017A8  B63C 0000                781  POPULATE_BUFFER     CMP.B       #0,D3
000017AC  67EE                     782                      BEQ         PRINT_HEX_RETURN
000017AE  183C 000F                783                      MOVE.B      #$0F,D4
000017B2  C805                     784                      AND.B       D5,D4
000017B4  E81D                     785                      ROR.B       #4,D5
000017B6  4EB9 000017D2            786                      JSR         HEX_TO_ASCII
000017BC  1304                     787                      MOVE.B      D4,-(A1)
000017BE  1805                     788                      MOVE.B      D5,D4
000017C0  C83C 000F                789                      AND.B       #$0F,D4
000017C4  4EB9 000017D2            790                      JSR         HEX_TO_ASCII
000017CA  1304                     791                      MOVE.B      D4,-(A1)
000017CC  E08D                     792                      LSR.L       #8,D5
000017CE  5303                     793                      SUB.B       #1,D3
000017D0  60D6                     794                      BRA         POPULATE_BUFFER
000017D2                           795  
000017D2  48E7 E7FE                796  HEX_TO_ASCII            MOVEM.L     A0-A6/D0-D2/D5-D7,-(SP)
000017D6  B83C 0009                797                          CMP.B       #9,D4
000017DA  6F00 000C                798                          BLE         NUMBER_TO_ASCII
000017DE  0604 0037                799                          ADD.B       #$37,D4
000017E2  4CDF 7FE7                800  HEX_TO_ASCII_RETURN     MOVEM.L   (SP)+,A0-A6/D0-D2/D5-D7
000017E6  4E75                     801                          RTS
000017E8                           802                  
000017E8  0604 0030                803  NUMBER_TO_ASCII     ADD.B   #$30,D4
000017EC  60F4                     804                      BRA     HEX_TO_ASCII_RETURN                    
000017EE                           805                      
000017EE  48E7 FFFE                806  PRINT_REGISTOR      MOVEM.L     ALL_REG,-(SP)       * keeping old value
000017F2  3F3C 0000                807                      MOVE.W      #00,-(SP)           *for printing purpose
000017F6  343C 00F0                808                      MOVE.W      #$f0,D2             *manipulating each digit
000017FA  C441                     809                      AND.W       D1,D2
000017FC  E842                     810                      ASR.W       #4,D2
000017FE  4EB9 00001824            811                      JSR         TO_STRING           * converts to the string ASCII val
00001804  E142                     812                      ASL.W       #8,D2
00001806                           813                      
00001806  C27C 000F                814                      AND.W       #$F,D1              * the last digit
0000180A  1401                     815                      MOVE.B      D1,D2               
0000180C  4EB9 00001824            816                      JSR         TO_STRING
00001812  3F02                     817                      MOVE.W      D2,-(SP)            * puting on the stack to print
00001814                           818                      
00001814  224F                     819                      MOVE.L      SP,A1               * printing
00001816  103C 000E                820                      MOVE.B      #14,D0
0000181A  4E4F                     821                      TRAP        #15
0000181C  2A1F                     822                      MOVE.L      (SP)+, D5           * Adjesting the sp
0000181E                           823  
0000181E  4CDF 7FFF                824  PRINT_REGISTOR_RETURN           MOVEM.L     (SP)+,ALL_REG   *returning the original val
00001822  4E75                     825                                  RTS
00001824                           826                                  
00001824  B43C 0009                827  TO_STRING   CMP.B   #9,D2               * check if digit or leter
00001828  6E00 0008                828              BGT     LETTERS     
0000182C  0602 0030                829              ADD.B   #$30,D2             * offseting digit
00001830  4E75                     830              RTS
00001832  0602 0037                831  LETTERS     ADD.B   #$37,D2             * offseting leter
00001836  4E75                     832              RTS   
00001838                           833  
00001838                           834  *________________________________________________________________________________________
00001838                           835  
00001838                           836  
00001838                           837  *________________ PRINT OPEN PARENTHESIS ________________________________________
00001838                           838          *PARAMENTER     NO PARAMETER NEEDED
00001838= 28 00                    839  OPEN_PAR_TAG        DC.B    '(',0  
0000183A= 29 00                    840  CLOSED_PAR_TAG      DC.B    ')',0
0000183C= 23 00                    841  HASH_SIGN_TAG       DC.B    '#',0
0000183E= 24 00                    842  DOLLAR_TAG          DC.B    '$',0
00001840= 2F 00                    843  FORWARD_SLASH_TAG   DC.B    '/',0      
00001842  48E7 FFFE                844  PRINT_OPEN_PARENTHESIS  MOVEM.L     ALL_REG, -(SP)
00001846  43F8 1838                845                          LEA         OPEN_PAR_TAG, A1
0000184A  103C 000E                846                          MOVE.B      #14,D0
0000184E  4E4F                     847                          TRAP        #15
00001850  4CDF 7FFF                848                          MOVEM.L     (SP)+,ALL_REG
00001854  4E75                     849                          RTS
00001856                           850  *_________________________________________________________________________________
00001856                           851  
00001856                           852  *________________ PRINT CLOSED PARENTHESIS ________________________________________
00001856                           853          *PARAMENTER     NO PARAMETER NEEDED
00001856                           854          
00001856  48E7 FFFE                855  PRINT_CLOSED_PARENTHESIS    MOVEM.L     ALL_REG, -(SP)
0000185A  43F8 183A                856                              LEA         CLOSED_PAR_TAG, A1
0000185E  103C 000E                857                              MOVE.B      #14,D0
00001862  4E4F                     858                              TRAP        #15
00001864  4CDF 7FFF                859                              MOVEM.L     (SP)+,ALL_REG
00001868  4E75                     860                              RTS
0000186A                           861  *__________________________________________________________________________________
0000186A                           862  
0000186A                           863  *________________ PRINT PLUS SIGN _________________________________________________
0000186A                           864          *PARAMENTER     NO PARAMETER NEEDED
0000186A= 2B 00                    865  PLUS_TAG            DC.B    '+',0
0000186C= 2D 00                    866  MINUS_TAG           DC.B    '-',0        
0000186E  48E7 FFFE                867  PRINT_PLUS      MOVEM.L     ALL_REG, -(SP)
00001872  43F8 186A                868                  LEA         PLUS_TAG, A1
00001876  103C 000E                869                  MOVE.B      #14,D0
0000187A  4E4F                     870                  TRAP        #15
0000187C  4CDF 7FFF                871                  MOVEM.L     (SP)+,ALL_REG
00001880  4E75                     872                  RTS
00001882                           873  *_________________________________________________________________________________
00001882                           874  
00001882                           875  *________________ PRINT MINUS SIGN _______________________________________________
00001882                           876          *PARAMENTER     NO PARAMETER NEEDED
00001882                           877          
00001882  48E7 FFFE                878  PRINT_MINUS         MOVEM.L     ALL_REG, -(SP)
00001886  43F8 186C                879                      LEA         MINUS_TAG, A1
0000188A  103C 000E                880                      MOVE.B      #14,D0
0000188E  4E4F                     881                      TRAP        #15
00001890  4CDF 7FFF                882                      MOVEM.L     (SP)+,ALL_REG
00001894  4E75                     883                      RTS
00001896                           884  *_________________________________________________________________________________
00001896                           885  
00001896                           886  *________________ PRINT COMMA ____________________________________________________
00001896                           887          *PARAMENTER     NO PARAMETER NEEDED
00001896= 09 00                    888  TAB_TAG         DC.B    $9,0
00001898= 20 00                    889  SPACE_TAG       DC.B    ' ',0
0000189A= 2C 00                    890  COMMA_TAG       DC.B    ',',0        
0000189C  48E7 FFFE                891  PRINT_COMMA         MOVEM.L     ALL_REG,-(SP)
000018A0  43F8 189A                892                      LEA         COMMA_TAG, A1
000018A4  103C 000E                893                      MOVE.B      #14,D0
000018A8  4E4F                     894                      TRAP        #15
000018AA  4CDF 7FFF                895                      MOVEM.L     (SP)+,ALL_REG
000018AE  4E75                     896                      RTS
000018B0                           897  *_________________________________________________________________________________
000018B0                           898  
000018B0                           899  *________________ PRINT TAB ______________________________________________________
000018B0                           900          *PARAMENTER     NO PARAMETER NEEDED
000018B0                           901          
000018B0  48E7 FFFE                902  PRINT_TAB       MOVEM.L     ALL_REG,-(SP)
000018B4  43F8 1896                903                  LEA         TAB_TAG, A1
000018B8  103C 000E                904                  MOVE.B      #14,D0
000018BC  4E4F                     905                  TRAP        #15
000018BE  4CDF 7FFF                906                  MOVEM.L     (SP)+,ALL_REG
000018C2  4E75                     907                  RTS
000018C4                           908  *_________________________________________________________________________________
000018C4                           909  
000018C4                           910  
000018C4                           911  *_______________    PRINT NEWLINE   ________________________________________________
000018C4                           912          *PARAMETER NO PARAMETER NEEDED
000018C4= 0D 0A 00                 913  NEWLINE_TAG         DC.B    CR,LF,0        
000018C8  48E7 FFFE                914  PRINT_NEWLINE       MOVEM.L     ALL_REG,-(SP)
000018CC  43F8 18C4                915                      LEA         NEWLINE_TAG, A1
000018D0  103C 000E                916                      MOVE.B      #14,D0
000018D4  4E4F                     917                      TRAP        #15
000018D6  4CDF 7FFF                918                      MOVEM.L     (SP)+,ALL_REG
000018DA  4E75                     919                      RTS
000018DC                           920  
000018DC                           921  *___________________________________________________________________________________
000018DC                           922  
000018DC                           923  
000018DC                           924  *_______________    PRINT HASH SIGN   ________________________________________________
000018DC                           925          *PARAMETER NO PARAMETER NEEDED
000018DC                           926          
000018DC  48E7 FFFE                927  PRINT_HASH_SIGN     MOVEM.L     ALL_REG,-(SP)
000018E0  43F8 183C                928                      LEA         HASH_SIGN_TAG, A1
000018E4  103C 000E                929                      MOVE.B      #14,D0
000018E8  4E4F                     930                      TRAP        #15
000018EA  4CDF 7FFF                931                      MOVEM.L     (SP)+,ALL_REG
000018EE  4E75                     932                      RTS
000018F0                           933  
000018F0                           934  *___________________________________________________________________________________
000018F0                           935  
000018F0                           936  
000018F0                           937  
000018F0                           938  *_______________    PRINT DOLLAR   ________________________________________________
000018F0                           939          *PARAMETER NO PARAMETER NEEDED
000018F0                           940          
000018F0  48E7 FFFE                941  PRINT_DOLLAR        MOVEM.L     ALL_REG,-(SP)
000018F4  43F8 183E                942                      LEA         DOLLAR_TAG, A1
000018F8  103C 000E                943                      MOVE.B      #14,D0
000018FC  4E4F                     944                      TRAP        #15
000018FE  4CDF 7FFF                945                      MOVEM.L     (SP)+,ALL_REG
00001902  4E75                     946                      RTS
00001904                           947  
00001904                           948  *___________________________________________________________________________________
00001904                           949  
00001904                           950  
00001904                           951  
00001904                           952  *_______________    PRINT FORWARD SLASH   ________________________________________________
00001904                           953          *PARAMETER NO PARAMETER NEEDED
00001904                           954          
00001904  48E7 FFFE                955  PRINT_FORWARD_SLASH     MOVEM.L     ALL_REG,-(SP)
00001908  43F8 1840                956                          LEA         FORWARD_SLASH_TAG, A1
0000190C  103C 000E                957                          MOVE.B      #14,D0
00001910  4E4F                     958                          TRAP        #15
00001912  4CDF 7FFF                959                          MOVEM.L     (SP)+,ALL_REG
00001916  4E75                     960                          RTS
00001918                           961  
00001918                           962  
00001918                           963     
00001918                           964  *********************************************************************
00001918                           965  *Subroutine: OUTPUT
00001918                           966  *What it does: Outputs parts of opword, moves to new screen if needed
00001918                           967  *Registers: Uses register A1, D0,
00001918                           968  *A1: Used to store messages and single char
00001918                           969  *Paramemeters: A1, A2
00001918                           970  *A1: Stores what should be used
00001918                           971  *********************************************************************  
00001918                           972  
00001918                           973       OUTPUT:
00001918                           974       
00001918  0C39 0001 00001CFB       975       CMP.B  #1,(OutputType)
00001920  6700 0026                976       BEQ    outputOpcode
00001924  0C39 0002 00001CFB       977       CMP.B  #2,(OutputType)
0000192C  6700 0066                978       BEQ    OutputSize
00001930  0C39 0003 00001CFB       979       CMP.B  #3,(OutputType)
00001938  6700 0062                980       BEQ    OutputData
0000193C  0C39 0004 00001CFB       981       CMP.B  #4,(OutputType)
00001944  6700 00AC                982       BEQ    OutputAddress
00001948                           983       
00001948                           984  outputOpcode    
00001948  0C39 001E 00001CFA       985       CMP.B  #30, (LineCounter)      Console holds 32 lines total, 30 used for dissassembly data
00001950  6C00 0010                986       BGE    outputOpcodeNewScreen
00001954                           987       
00001954  103C 000E                988       MOVE.B #14,D0
00001958  4E4F                     989       TRAP   #15
0000195A                           990       
0000195A  5239 00001CFA            991       ADD.B  #1,(LineCounter)
00001960                           992       
00001960  4E75                     993       RTS
00001962                           994       
00001962                           995       
00001962                           996  outputOpcodeNewScreen
00001962  2F09                     997       MOVE.L A1,-(SP)                Storing last message to be used later
00001964                           998       
00001964  43F9 00001CD0            999       LEA    OUTPUTNEWSCREEN,A1         
0000196A  103C 000E               1000       MOVE.B #14,D0
0000196E  4E4F                    1001       TRAP   #15
00001970                          1002       
00001970  43F9 00008008           1003       LEA    userInputStored,A1         Pauses program to show screen full of data
00001976  103C 0002               1004       MOVE.B #2,D0
0000197A  4E4F                    1005       TRAP   #15
0000197C                          1006       
0000197C  13FC 0000 00001CFA      1007       MOVE.B #0,(LineCounter)        Sets LineCounter to 0 to reset screen
00001984                          1008       
00001984  225F                    1009       MOVE.L (SP)+,A1                Retriving message to be used
00001986                          1010       
00001986  103C 000E               1011       MOVE.B #14,D0                  Outputting decoded message
0000198A  4E4F                    1012       TRAP   #15
0000198C                          1013       
0000198C  5239 00001CFA           1014       ADD.B  #1,(LineCounter)        Add to line counter for new screen
00001992                          1015       
00001992  4E75                    1016       RTS
00001994                          1017       
00001994                          1018  outputSize
00001994  103C 000E               1019      MOVE.B  #14,D0
00001998  4E4F                    1020      TRAP    #15
0000199A  4E75                    1021      RTS
0000199C                          1022  outputData
0000199C  267C 00000800           1023      MOVE.L   #$800,A3
000019A2  3692                    1024      MOVE.W  (A2),(A3)
000019A4  2F06                    1025      MOVE.L  D6,-(SP)
000019A6  103C 0000               1026      MOVE.B  #0,D0
000019AA  43F9 00009005           1027      LEA     addressOutput,A1
000019B0                          1028  
000019B0                          1029  outputDataLoop
000019B0                          1030  *check if loop has run 4 times
000019B0  B03C 0002               1031      CMP.B   #2,D0
000019B4  6700 001C               1032      BEQ     outputDataLoopEnd
000019B8                          1033      *Grab byte from address, dont increment
000019B8  1C13                    1034      MOVE.B  (A3),D6
000019BA                          1035      *LSR to isolate left bit
000019BA  E80E                    1036      LSR.B   #4,D6
000019BC                          1037      *Call converthtoa
000019BC  6100 008A               1038      BSR     CONVERTHTOA
000019C0  12C6                    1039      MOVE.B  D6,(A1)+   
000019C2                          1040      *Grab bye from address, increment
000019C2  1C1B                    1041      MOVE.B  (A3)+,D6
000019C4                          1042      *AND Mask second digit
000019C4  CC3C 000F               1043      AND.B   #$0F,D6
000019C8  6100 007E               1044      BSR     CONVERTHTOA
000019CC  12C6                    1045      MOVE.B  D6,(A1)+
000019CE  5200                    1046      ADD.B   #1,D0
000019D0  60DE                    1047      BRA     outputDataLoop
000019D2                          1048      
000019D2                          1049  outputDataLoopEnd
000019D2  12BC 0000               1050      MOVE.B  #$00,(A1)
000019D6  2C1F                    1051      MOVE.L  (SP)+,D6
000019D8  43F9 00009005           1052      LEA     addressOutput,A1
000019DE  103C 000E               1053      MOVE.B  #14,D0
000019E2  4E4F                    1054      TRAP    #15
000019E4                          1055      
000019E4  43F9 00001CF3           1056      LEA     NEWLINE,A1
000019EA  103C 000E               1057      MOVE.B  #14,D0
000019EE  4E4F                    1058      TRAP    #15
000019F0                          1059  
000019F0  4E75                    1060      RTS
000019F2                          1061   
000019F2                          1062      
000019F2                          1063  outputAddress
000019F2  267C 00000800           1064      MOVE.L  #$800,A3
000019F8  268A                    1065      MOVE.L  A2,(A3)
000019FA  2F06                    1066      MOVE.L  D6,-(SP)
000019FC  103C 0000               1067      MOVE.B  #0,D0
00001A00  43F9 00009005           1068      LEA     addressOutput,A1
00001A06                          1069  outputAddressLoop
00001A06                          1070      *check if loop has run 4 times
00001A06  B03C 0004               1071      CMP.B   #4,D0
00001A0A  6700 001C               1072      BEQ     outputAddressLoopEnd
00001A0E                          1073      *Grab byte from address, dont increment
00001A0E  1C13                    1074      MOVE.B  (A3),D6
00001A10                          1075      *LSR to isolate left bit
00001A10  E80E                    1076      LSR.B   #4,D6
00001A12                          1077      *Call converthtoa
00001A12  6100 0034               1078      BSR     CONVERTHTOA
00001A16  12C6                    1079      MOVE.B  D6,(A1)+   
00001A18                          1080      *Grab bye from address, increment
00001A18  1C1B                    1081      MOVE.B  (A3)+,D6
00001A1A                          1082      *AND Mask second digit
00001A1A  CC3C 000F               1083      AND.B   #$0F,D6
00001A1E  6100 0028               1084      BSR     CONVERTHTOA
00001A22  12C6                    1085      MOVE.B  D6,(A1)+
00001A24  5200                    1086      ADD.B   #1,D0
00001A26  60DE                    1087      BRA     outputAddressLoop
00001A28                          1088      
00001A28                          1089      
00001A28                          1090  outputAddressLoopEnd
00001A28  12BC 0000               1091      MOVE.B  #$00,(A1)
00001A2C  2C1F                    1092      MOVE.L  (SP)+,D6
00001A2E  43F9 00009005           1093      LEA     addressOutput,A1
00001A34                          1094      
00001A34  103C 000E               1095      MOVE.B  #14,D0
00001A38  4E4F                    1096      TRAP    #15
00001A3A                          1097      
00001A3A  43F9 00001CF6           1098      LEA     spaces,A1
00001A40  103C 000E               1099      MOVE.B  #14,D0
00001A44  4E4F                    1100      TRAP    #15
00001A46                          1101  
00001A46                          1102  
00001A46  4E75                    1103      RTS
00001A48                          1104  
00001A48                          1105  *********************************************************************
00001A48                          1106  *Subroutine: CONVERTHTOA
00001A48                          1107  *What it does: Converts HEX to ASCII
00001A48                          1108  *Registers: Uses register D6,D0
00001A48                          1109  *D6: Stores hex character to be converted
00001A48                          1110  *Paramemeters: D6
00001A48                          1111  *D6: Stores hex characcter to be converted
00001A48                          1112  *********************************************************************
00001A48                          1113      CONVERTHTOA:
00001A48                          1114      
00001A48  BC3C 0009               1115      CMP.B   #9,D6
00001A4C  6F00 0006               1116      BLE     zerotonine
00001A50  6000 000A               1117      BRA     AtoF
00001A54                          1118      
00001A54                          1119  zerotonine    
00001A54  0686 00000030           1120      ADD.L   #$30,D6
00001A5A  4E75                    1121      RTS
00001A5C                          1122  AtoF
00001A5C  0686 00000037           1123      ADD.L   #$37,D6
00001A62  4E75                    1124      RTS
00001A64                          1125      
00001A64                          1126  END_SIMULATION:
00001A64                          1127          
00001A64  103C 0009               1128      MOVE.B  #9,D0
00001A68  4E4F                    1129      TRAP    #15
00001A6A                          1130  
00001A6A  FFFF FFFF               1131      SIMHALT             ; halt simulator
00001A6E                          1132  
00001A6E                          1133  * Put variables and constants here
00001A6E= 57 65 6C 63 6F 6D ...   1134  STARTMESSAGE    DC.B    'Welcome to the CSS 422 dissasembler!',CR,LF
00001A94= 53 6F 6D 65 20 71 ...   1135                  DC.B    'Some quick rules:',CR,LF
00001AA7= 31 29 20 4F 6E 6C ...   1136                  DC.B    '1) Only the last 6 characters will be saved as the address',CR,LF
00001AE3= 32 29 20 54 68 65 ...   1137                  DC.B    '2) The input only accepts hexadecimal input, both in upper and lower case',CR,LF
00001B2E= 33 29 20 41 6E 79 ...   1138                  DC.B    '3) Any part of the input that is not within the hexadecimal range ',CR,LF
00001B72= 20 20 20 77 69 6C ...   1139                  DC.B    '   will be rejected',CR,LF
00001B87= 34 29 20 54 68 65 ...   1140                  DC.B    '4) The first input must be smaller than the second, otherwise it ',CR,LF
00001BCA= 20 20 20 77 69 6C ...   1141                  DC.B    '   will be rejected',CR,LF,0      
00001BE0= 50 6C 65 61 73 65 ...   1142  INPUT1MESSAGE   DC.B    'Please input the lower address edge',CR,LF,0
00001C06= 50 6C 65 61 73 65 ...   1143  INPUT2MESSAGE   DC.B    'Please input the upper address edge',CR,LF,0
00001C2C                          1144  
00001C2C= 0D 0A 54 68 69 73 ...   1145  INPUTERRORBADCHAR   DC.B    CR,LF,'This value is not valid',CR,LF,CR,LF,0
00001C4A= 0D 0A 49 6E 70 75 ...   1146  INPUTERROR2SMALLER  DC.B    CR,LF,'Input 2 is smaller than input 1. Input a larger value',CR,LF,CR,LF,0
00001C86                          1147  
00001C86= 54 6F 20 72 65 70 ...   1148  INPUTREPEAT     DC.B    'To repeat the program, press enter. Otherwise, press any button to quit',CR,LF,0
00001CD0                          1149  
00001CD0= 50 6C 65 61 73 65 ...   1150  OUTPUTNEWSCREEN     DC.B    'Please press enter for more code',CR,LF,0
00001CF3                          1151  
00001CF3= 0D 0A 00                1152  NEWLINE     DC.B    CR,LF,0
00001CF6= 20 20 00                1153  SPACES      DC.B    '  ',0
00001CF9                          1154  
00001CF9= 01                      1155  InputQuality    DC.B    1       Set to 1 for default good
00001CFA= 00                      1156  LineCounter     DC.B    0      Counts the number of lines used per screen (max of 31)
00001CFB= 00                      1157  OutputType      DC.B    0      To track what type is being output
00001CFC                          1158  
00001CFC= 4E 4F 50 0D 0A 00       1159  nopout  DC.B    'NOP',CR,LF,0
00001D02= 4D 4F 56 45 00          1160  moveout  DC.B    'MOVE',0
00001D07= 4D 4F 56 45 41 00       1161  moveaout DC.B      'MOVEA',0
00001D0D= 4D 4F 56 45 51 00       1162  moveqout DC.B   'MOVEQ',0
00001D13= 4D 4F 56 45 4D 00       1163  movemout DC.B   'MOVEM',0
00001D19                          1164  
00001D19= 53 55 42 00             1165  subout    DC.B  'SUB',0
00001D1D= 41 44 44 00             1166  addout    DC.B 'ADD',0
00001D21= 41 44 44 00             1167  addaout    DC.B 'ADD',0
00001D25= 41 44 44 00             1168  addqout    DC.B 'ADD',0
00001D29                          1169  
00001D29= 4C 45 41 00             1170  leaout    DC.B  'LEA',0
00001D2D                          1171  
00001D2D= 4E 4F 54 00             1172  notout    DC.B  'NOT',0
00001D31= 4F 52 00                1173  orout DC.B     'OR',0
00001D34= 41 4E 44 00             1174  andout DC.B     'AND',0
00001D38                          1175  
00001D38                          1176  
00001D38= 4C 53 4C 00             1177  lslout    DC.B  'LSL',0
00001D3C= 4C 53 52 00             1178  lsrout    DC.B  'LSR',0
00001D40= 41 53 4C 00             1179  aslout    DC.B  'ASL',0
00001D44= 41 53 52 00             1180  asrout    DC.B  'ASR',0
00001D48                          1181  
00001D48= 52 4F 4C 00             1182  rolout    DC.B  'ROL',0
00001D4C= 52 4F 52 00             1183  rorout    DC.B  'ROR',0
00001D50                          1184  
00001D50= 4A 53 52 00             1185  jsrout DC.B     'JSR',0
00001D54= 52 54 53 0D 0A 00       1186  rtsout DC.B     'RTS',CR,LF,0
00001D5A= 42 52 41 00             1187  braout DC.B     'BRA',0
00001D5E                          1188  
00001D5E= 44 41 54 41 20 20 ...   1189  dataout DC.B    'DATA   ',0
00001D66                          1190  
00001D66                          1191  
00001D66                          1192  
00001D66= 2E 42 20 20 20 20 00    1193  byteout  DC.B    '.B    ',0
00001D6D= 2E 57 20 20 20 20 00    1194  wordout  DC.B    '.W    ',0
00001D74= 2E 4C 20 20 20 20 00    1195  longout  DC.B    '.L    ',0
00001D7B                          1196  
00001D7B= 0D 0A 00                1197  empty    DC.B    '',CR,LF,0
00001D7E                          1198  
00001D7E  =0000000D               1199  CR  EQU $0D
00001D7E  =0000000A               1200  LF  EQU $0A
00001D7E                          1201  
00001D7E                          1202  
00001D7E                          1203      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADD                 1290
ADDAOUT             1D21
ADDOUT              1D1D
ADDQOUT             1D25
ADDRESSOUTPUT       9005
ALL_REG             7FFF
AND                 1368
ANDOUT              1D34
ASLOUT              1D40
ASROUT              1D44
ATOF                1A5C
ATOH                14C6
BITS0TO5_MASK       3F
BITS7TO8_MASK       C0
BITS9TO11_MASK      E00
BRA                 139A
BRAOUT              1D5A
BYTE                116E
BYTEOUT             1D66
CHECK_EA_AB_L       1704
CHECK_EA_AB_W       16E4
CHECK_EA_AR         164C
CHECK_EA_IMM        1722
CHECK_EA_INDIRECT   1666
CHECK_EA_POST       168C
CHECK_EA_PRE        16B8
CHECK_VALID_EA      15E0
CLOSED_PAR_TAG      183A
COMMA_TAG           189A
CONVERTATOH         14C6
CONVERTHTOA         1A48
CR                  D
DATA                13B0
DATAOUT             1D5E
DOLLAR_TAG          183E
EMPTY               1D7B
END_SIMULATION      1A64
FINISH              151A
FIRSTINPUT          13E4
FORMAT_IMMEDIATE_DATA  1526
FORWARD_SLASH_TAG   1840
HASH_SIGN_TAG       183C
HERE                1020
HEX_TO_ASCII        17D2
HEX_TO_ASCII_RETURN  17E2
IMMEDIATE0          1536
IMMEDIATE_END       1538
INPUT1              8000
INPUT1MESSAGE       1BE0
INPUT2              8004
INPUT2MESSAGE       1C06
INPUTERROR          151C
INPUTERROR2SMALLER  1C4A
INPUTERRORBADCHAR   1C2C
INPUTQUALITY        1CF9
INPUTREPEAT         1C86
INPUT_BUFFER        1776
INVALID_EA          161A
IPUT_BUFFER_EX      176E
JSR                 12D8
JSROUT              1D50
LEA                 1320
LEAOUT              1D29
LETTERS             1832
LF                  A
LINECOUNTER         1CFA
LONG                1196
LONGOUT             1D74
LOWERCASE           1502
LSLOUT              1D38
LSROUT              1D3C
MEMORY_TO_REGISTER  1578
MINUS_TAG           186C
MODE_010            15A6
MODE_01_0           15D8
MOVE                11BE
MOVEA               11F6
MOVEAOUT            1D07
MOVEM               1234
MOVEMOUT            1D13
MOVEOUT             1D02
MOVEQ               121E
MOVEQOUT            1D0D
MOVE_MOVEA_EA       153A
NEWLINE             1CF3
NEWLINE_TAG         18C4
NOP                 11AA
NOPOUT              1CFC
NOT                 12EE
NOTOUT              1D2D
NUMBER_TO_ASCII     17E8
OPCODE              10E0
OPEN_PAR_TAG        1838
OR                  1336
OROUT               1D31
OUTPUT              1918
OUTPUTADDRESS       19F2
OUTPUTADDRESSLOOP   1A06
OUTPUTADDRESSLOOPEND  1A28
OUTPUTDATA          199C
OUTPUTDATALOOP      19B0
OUTPUTDATALOOPEND   19D2
OUTPUTNEWSCREEN     1CD0
OUTPUTOPCODE        1948
OUTPUTOPCODENEWSCREEN  1962
OUTPUTSIZE          1994
OUTPUTTYPE          1CFB
PLUS_TAG            186A
POPULATE_BUFFER     17A8
PRINT_BUFFER        1764
PRINT_CLOSED_PARENTHESIS  1856
PRINT_COMMA         189C
PRINT_DOLLAR        18F0
PRINT_EA            1624
PRINT_EA_RETURN     175E
PRINT_FORWARD_SLASH  1904
PRINT_HASH_SIGN     18DC
PRINT_HEX           1786
PRINT_HEX_RETURN    179C
PRINT_MINUS         1882
PRINT_NEWLINE       18C8
PRINT_OPEN_PARENTHESIS  1842
PRINT_PLUS          186E
PRINT_REGISTOR      17EE
PRINT_REGISTOR_RETURN  181E
PRINT_TAB           18B0
READ_WORD_IMM       1746
REGISTER_TO_MEMORY  15B4
RETURN              116C
ROLOUT              1D48
ROROUT              1D4C
RTS                 12C2
RTSOUT              1D54
SECONDINPUT         1448
SPACES              1CF6
SPACE_TAG           1898
START               1000
STARTMESSAGE        1A6E
SUB                 125E
SUBOUT              1D19
TAB_TAG             1896
THERE               10B4
THROWINPUT1CHARERROR  142A
THROWINPUT2CHARERROR  1496
THROWINPUT2LOWERERROR  14B2
TO_STRING           1824
UPPERCASE           14EA
USERINPUT           13D2
USERINPUTREPEAT     10B6
USERINPUTSTART      1008
USERINPUTSTORED     8008
VALID_EA_PC         1602
WELCOMEEXPLANATION  13D2
WORD                1182
WORDOUT             1D6D
WRONG_INSTRUCTION   159C
ZEROTONINE          1A54
